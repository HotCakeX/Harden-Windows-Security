<?xml version="1.0" encoding="utf-8"?>
<Page
    x:Class="HardenSystemSecurity.Pages.Protect"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ui="using:CommunityToolkit.WinUI"
    xmlns:customUI="using:AppControlManager.CustomUIElements"
    xmlns:Protect="using:HardenSystemSecurity.Protect"
    xmlns:ani="using:CommunityToolkit.WinUI.Animations"
    xmlns:DI="using:HardenSystemSecurity.DeviceIntents"
    xmlns:controls="using:CommunityToolkit.WinUI.Controls"
    FlowDirection="{x:Bind ViewModel.AppSettings.ApplicationGlobalFlowDirection, Mode=OneWay}">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Grid.Resources>

            <!-- Styles used by the Device Intents GridView -->
            <Style
                x:Key="GridViewItemStyle"
                BasedOn="{StaticResource DefaultGridViewItemStyle}"
                TargetType="GridViewItem">
                <Setter Property="Margin" Value="0,0,12,12" />
            </Style>

            <Style
                x:Key="GridViewItemStyleSpaced"
                BasedOn="{StaticResource DefaultGridViewItemStyle}"
                TargetType="GridViewItem">
                <Setter Property="Margin" Value="12,0,0,12" />
            </Style>

            <!-- Defines a single Protection category displayed in the ListView -->
            <DataTemplate x:Key="ProtectionCategoryListViewTemplate"
                          x:DataType="Protect:ProtectionCategoryListViewItem">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <Border CornerRadius="15"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"
                            BorderThickness="0"
                            Grid.RowSpan="3"
                            Grid.Column="0">
                        <Image Width ="36"
                               Height="36"
                               Margin="6"
                               ToolTipService.ToolTip="{x:Bind Title}"
                               AutomationProperties.HelpText="{x:Bind Title}"
                               Source="{x:Bind Logo}" />
                    </Border>

                    <TextBlock Grid.Column="1"
                               Grid.Row="0"
                               Text="{x:Bind Title}"
                               ToolTipService.ToolTip="{x:Bind Title}"
                               AutomationProperties.HelpText="{x:Bind Title}"
                               x:Phase="1"
                               Style="{ThemeResource BaseTextBlockStyle}"
                               Margin="12,6,0,0"/>

                    <TextBlock Grid.Column="1"
                               Grid.Row="1"
                               Text="{x:Bind Subtitle}"
                               ToolTipService.ToolTip="{x:Bind Subtitle}"
                               AutomationProperties.HelpText="{x:Bind Subtitle}"
                               x:Phase="2"
                               Style="{ThemeResource BodyTextBlockStyle}"
                               Margin="12,6,0,0"/>

                    <!-- Sub-categories as vertical list of checkboxes -->
                    <ItemsControl Grid.Column="1"
                                  Grid.Row="2"
                                  ItemsSource="{x:Bind SubCategories}"
                                  Margin="12,6,0,6">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate x:DataType="Protect:SubCategoryDefinition">
                                <StackPanel Orientation="Vertical" Spacing="4" Margin="6">
                                    <CheckBox Content="{x:Bind Description}"
                                              IsChecked="{x:Bind IsChecked, Mode=TwoWay}"
                                              ToolTipService.ToolTip="{x:Bind Description}"
                                              AutomationProperties.HelpText="{x:Bind Description}" />

                                    <TextBlock Text="{x:Bind Tip}"
                                               ToolTipService.ToolTip="{x:Bind Tip}"
                                               Visibility="{x:Bind Protect:SubCategoryDefinition.HasTip(Tip)}"
                                               AutomationProperties.HelpText="{x:Bind Tip}"
                                               Style="{StaticResource CaptionTextBlockStyle}"
                                               Foreground="{ThemeResource SystemFillColorCautionBrush}"/>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </Grid>
            </DataTemplate>

            <!-- For the listview that shows security measures that will be applied based on selected device usage intent. -->
            <DataTemplate x:Key="DeviceIntentMUnitPreviewTemplate"
                          xmlns:VMs="using:HardenSystemSecurity.ViewModels"
                          x:DataType="Protect:MUnit">

                <!-- Swipe left (RightItems) to delete with a gradient background -->
                <SwipeControl BorderThickness="0">

                    <!-- Right (swipe-left) actions -->
                    <SwipeControl.RightItems>
                        <SwipeItems Mode="Execute">
                            <SwipeItem x:Uid="DeleteRow"
                                       BehaviorOnInvoked="Close"
                                       Invoked="{x:Bind VMs:ViewModelProvider.ProtectVM.DeleteDeviceIntentPreviewItem_SwipeInvoked}">
                                <SwipeItem.IconSource>
                                    <FontIconSource Glyph="&#xE74D;" />
                                </SwipeItem.IconSource>
                                <SwipeItem.Background>
                                    <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                                        <GradientStop Color="#c31432" Offset="0.0"/>
                                        <GradientStop Color="#240b36" Offset="1.0"/>
                                    </LinearGradientBrush>
                                </SwipeItem.Background>
                            </SwipeItem>
                        </SwipeItems>
                    </SwipeControl.RightItems>

                    <!-- Context flyout for right-click -->
                    <SwipeControl.ContextFlyout>
                        <MenuFlyout>
                            <!-- Delete the current preview item -->
                            <MenuFlyoutItem x:Uid="DeleteRow"
                                            Icon="Delete"
                                            Tag="{x:Bind}"
                                            Click="{x:Bind VMs:ViewModelProvider.ProtectVM.DeleteDeviceIntentPreviewItem_Click}" />
                        </MenuFlyout>
                    </SwipeControl.ContextFlyout>

                    <!-- Setting the Grid background to Transparent so that the entire item becomes hit-testable in order to make right-click context menu flyout open on empty space too -->
                    <Grid ColumnSpacing="12"
                          Padding="8"
                          Background="Transparent"
                          Margin="0,4,0,4">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="40"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- Name -->
                        <TextBlock Grid.Row="0"
                                   Grid.Column="0"
                                   Text="{x:Bind Name}"
                                   ToolTipService.ToolTip="{x:Bind Name}"
                                   AutomationProperties.HelpText="{x:Bind Name}"
                                   TextWrapping="Wrap"
                                   x:Phase="1"
                                   FontSize="13"
                                   FontWeight="SemiBold"
                                   Style="{ThemeResource BodyTextBlockStyle}"
                                   Margin="0,0,0,4"/>

                        <!-- Compact SubCategory tag; constrained and ellipsized so it won't stretch horizontally -->
                        <Border Grid.Row="1"
                                Grid.Column="0"
                                Visibility="{x:Bind SubCategoryVisibility, Mode=OneWay}"
                                CornerRadius="12"
                                Padding="8,2"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left"
                                Background="{ThemeResource SubtleFillColorSecondaryBrush}"
                                BorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                                BorderThickness="1"
                                MaxWidth="320">
                            <TextBlock Text="{x:Bind SubCategoryName, Mode=OneWay}"
                                       FontSize="10"
                                       FontWeight="SemiBold"
                                       Foreground="{ThemeResource TextFillColorPrimaryBrush}"
                                       TextWrapping="NoWrap"
                                       TextTrimming="CharacterEllipsis"/>
                        </Border>

                        <!-- Link -->
                        <customUI:LinkButtonV2 Grid.Row="1" Grid.Column="1"
                                               LinkUrl="{x:Bind URL}"
                                               HorizontalAlignment="Right"
                                               VerticalAlignment="Center"
                                               Visibility="{x:Bind URLVisibility, Mode=OneWay}"/>
                    </Grid>
                </SwipeControl>
            </DataTemplate>

            <!-- ItemTemplateForIntentItems for DI:IntentItem (no fixed size so GridView can wrap/stretch) -->
            <DataTemplate x:Key="ItemTemplateForIntentItems" x:DataType="DI:IntentItem">
                <Grid Padding="8"
                      HorizontalAlignment="Stretch"
                      Background="{ThemeResource ControlFillColorDefaultBrush}"
                      BorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                      BorderThickness="1"
                      ColumnSpacing="16"
                      CornerRadius="{StaticResource OverlayCornerRadius}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <Image
                            Grid.RowSpan="2"
                            Width="32"
                            Margin="8,12,16,0"
                            VerticalAlignment="Top"
                            AutomationProperties.Name="{x:Bind Title}"
                            Stretch="Uniform">
                            <Image.Source>
                                <BitmapImage UriSource="{x:Bind Image}" />
                            </Image.Source>
                        </Image>

                        <TextBlock
                            Grid.Column="1"
                            Margin="0,12,0,0"
                            VerticalAlignment="Bottom"
                            Style="{ThemeResource BodyStrongTextBlockStyle}"
                            Text="{x:Bind Title}"
                            TextLineBounds="TrimToCapHeight"
                            TextWrapping="NoWrap" />

                        <ScrollViewer Grid.Row="1"
                                      ScrollViewer.VerticalScrollBarVisibility="Visible"
                                      Grid.Column="1">
                            <TextBlock
                            Foreground="{ThemeResource TextFillColorSecondaryBrush}"
                            Style="{ThemeResource BodyTextBlockStyle}"
                            Text="{x:Bind Description}"/>
                        </ScrollViewer>
                    </Grid>
                </Grid>
            </DataTemplate>

            <!-- A responsive container style for GridView (spacing + wrapping) -->
            <Style x:Key="GridViewItemStyleSpacedResponsive"
                   TargetType="GridViewItem"
                   BasedOn="{StaticResource GridViewItemStyleSpaced}">
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="MinWidth" Value="260"/>
                <Setter Property="MaxWidth" Value="420"/>
            </Style>

        </Grid.Resources>

        <controls:WrapPanel Style="{StaticResource PageHeaderWrapPanelStyle}">

            <TextBlock x:Uid="ProtectPageTitle" TextWrapping="WrapWholeWords" Style="{StaticResource BodyTextBlockStyle}" />

            <customUI:GuideButton NavigateUri="https://github.com/HotCakeX/Harden-Windows-Security/wiki/Protect" />

        </controls:WrapPanel>

        <SelectorBar
            Grid.Row="1"
            Margin="0,-7,0,10"
            HorizontalAlignment="Center"
            SelectionChanged="{x:Bind ViewModel.SelectorBar_SelectionChanged}"
            Style="{StaticResource TokenViewSelectorBarStyle}">
            <SelectorBarItem
                IsSelected="True"
                Style="{StaticResource TokenViewSelectorBarItemStyle}"
                Tag="Presets"
                x:Uid="Presets">
                <SelectorBarItem.Icon>
                    <FontIcon Glyph="&#xF5EE;" />
                </SelectorBarItem.Icon>
            </SelectorBarItem>
            <SelectorBarItem
                Style="{StaticResource TokenViewSelectorBarItemStyle}"
                Tag="DeviceIntents"
                x:Uid="DeviceIntents">
                <SelectorBarItem.Icon>
                    <FontIcon Glyph="&#xF133;" />
                </SelectorBarItem.Icon>
            </SelectorBarItem>

        </SelectorBar>

        <customUI:InfoBarV2 Grid.Row="2"
          Margin="15,0,15,10"
          IsOpen="{x:Bind ViewModel.MainInfoBarIsOpen, Mode=TwoWay}"
          Message="{x:Bind ViewModel.MainInfoBarMessage, Mode=OneWay}"
          Severity="{x:Bind ViewModel.MainInfoBarSeverity, Mode=OneWay}"
          IsClosable="{x:Bind ViewModel.MainInfoBarIsClosable, Mode=OneWay}"/>

        <ScrollViewer Grid.Row="3"
                      Visibility="{x:Bind ViewModel.IsDeviceIntentSectionVisible, Mode=OneWay}"
                      Margin="5,0,5,5">

            <!-- Device Intents section -->
            <Grid ui:Effects.Shadow="{StaticResource BorderShadow}"
                  CornerRadius="18"
                  HorizontalAlignment="Center">

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <StackPanel Orientation="Vertical"
                            Spacing="3"
                            Grid.Row="0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center">
                    <TextBlock x:Uid="SelectDeviceIntents"
                               Style="{ThemeResource TitleTextBlockStyle}" />
                    <TextBlock x:Uid="SelectDeviceIntentsCaption"
                               Style="{ThemeResource BodyTextBlockStyle}"
                               Opacity="0.8"/>
                </StackPanel>

                <!-- GridView: default visuals, only spacing + wrapping -->
                <GridView Grid.Row="1"
                          Margin="0,10,0,0"
                          MaxHeight="320"
                          IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}"
                          SelectionMode="Single"
                          IsMultiSelectCheckBoxEnabled="False"
                          HorizontalAlignment="Stretch"
                          SelectedItem="{x:Bind ViewModel.SelectedDeviceIntent, Mode=TwoWay}"
                          ItemsSource="{x:Bind ViewModel.DeviceIntents}"
                          ItemContainerStyle="{StaticResource GridViewItemStyleSpacedResponsive}"
                          ItemTemplate="{StaticResource ItemTemplateForIntentItems}">
                    <GridView.ItemsPanel>
                        <ItemsPanelTemplate>
                            <!-- Wrap across width; presenter uses container width -->
                            <ItemsWrapGrid Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </GridView.ItemsPanel>
                </GridView>

                <Expander Grid.Row="2" Margin="0,0,0,10" HorizontalAlignment="Stretch">
                    <Expander.Header>

                        <controls:WrapPanel Orientation="Horizontal"
                                            Padding="8"
                                            HorizontalSpacing="10"
                                            VerticalSpacing="6"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center">

                            <StackPanel Orientation="Vertical" VerticalAlignment="Center" Spacing="2">
                                <TextBlock x:Uid="ResultingSecurityMeasures"
                                           Style="{ThemeResource SubtitleTextBlockStyle}"/>

                                <TextBlock x:Uid="ResultingSecurityMeasuresCaption"
                                           Style="{ThemeResource BodyTextBlockStyle}"
                                           Opacity="0.8"/>
                            </StackPanel>

                            <!-- Total chip -->
                            <Border CornerRadius="8"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center"
                                    Padding="10,6"
                                    BorderThickness="1"
                                    BorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                                    Background="{ThemeResource CardBackgroundFillColorDefaultBrush}">
                                <StackPanel Orientation="Horizontal" Spacing="6" VerticalAlignment="Center">
                                    <FontIcon Glyph="&#xE8A9;" Foreground="{ThemeResource AccentTextFillColorPrimaryBrush}" />
                                    <TextBlock VerticalAlignment="Center">
                                             <Run x:Uid="TotalText" />
                                             <Run Text="{x:Bind ViewModel.DeviceIntentMUnitsPreview.Count, Mode=OneWay}" FontWeight="SemiBold" />
                                    </TextBlock>
                                </StackPanel>
                            </Border>

                            <TextBox IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}"
                                     x:Uid="SearchBoxTextBox"
                                     Text="{x:Bind ViewModel.SearchKeyword, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     VerticalAlignment="Center"
                                     VerticalContentAlignment="Center" />

                            <customUI:AnimatedCancellableButton
                                    x:Uid="ApplyIntentBasedSecurityMeasuresButton"
                                    Margin="5,0,0,0"
                                    IsEnabled="{x:Bind ViewModel.IsApplyIntentsButtonEnabled, Mode=OneWay}"
                                    CancelMethod="{x:Bind ViewModel.ApplyIntentsCancellableButton.Cancel, Mode=OneWay}"
                                    ExternalOperationInProgress="{x:Bind ViewModel.ApplyIntentsCancellableButton.IsOperationInProgress, Mode=OneWay}"
                                    ExternalIsCancelState="{x:Bind ViewModel.ApplyIntentsCancellableButton.IsCancelState, Mode=OneWay}"
                                    ExternalIsCancellingState="{x:Bind ViewModel.ApplyIntentsCancellableButton.IsCancellingState, Mode=OneWay}"
                                    ExternalIsAnimating="{x:Bind ViewModel.ApplyIntentsCancellableButton.IsAnimating, Mode=OneWay}"
                                    ExternalButtonContent="{x:Bind ViewModel.ApplyIntentsCancellableButton.ButtonContent, Mode=OneWay}"
                                    ExternalOriginalText="{x:Bind ViewModel.ApplyIntentsCancellableButton.OriginalText, Mode=OneWay}"
                                    ExternalInternalIsCancelState="{x:Bind ViewModel.ApplyIntentsCancellableButton.InternalIsCancelState, Mode=OneWay}"
                                    ExternalInternalIsCancellingState="{x:Bind ViewModel.ApplyIntentsCancellableButton.InternalIsCancellingState, Mode=OneWay}"
                                    ExternalInternalIsAnimating="{x:Bind ViewModel.ApplyIntentsCancellableButton.InternalIsAnimating, Mode=OneWay}"
                                    ExternalInternalIsOperationInProgress="{x:Bind ViewModel.ApplyIntentsCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
                                    ExternalInternalSuppressExternalClick="{x:Bind ViewModel.ApplyIntentsCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
                                    ExternalShadowAnimationRunning="{x:Bind ViewModel.ApplyIntentsCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
                                    ExternalOperationStarted="{x:Bind ViewModel.ApplyIntentsCancellableButton.OperationStarted, Mode=OneWay}"
                                    Click="{x:Bind ViewModel.ApplySelectedDeviceIntents}" />

                        </controls:WrapPanel>

                    </Expander.Header>

                    <Expander.Content>

                        <ListView HorizontalAlignment="Stretch"
                                  Height="400"
                                  IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}"
                                  ScrollViewer.VerticalScrollBarVisibility="Auto"
                                  ScrollViewer.VerticalScrollMode="Auto"
                                  ItemsSource="{x:Bind ViewModel.DeviceIntentMUnitsPreview}"
                                  ItemTemplate="{StaticResource DeviceIntentMUnitPreviewTemplate}"/>

                    </Expander.Content>

                </Expander>
            </Grid>

        </ScrollViewer>

        <!-- Presets section -->
        <Grid Grid.Row="3"
              Visibility="{x:Bind ViewModel.IsPresetsSectionVisible, Mode=OneWay}">

            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <Border x:Name="AnimatedBorder"
                    Grid.Row="0"
                    ui:Effects.Shadow="{StaticResource BorderShadow}"
                    Background="Transparent"
                    BorderThickness="0"
                    Margin="15,0,15,0"
                    PointerEntered="{x:Bind OnBorderPointerEntered}"
                    PointerExited="{x:Bind OnBorderPointerExited}">

                <ani:Explicit.Animations>
                    <ani:AnimationSet x:Name="ShadowEnterAnimation">
                        <ani:BlurRadiusDropShadowAnimation To="20"/>
                    </ani:AnimationSet>

                    <ani:AnimationSet x:Name="ShadowExitAnimation">
                        <ani:BlurRadiusDropShadowAnimation To="10"/>
                    </ani:AnimationSet>
                </ani:Explicit.Animations>

                <Border BorderThickness="0"
                        Padding="5"
                        Background="{ThemeResource AppOverlayBackgroundBrush}"
                        CornerRadius="18">

                    <controls:WrapPanel Orientation="Horizontal"
                                        Margin="10"
                                        HorizontalSpacing="15"
                                        VerticalSpacing="12"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center">

                        <TextBlock x:Uid="ProtectionPresets" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="4,0,4,0" FontWeight="Bold" />

                        <ComboBox x:Uid="ProtectionPresetsComboBox"
                                  IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}"
                                  ItemsSource="{x:Bind ViewModel.ProtectionPresetsSource}"
                                  SelectedIndex="{x:Bind ViewModel.ProtectionPresetsSelectedIndex, Mode=TwoWay}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate x:DataType="Protect:ProtectionPresetComboBoxType">
                                    <StackPanel Orientation="Horizontal" Spacing="5">
                                        <TextBlock Text="{x:Bind FriendlyName}" Margin="0,0,4,0" VerticalAlignment="Center"/>
                                        <RatingControl IsReadOnly="True" Value="{x:Bind Rating}" VerticalAlignment="Center"/>
                                    </StackPanel>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <!-- Apply Selected Button -->
                        <customUI:AnimatedCancellableButton x:Uid="ProtectPageApplySelectedButton"
                                                            IsEnabled="{x:Bind ViewModel.IsApplyButtonEnabled, Mode=OneWay}"
                                                            CancelMethod="{x:Bind ViewModel.ApplySelectedCancellableButton.Cancel, Mode=OneWay}"
                                                            ExternalOperationInProgress="{x:Bind ViewModel.ApplySelectedCancellableButton.IsOperationInProgress, Mode=OneWay}"
                                                            ExternalIsCancelState="{x:Bind ViewModel.ApplySelectedCancellableButton.IsCancelState, Mode=OneWay}"
                                                            ExternalIsCancellingState="{x:Bind ViewModel.ApplySelectedCancellableButton.IsCancellingState, Mode=OneWay}"
                                                            ExternalIsAnimating="{x:Bind ViewModel.ApplySelectedCancellableButton.IsAnimating, Mode=OneWay}"
                                                            ExternalButtonContent="{x:Bind ViewModel.ApplySelectedCancellableButton.ButtonContent, Mode=OneWay}"
                                                            ExternalOriginalText="{x:Bind ViewModel.ApplySelectedCancellableButton.OriginalText, Mode=OneWay}"
                                                            ExternalInternalIsCancelState="{x:Bind ViewModel.ApplySelectedCancellableButton.InternalIsCancelState, Mode=OneWay}"
                                                            ExternalInternalIsCancellingState="{x:Bind ViewModel.ApplySelectedCancellableButton.InternalIsCancellingState, Mode=OneWay}"
                                                            ExternalInternalIsAnimating="{x:Bind ViewModel.ApplySelectedCancellableButton.InternalIsAnimating, Mode=OneWay}"
                                                            ExternalInternalIsOperationInProgress="{x:Bind ViewModel.ApplySelectedCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
                                                            ExternalInternalSuppressExternalClick="{x:Bind ViewModel.ApplySelectedCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
                                                            ExternalShadowAnimationRunning="{x:Bind ViewModel.ApplySelectedCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
                                                            ExternalOperationStarted="{x:Bind ViewModel.ApplySelectedCancellableButton.OperationStarted, Mode=OneWay}"
                                                            Click="{x:Bind ViewModel.ApplySelectedCategories}"/>

                        <!-- Verify Selected Button -->
                        <customUI:AnimatedCancellableButton x:Uid="ProtectPageVerifySelectedButton"
                                                            IsEnabled="{x:Bind ViewModel.IsVerifyButtonEnabled, Mode=OneWay}"
                                                            CancelMethod="{x:Bind ViewModel.VerifySelectedCancellableButton.Cancel, Mode=OneWay}"
                                                            ExternalOperationInProgress="{x:Bind ViewModel.VerifySelectedCancellableButton.IsOperationInProgress, Mode=OneWay}"
                                                            ExternalIsCancelState="{x:Bind ViewModel.VerifySelectedCancellableButton.IsCancelState, Mode=OneWay}"
                                                            ExternalIsCancellingState="{x:Bind ViewModel.VerifySelectedCancellableButton.IsCancellingState, Mode=OneWay}"
                                                            ExternalIsAnimating="{x:Bind ViewModel.VerifySelectedCancellableButton.IsAnimating, Mode=OneWay}"
                                                            ExternalButtonContent="{x:Bind ViewModel.VerifySelectedCancellableButton.ButtonContent, Mode=OneWay}"
                                                            ExternalOriginalText="{x:Bind ViewModel.VerifySelectedCancellableButton.OriginalText, Mode=OneWay}"
                                                            ExternalInternalIsCancelState="{x:Bind ViewModel.VerifySelectedCancellableButton.InternalIsCancelState, Mode=OneWay}"
                                                            ExternalInternalIsCancellingState="{x:Bind ViewModel.VerifySelectedCancellableButton.InternalIsCancellingState, Mode=OneWay}"
                                                            ExternalInternalIsAnimating="{x:Bind ViewModel.VerifySelectedCancellableButton.InternalIsAnimating, Mode=OneWay}"
                                                            ExternalInternalIsOperationInProgress="{x:Bind ViewModel.VerifySelectedCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
                                                            ExternalInternalSuppressExternalClick="{x:Bind ViewModel.VerifySelectedCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
                                                            ExternalShadowAnimationRunning="{x:Bind ViewModel.VerifySelectedCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
                                                            ExternalOperationStarted="{x:Bind ViewModel.VerifySelectedCancellableButton.OperationStarted, Mode=OneWay}"
                                                            Click="{x:Bind ViewModel.VerifySelectedCategories}"/>

                        <!-- Remove Selected Button -->
                        <customUI:AnimatedCancellableButton x:Uid="ProtectPageRemoveSelectedButton"
                                                            IsEnabled="{x:Bind ViewModel.IsRemoveButtonEnabled, Mode=OneWay}"
                                                            CancelMethod="{x:Bind ViewModel.RemoveSelectedCancellableButton.Cancel, Mode=OneWay}"
                                                            ExternalOperationInProgress="{x:Bind ViewModel.RemoveSelectedCancellableButton.IsOperationInProgress, Mode=OneWay}"
                                                            ExternalIsCancelState="{x:Bind ViewModel.RemoveSelectedCancellableButton.IsCancelState, Mode=OneWay}"
                                                            ExternalIsCancellingState="{x:Bind ViewModel.RemoveSelectedCancellableButton.IsCancellingState, Mode=OneWay}"
                                                            ExternalIsAnimating="{x:Bind ViewModel.RemoveSelectedCancellableButton.IsAnimating, Mode=OneWay}"
                                                            ExternalButtonContent="{x:Bind ViewModel.RemoveSelectedCancellableButton.ButtonContent, Mode=OneWay}"
                                                            ExternalOriginalText="{x:Bind ViewModel.RemoveSelectedCancellableButton.OriginalText, Mode=OneWay}"
                                                            ExternalInternalIsCancelState="{x:Bind ViewModel.RemoveSelectedCancellableButton.InternalIsCancelState, Mode=OneWay}"
                                                            ExternalInternalIsCancellingState="{x:Bind ViewModel.RemoveSelectedCancellableButton.InternalIsCancellingState, Mode=OneWay}"
                                                            ExternalInternalIsAnimating="{x:Bind ViewModel.RemoveSelectedCancellableButton.InternalIsAnimating, Mode=OneWay}"
                                                            ExternalInternalIsOperationInProgress="{x:Bind ViewModel.RemoveSelectedCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
                                                            ExternalOperationStarted="{x:Bind ViewModel.RemoveSelectedCancellableButton.OperationStarted, Mode=OneWay}"
                                                            Click="{x:Bind ViewModel.RemoveSelectedCategories}"/>

                    </controls:WrapPanel>

                </Border>

            </Border>

            <ListView Grid.Row="1"
                      BorderThickness="1"
                      IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}"
                      x:Name="ProtectionCategoriesListView"
                      Margin="0,20,0,10"
                      CornerRadius="10"
                      Loaded="{x:Bind ViewModel.ProtectionCategoriesListView_Loaded}"
                      ItemsSource="{x:Bind ViewModel.ProtectionCategoriesListItemsSource, Mode=OneWay}"
                      BorderBrush="{StaticResource RoseGradientBrush}"
                      HorizontalAlignment="Center"
                      SelectionMode="Multiple"
                      SelectionChanged="{x:Bind ViewModel.ListView_SelectionChanged}"
                      ItemTemplate="{StaticResource ProtectionCategoryListViewTemplate}"/>
        </Grid>
    </Grid>
</Page>
