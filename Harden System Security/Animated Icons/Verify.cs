//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.2.250604.1+b02a3ee244
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile Verify.json
//       
//       Input file:
//           Verify.json (69874 bytes created 17:18+03:00 Jul 26 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    64 |
// |--------------------------+-------|
// | Expression animators     |     1 |
// | KeyFrame animators       |     9 |
// | Reference parameters     |     1 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     4 |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     1 |
// | CompositionSpriteShapes  |     5 |
// |--------------------------+-------|
// | Brushes                  |     2 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        verified-account
    // Frame rate:  24 fps
    // Frame count: 28
    // Duration:    1166.7 mS
    // _____________________________________________________________________________________________
    // |           Marker           |           Constant           | Frame |   mS   |   Progress   |
    // |____________________________|______________________________|_______|________|______________|
    // | NormalToPressed_Start      | M_NormalToPressed_Start      |     0 |    0.0 | 0F           |
    // | NormalToPressed_End        | M_NormalToPressed_End        |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_Start | M_PointerOverToPressed_Start |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    19 |  791.7 | 0.680357158F |
    // | PressedToNormal_Start      | M_PressedToNormal_Start      |    20 |  833.3 | 0.716071427F |
    // | PressedToNormal_End        | M_PressedToNormal_End        |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    28 | 1166.7 | 1F           |
    // ---------------------------------------------------------------------------------------------
    sealed partial class Verify
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 1.167 seconds.
        internal const long c_durationTicks = 11666666;

        // Marker: NormalToPressed_Start.
        internal const float M_NormalToPressed_Start = 0F;

        // Marker: NormalToPressed_End.
        internal const float M_NormalToPressed_End = 0.323214293F;

        // Marker: PointerOverToPressed_Start.
        internal const float M_PointerOverToPressed_Start = 0.323214293F;

        // Marker: PointerOverToPressed_End.
        internal const float M_PointerOverToPressed_End = 0.680357158F;

        // Marker: PressedToNormal_Start.
        internal const float M_PressedToNormal_Start = 0.716071427F;

        // Marker: PressedToNormal_End.
        internal const float M_PressedToNormal_End = 1F;

        // Marker: PressedToPointerOver_Start.
        internal const float M_PressedToPointerOver_Start = 1F;

        // Marker: PressedToPointerOver_End.
        internal const float M_PressedToPointerOver_End = 1F;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            var res = 
                new Verify_AnimatedVisual(
                    compositor
                    );
                res.CreateAnimations();
                return res;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 28d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 24d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(11666666);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 28d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPressed_Start", 0d },
                { "NormalToPressed_End", 0.323214285714286 },
                { "PointerOverToPressed_Start", 0.323214285714286 },
                { "PointerOverToPressed_End", 0.680357142857143 },
                { "PressedToNormal_Start", 0.716071428571429 },
                { "PressedToNormal_End", 1d },
                { "PressedToPointerOver_Start", 1d },
                { "PressedToPointerOver_End", 1d },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class Verify_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 11666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            CompositionColorBrush _colorBrush_White;
            CompositionContainerShape _containerShape;
            CompositionPath _path_0;
            CompositionPath _path_1;
            CompositionPath _path_2;
            CompositionPath _path_3;
            CompositionPathGeometry _pathGeometry_1;
            CompositionPathGeometry _pathGeometry_2;
            CompositionPathGeometry _pathGeometry_3;
            CompositionPathGeometry _pathGeometry_4;
            CompositionSpriteShape _spriteShape_1;
            CompositionSpriteShape _spriteShape_2;
            CompositionSpriteShape _spriteShape_3;
            CompositionSpriteShape _spriteShape_4;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 3 Offset:<24, 24>
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(20F, 0F));
                    builder.AddCubicBezier(new Vector2(20F, -2.90899992F), new Vector2(18.3470001F, -5.44799995F), new Vector2(15.934F, -6.73000002F));
                    builder.AddCubicBezier(new Vector2(16.5930004F, -9.24100018F), new Vector2(15.9510002F, -12.033F), new Vector2(13.9910002F, -13.9919996F));
                    builder.AddCubicBezier(new Vector2(12.5279999F, -15.4560003F), new Vector2(10.6000004F, -16.184F), new Vector2(8.67000008F, -16.184F));
                    builder.AddCubicBezier(new Vector2(8.0170002F, -16.184F), new Vector2(7.36399984F, -16.1009998F), new Vector2(6.72900009F, -15.934F));
                    builder.AddCubicBezier(new Vector2(5.44799995F, -18.3470001F), new Vector2(2.90899992F, -20F), new Vector2(0F, -20F));
                    builder.AddCubicBezier(new Vector2(-2.90899992F, -20F), new Vector2(-5.44799995F, -18.3470001F), new Vector2(-6.73000002F, -15.934F));
                    builder.AddCubicBezier(new Vector2(-7.36600018F, -16.1009998F), new Vector2(-8.01799965F, -16.184F), new Vector2(-8.67099953F, -16.184F));
                    builder.AddCubicBezier(new Vector2(-10.6009998F, -16.184F), new Vector2(-12.5279999F, -15.4549999F), new Vector2(-13.9919996F, -13.9919996F));
                    builder.AddCubicBezier(new Vector2(-15.9510002F, -12.033F), new Vector2(-16.5939999F, -9.24199963F), new Vector2(-15.9350004F, -6.73000002F));
                    builder.AddCubicBezier(new Vector2(-18.3470001F, -5.44799995F), new Vector2(-20F, -2.90899992F), new Vector2(-20F, 0F));
                    builder.AddCubicBezier(new Vector2(-20F, 2.90899992F), new Vector2(-18.3470001F, 5.44799995F), new Vector2(-15.934F, 6.73000002F));
                    builder.AddCubicBezier(new Vector2(-16.5930004F, 9.24100018F), new Vector2(-15.9510002F, 12.033F), new Vector2(-13.9910002F, 13.9919996F));
                    builder.AddCubicBezier(new Vector2(-12.5279999F, 15.4549999F), new Vector2(-10.6000004F, 16.184F), new Vector2(-8.67000008F, 16.184F));
                    builder.AddCubicBezier(new Vector2(-8.0170002F, 16.184F), new Vector2(-7.36399984F, 16.1009998F), new Vector2(-6.72900009F, 15.934F));
                    builder.AddCubicBezier(new Vector2(-5.44799995F, 18.3470001F), new Vector2(-2.90899992F, 20F), new Vector2(0F, 20F));
                    builder.AddCubicBezier(new Vector2(2.90899992F, 20F), new Vector2(5.44799995F, 18.3470001F), new Vector2(6.73000002F, 15.934F));
                    builder.AddCubicBezier(new Vector2(7.36600018F, 16.1009998F), new Vector2(8.01799965F, 16.184F), new Vector2(8.67099953F, 16.184F));
                    builder.AddCubicBezier(new Vector2(10.6009998F, 16.184F), new Vector2(12.5279999F, 15.4549999F), new Vector2(13.9919996F, 13.9919996F));
                    builder.AddCubicBezier(new Vector2(15.9510002F, 12.033F), new Vector2(16.5939999F, 9.24199963F), new Vector2(15.9350004F, 6.73000002F));
                    builder.AddCubicBezier(new Vector2(18.3470001F, 5.44799995F), new Vector2(20F, 2.90899992F), new Vector2(20F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(2.29200006F, 5.12200022F));
                    builder.AddCubicBezier(new Vector2(2.29200006F, 5.12200022F), new Vector2(-5.12200022F, -2.29399991F), new Vector2(-5.12200022F, -2.29399991F));
                    builder.AddCubicBezier(new Vector2(-5.12200022F, -2.29399991F), new Vector2(-2.29399991F, -5.12200022F), new Vector2(-2.29399991F, -5.12200022F));
                    builder.AddCubicBezier(new Vector2(-2.29399991F, -5.12200022F), new Vector2(5.12200022F, 2.29200006F), new Vector2(5.12200022F, 2.29200006F));
                    builder.AddCubicBezier(new Vector2(5.12200022F, 2.29200006F), new Vector2(2.29200006F, 5.12200022F), new Vector2(2.29200006F, 5.12200022F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: left tick part
            // - Path
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(2.29200006F, 5.12200022F));
                    builder.AddCubicBezier(new Vector2(2.29200006F, 5.12200022F), new Vector2(2.29299998F, 5.12099981F), new Vector2(2.29299998F, 5.12099981F));
                    builder.AddCubicBezier(new Vector2(2.29299998F, 5.12099981F), new Vector2(5.12099981F, 2.29299998F), new Vector2(5.12099981F, 2.29299998F));
                    builder.AddCubicBezier(new Vector2(5.12099981F, 2.29299998F), new Vector2(5.12200022F, 2.29200006F), new Vector2(5.12200022F, 2.29200006F));
                    builder.AddCubicBezier(new Vector2(5.12200022F, 2.29200006F), new Vector2(2.29200006F, 5.12200022F), new Vector2(2.29200006F, 5.12200022F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-4.79199982F, 7.62200022F));
                    builder.AddCubicBezier(new Vector2(-4.79199982F, 7.62200022F), new Vector2(-7.62200022F, 4.79199982F), new Vector2(-7.62200022F, 4.79199982F));
                    builder.AddCubicBezier(new Vector2(-7.62200022F, 4.79199982F), new Vector2(4.79400015F, -7.62200022F), new Vector2(4.79400015F, -7.62200022F));
                    builder.AddCubicBezier(new Vector2(4.79400015F, -7.62200022F), new Vector2(7.62200022F, -4.79400015F), new Vector2(7.62200022F, -4.79400015F));
                    builder.AddCubicBezier(new Vector2(7.62200022F, -4.79400015F), new Vector2(-4.79199982F, 7.62200022F), new Vector2(-4.79199982F, 7.62200022F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: right tick part
            // - Path
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(7.625F, -4.796F));
                    builder.AddCubicBezier(new Vector2(7.625F, -4.796F), new Vector2(4.796F, -7.625F), new Vector2(4.796F, -7.625F));
                    builder.AddCubicBezier(new Vector2(4.796F, -7.625F), new Vector2(4.79400015F, -7.62200022F), new Vector2(4.79400015F, -7.62200022F));
                    builder.AddCubicBezier(new Vector2(4.79400015F, -7.62200022F), new Vector2(7.62200022F, -4.79400015F), new Vector2(7.62200022F, -4.79400015F));
                    builder.AddCubicBezier(new Vector2(7.62200022F, -4.79400015F), new Vector2(7.625F, -4.796F), new Vector2(7.625F, -4.796F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.93400002F, -3.10500002F));
                    builder.AddCubicBezier(new Vector2(-5.93400002F, -3.10500002F), new Vector2(-5.93400002F, -3.10599995F), new Vector2(-5.93400002F, -3.10599995F));
                    builder.AddCubicBezier(new Vector2(-5.93400002F, -3.10599995F), new Vector2(-3.10599995F, -5.93400002F), new Vector2(-3.10599995F, -5.93400002F));
                    builder.AddCubicBezier(new Vector2(-3.10599995F, -5.93400002F), new Vector2(-3.10500002F, -5.93400002F), new Vector2(-3.10500002F, -5.93400002F));
                    builder.AddCubicBezier(new Vector2(-3.10500002F, -5.93400002F), new Vector2(-5.93400002F, -3.10500002F), new Vector2(-5.93400002F, -3.10500002F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_6()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-4.79199982F, 7.62200022F));
                    builder.AddCubicBezier(new Vector2(-4.79199982F, 7.62200022F), new Vector2(-7.62200022F, 4.79199982F), new Vector2(-7.62200022F, 4.79199982F));
                    builder.AddCubicBezier(new Vector2(-7.62200022F, 4.79199982F), new Vector2(-7.62099981F, 4.79300022F), new Vector2(-7.62099981F, 4.79300022F));
                    builder.AddCubicBezier(new Vector2(-7.62099981F, 4.79300022F), new Vector2(-4.79300022F, 7.62099981F), new Vector2(-4.79300022F, 7.62099981F));
                    builder.AddCubicBezier(new Vector2(-4.79300022F, 7.62099981F), new Vector2(-4.79199982F, 7.62200022F), new Vector2(-4.79199982F, 7.62200022F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Group 3 Offset:<24, 24>
            CompositionColorBrush ColorBrush_AlmostMediumSeaGreen_FF4BAE50()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x4B, 0xAE, 0x50));
            }

            CompositionColorBrush ColorBrush_White()
            {
                return (_colorBrush_White == null)
                    ? _colorBrush_White = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF))
                    : _colorBrush_White;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape()
            {
                if (_containerShape != null) { return _containerShape; }
                var result = _containerShape = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(24F, 24F);
                // ShapeGroup: Group 3 Offset:<24, 24>
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            CompositionPath Path_0()
            {
                if (_path_0 != null) { return _path_0; }
                var result = _path_0 = new CompositionPath(Geometry_1());
                return result;
            }

            CompositionPath Path_1()
            {
                if (_path_1 != null) { return _path_1; }
                var result = _path_1 = new CompositionPath(Geometry_3());
                return result;
            }

            CompositionPath Path_2()
            {
                if (_path_2 != null) { return _path_2; }
                var result = _path_2 = new CompositionPath(Geometry_5());
                return result;
            }

            CompositionPath Path_3()
            {
                if (_path_3 != null) { return _path_3; }
                var result = _path_3 = new CompositionPath(Geometry_6());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Group 3 Offset:<24, 24>
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - Layer aggregator
            // Layer: left tick part
            CompositionPathGeometry PathGeometry_1()
            {
                if (_pathGeometry_1 != null) { return _pathGeometry_1; }
                var result = _pathGeometry_1 = _c.CreatePathGeometry();
                return result;
            }

            // - Layer aggregator
            // Layer: right tick part
            CompositionPathGeometry PathGeometry_2()
            {
                if (_pathGeometry_2 != null) { return _pathGeometry_2; }
                var result = _pathGeometry_2 = _c.CreatePathGeometry();
                return result;
            }

            // - Layer aggregator
            // Layer: left tick part 2
            CompositionPathGeometry PathGeometry_3()
            {
                if (_pathGeometry_3 != null) { return _pathGeometry_3; }
                var result = _pathGeometry_3 = _c.CreatePathGeometry();
                return result;
            }

            // - Layer aggregator
            // Layer: right tick part 2
            CompositionPathGeometry PathGeometry_4()
            {
                if (_pathGeometry_4 != null) { return _pathGeometry_4; }
                var result = _pathGeometry_4 = _c.CreatePathGeometry();
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<24, 24>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 24F), ColorBrush_AlmostMediumSeaGreen_FF4BAE50());;
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<19.707, 27.708>
                var geometry = PathGeometry_1();
                if (_spriteShape_1 != null) { return _spriteShape_1; }
                var result = _spriteShape_1 = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 19.7070007F, 27.7080002F), ColorBrush_White());;
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<26.792, 25.208>
                var geometry = PathGeometry_2();
                if (_spriteShape_2 != null) { return _spriteShape_2; }
                var result = _spriteShape_2 = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 26.7919998F, 25.2080002F), ColorBrush_White());;
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<19.707, 27.708>
                var geometry = PathGeometry_3();
                if (_spriteShape_3 != null) { return _spriteShape_3; }
                var result = _spriteShape_3 = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 19.7070007F, 27.7080002F), ColorBrush_White());;
                result.Scale = new Vector2(0F, 0F);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<26.792, 25.208>
                var geometry = PathGeometry_4();
                if (_spriteShape_4 != null) { return _spriteShape_4; }
                var result = _spriteShape_4 = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 26.7919998F, 25.2080002F), ColorBrush_White());;
                result.Scale = new Vector2(0F, 0F);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_1;
            }

            // - - Layer aggregator
            // - Layer: left tick part
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.107142858F, Path_0(), HoldThenStepEasingFunction());
                // Frame 7.
                result.InsertKeyFrame(0.25F, new CompositionPath(Geometry_2()), CubicBezierEasingFunction_1());
                return result;
            }

            // - - Layer aggregator
            // - Layer: right tick part
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_1(), StepThenHoldEasingFunction());
                // Frame 7.
                result.InsertKeyFrame(0.25F, Path_1(), HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.392857134F, new CompositionPath(Geometry_4()), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.666999996F, 1F)));
                return result;
            }

            // - - Layer aggregator
            // - Layer: left tick part 2
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_2()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_2(), StepThenHoldEasingFunction());
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, Path_2(), HoldThenStepEasingFunction());
                // Frame 21.
                result.InsertKeyFrame(0.75F, Path_0(), CubicBezierEasingFunction_1());
                return result;
            }

            // - - Layer aggregator
            // - Layer: right tick part 2
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_3()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_3(), StepThenHoldEasingFunction());
                // Frame 21.
                result.InsertKeyFrame(0.75F, Path_3(), HoldThenStepEasingFunction());
                // Frame 25.
                result.InsertKeyFrame(0.892857134F, Path_1(), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                return result;
            }

            // - Layer aggregator
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_90()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.107142858F, 0F, HoldThenStepEasingFunction());
                // Frame 5.
                result.InsertKeyFrame(0.178571433F, -2F, CubicBezierEasingFunction_0());
                // Frame 23.
                result.InsertKeyFrame(0.821428597F, 92F, CubicBezierEasingFunction_0());
                // Frame 25.
                result.InsertKeyFrame(0.892857134F, 90F, CubicBezierEasingFunction_0());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape());
                // Layer: left tick part
                shapes.Add(SpriteShape_1());
                // Layer: right tick part
                shapes.Add(SpriteShape_2());
                // Layer: left tick part 2
                shapes.Add(SpriteShape_3());
                // Layer: right tick part 2
                shapes.Add(SpriteShape_4());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Layer aggregator
            // Layer: left tick part
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 7.
                result.InsertKeyFrame(0.25F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                return result;
            }

            // - Layer aggregator
            // Layer: right tick part
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.392857134F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                return result;
            }

            // - Layer aggregator
            // Layer: left tick part 2
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                return result;
            }

            // - Layer aggregator
            // Layer: right tick part 2
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_3()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 21.
                result.InsertKeyFrame(0.75F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                return result;
            }

            internal Verify_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(48F, 48F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_90(), AnimationController_0());
                _pathGeometry_1.StartAnimation("Path", PathKeyFrameAnimation_0(), AnimationController_0());
                _pathGeometry_2.StartAnimation("Path", PathKeyFrameAnimation_1(), AnimationController_0());
                _pathGeometry_3.StartAnimation("Path", PathKeyFrameAnimation_2(), AnimationController_0());
                _pathGeometry_4.StartAnimation("Path", PathKeyFrameAnimation_3(), AnimationController_0());
                _spriteShape_1.StartAnimation("Scale", ShapeVisibilityAnimation_0(), AnimationController_0());
                _spriteShape_2.StartAnimation("Scale", ShapeVisibilityAnimation_1(), AnimationController_0());
                _spriteShape_3.StartAnimation("Scale", ShapeVisibilityAnimation_2(), AnimationController_0());
                _spriteShape_4.StartAnimation("Scale", ShapeVisibilityAnimation_3(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _containerShape.StopAnimation("RotationAngleInDegrees");
                _pathGeometry_1.StopAnimation("Path");
                _pathGeometry_2.StopAnimation("Path");
                _pathGeometry_3.StopAnimation("Path");
                _pathGeometry_4.StopAnimation("Path");
                _spriteShape_1.StopAnimation("Scale");
                _spriteShape_2.StopAnimation("Scale");
                _spriteShape_3.StopAnimation("Scale");
                _spriteShape_4.StopAnimation("Scale");
            }

        }
    }
}
