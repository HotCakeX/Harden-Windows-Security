//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.1.240821.1+077322fa26
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile Shield.json
//       
//       Input file:
//           Shield.json (121003 bytes created 12:26+02:00 Nov 17 2024)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   154 |
// |--------------------------+-------|
// | Expression animators     |     1 |
// | KeyFrame animators       |    30 |
// | Reference parameters     |     1 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     4 |
// |--------------------------+-------|
// | ContainerVisuals         |     5 |
// | ShapeVisuals             |     6 |
// |--------------------------+-------|
// | ContainerShapes          |    13 |
// | CompositionSpriteShapes  |     9 |
// |--------------------------+-------|
// | Brushes                  |    10 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     4 |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas;
using Microsoft.Graphics.Canvas.Effects;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        security-checked
    // Frame rate:  24 fps
    // Frame count: 28
    // Duration:    1166.7 mS
    // _____________________________________________________________________________________________
    // |           Marker           |           Constant           | Frame |   mS   |   Progress   |
    // |____________________________|______________________________|_______|________|______________|
    // | NormalToPressed_Start      | M_NormalToPressed_Start      |     0 |    0.0 | 0F           |
    // | NormalToPressed_End        | M_NormalToPressed_End        |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_Start | M_PointerOverToPressed_Start |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    19 |  791.7 | 0.680357158F |
    // | PressedToNormal_Start      | M_PressedToNormal_Start      |    20 |  833.3 | 0.716071427F |
    // | PressedToNormal_End        | M_PressedToNormal_End        |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    28 | 1166.7 | 1F           |
    // ---------------------------------------------------------------------------------------------
    sealed partial class Shield
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 1.167 seconds.
        internal const long c_durationTicks = 11666666;

        // Marker: NormalToPressed_Start.
        internal const float M_NormalToPressed_Start = 0F;

        // Marker: NormalToPressed_End.
        internal const float M_NormalToPressed_End = 0.323214293F;

        // Marker: PointerOverToPressed_Start.
        internal const float M_PointerOverToPressed_Start = 0.323214293F;

        // Marker: PointerOverToPressed_End.
        internal const float M_PointerOverToPressed_End = 0.680357158F;

        // Marker: PressedToNormal_Start.
        internal const float M_PressedToNormal_Start = 0.716071427F;

        // Marker: PressedToNormal_End.
        internal const float M_PressedToNormal_End = 1F;

        // Marker: PressedToPointerOver_Start.
        internal const float M_PressedToPointerOver_Start = 1F;

        // Marker: PressedToPointerOver_End.
        internal const float M_PressedToPointerOver_End = 1F;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            var res =
                new Shield_AnimatedVisual(
                    compositor
                    );
            res.CreateAnimations();
            return res;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 28d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 24d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(11666666);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 28d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPressed_Start", 0d },
                { "NormalToPressed_End", 0.323214285714286 },
                { "PointerOverToPressed_Start", 0.323214285714286 },
                { "PointerOverToPressed_End", 0.680357142857143 },
                { "PressedToNormal_Start", 0.716071428571429 },
                { "PressedToNormal_End", 1d },
                { "PressedToPointerOver_Start", 1d },
                { "PressedToPointerOver_End", 1d },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class Shield_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 11666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            BooleanKeyFrameAnimation _isVisibleBooleanAnimation_0;
            BooleanKeyFrameAnimation _isVisibleBooleanAnimation_1;
            CompositionColorBrush _colorBrush_AlmostBlueViolet_FF6C19FF;
            CompositionColorBrush _colorBrush_AlmostMediumBlue_FF2100C4;
            CompositionColorBrush _colorBrush_AlmostMediumTurquoise_FF3CDAB4;
            CompositionContainerShape _containerShape_00;
            CompositionContainerShape _containerShape_01;
            CompositionContainerShape _containerShape_02;
            CompositionContainerShape _containerShape_03;
            CompositionContainerShape _containerShape_04;
            CompositionContainerShape _containerShape_05;
            CompositionContainerShape _containerShape_06;
            CompositionContainerShape _containerShape_07;
            CompositionContainerShape _containerShape_08;
            CompositionContainerShape _containerShape_09;
            CompositionContainerShape _containerShape_10;
            CompositionContainerShape _containerShape_11;
            CompositionContainerShape _containerShape_12;
            CompositionEffectFactory _effectFactory;
            CompositionPath _path_0;
            CompositionPath _path_1;
            CompositionPath _path_2;
            CompositionPath _path_3;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            CompositionPathGeometry _pathGeometry_2;
            CompositionPathGeometry _pathGeometry_3;
            CompositionPathGeometry _pathGeometry_4;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ScalarKeyFrameAnimation _rotationAngleInDegreesScalarAnimation_0_to_0;
            ShapeVisual _shapeVisual_1;
            ShapeVisual _shapeVisual_2;
            ShapeVisual _shapeVisual_4;
            ShapeVisual _shapeVisual_5;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _scaleVector2Animation;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
            {
                var result = _c.CreateBooleanKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue);
                return result;
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
            {
                // Frame 0.
                if (_isVisibleBooleanAnimation_0 != null) { return _isVisibleBooleanAnimation_0; }
                var result = _isVisibleBooleanAnimation_0 = CreateBooleanKeyFrameAnimation(0F, true);
                // Frame 11.
                result.InsertKeyFrame(0.392857134F, false);
                return result;
            }

            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
            {
                // Frame 0.
                if (_isVisibleBooleanAnimation_1 != null) { return _isVisibleBooleanAnimation_1; }
                var result = _isVisibleBooleanAnimation_1 = CreateBooleanKeyFrameAnimation(0F, false);
                // Frame 21.
                result.InsertKeyFrame(0.75F, true);
                return result;
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, -20F));
                    builder.AddLine(new Vector2(-18F, -12F));
                    builder.AddLine(new Vector2(-18F, -4.97399998F));
                    builder.AddCubicBezier(new Vector2(-18F, 6.35699987F), new Vector2(-10.7489996F, 16.4169998F), new Vector2(0F, 20F));
                    builder.AddCubicBezier(new Vector2(10.7489996F, 16.4169998F), new Vector2(18F, 6.35699987F), new Vector2(18F, -4.97399998F));
                    builder.AddLine(new Vector2(18F, -12F));
                    builder.AddLine(new Vector2(0F, -20F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(11.6709995F, -9.04199982F));
                    builder.AddCubicBezier(new Vector2(11.6709995F, -9.04199982F), new Vector2(8.51399994F, -12.0719995F), new Vector2(8.51399994F, -12.0719995F));
                    builder.AddCubicBezier(new Vector2(8.51399994F, -12.0719995F), new Vector2(-11.6709995F, 9.04199982F), new Vector2(-11.6709995F, 9.04199982F));
                    builder.AddCubicBezier(new Vector2(-11.6709995F, 9.04199982F), new Vector2(-8.51399994F, 12.0719995F), new Vector2(-8.51399994F, 12.0719995F));
                    builder.AddCubicBezier(new Vector2(-8.51399994F, 12.0719995F), new Vector2(11.6709995F, -9.04199982F), new Vector2(11.6709995F, -9.04199982F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - Path
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(11.6709995F, -9.04199982F));
                    builder.AddCubicBezier(new Vector2(11.6709995F, -9.04199982F), new Vector2(8.51399994F, -12.0719995F), new Vector2(8.51399994F, -12.0719995F));
                    builder.AddCubicBezier(new Vector2(8.51399994F, -12.0719995F), new Vector2(8.5170002F, -12.0670004F), new Vector2(8.5170002F, -12.0670004F));
                    builder.AddCubicBezier(new Vector2(8.5170002F, -12.0670004F), new Vector2(11.6739998F, -9.03800011F), new Vector2(11.6739998F, -9.03800011F));
                    builder.AddCubicBezier(new Vector2(11.6739998F, -9.03800011F), new Vector2(11.6709995F, -9.04199982F), new Vector2(11.6709995F, -9.04199982F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(6.22599983F, 2.94199991F));
                    builder.AddCubicBezier(new Vector2(6.22599983F, 2.94199991F), new Vector2(-3.19700003F, -6.09800005F), new Vector2(-3.19700003F, -6.09800005F));
                    builder.AddCubicBezier(new Vector2(-3.19700003F, -6.09800005F), new Vector2(-6.22599983F, -2.94099998F), new Vector2(-6.22599983F, -2.94099998F));
                    builder.AddCubicBezier(new Vector2(-6.22599983F, -2.94099998F), new Vector2(3.19700003F, 6.09800005F), new Vector2(3.19700003F, 6.09800005F));
                    builder.AddCubicBezier(new Vector2(3.19700003F, 6.09800005F), new Vector2(3.21300006F, 6.08199978F), new Vector2(3.21300006F, 6.08199978F));
                    builder.AddCubicBezier(new Vector2(3.21300006F, 6.08199978F), new Vector2(3.21300006F, 6.09299994F), new Vector2(3.21300006F, 6.09299994F));
                    builder.AddCubicBezier(new Vector2(3.21300006F, 6.09299994F), new Vector2(6.22599983F, 2.94199991F), new Vector2(6.22599983F, 2.94199991F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - Layer aggregator
            // - - - - - Layer: line 1
            // - - - Transforms: line 1
            // - Path
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(6.22599983F, 2.94199991F));
                    builder.AddCubicBezier(new Vector2(6.22599983F, 2.94199991F), new Vector2(3.07299995F, -0.0879999995F), new Vector2(3.07299995F, -0.0879999995F));
                    builder.AddCubicBezier(new Vector2(3.07299995F, -0.0879999995F), new Vector2(0.0469999984F, 3.0710001F), new Vector2(0.0469999984F, 3.0710001F));
                    builder.AddCubicBezier(new Vector2(0.0469999984F, 3.0710001F), new Vector2(3.19700003F, 6.09800005F), new Vector2(3.19700003F, 6.09800005F));
                    builder.AddCubicBezier(new Vector2(3.19700003F, 6.09800005F), new Vector2(3.21300006F, 6.08199978F), new Vector2(3.21300006F, 6.08199978F));
                    builder.AddCubicBezier(new Vector2(3.21300006F, 6.08199978F), new Vector2(3.21300006F, 6.09299994F), new Vector2(3.21300006F, 6.09299994F));
                    builder.AddCubicBezier(new Vector2(3.21300006F, 6.09299994F), new Vector2(6.22599983F, 2.94199991F), new Vector2(6.22599983F, 2.94199991F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.7670002F, 9.33300018F));
                    builder.AddCubicBezier(new Vector2(-5.7670002F, 9.33300018F), new Vector2(-8.92300034F, 6.30299997F), new Vector2(-8.92300034F, 6.30299997F));
                    builder.AddCubicBezier(new Vector2(-8.92300034F, 6.30299997F), new Vector2(-11.6709995F, 9.04199982F), new Vector2(-11.6709995F, 9.04199982F));
                    builder.AddCubicBezier(new Vector2(-11.6709995F, 9.04199982F), new Vector2(-8.51399994F, 12.0719995F), new Vector2(-8.51399994F, 12.0719995F));
                    builder.AddCubicBezier(new Vector2(-8.51399994F, 12.0719995F), new Vector2(-5.7670002F, 9.33300018F), new Vector2(-5.7670002F, 9.33300018F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - Path
            CanvasGeometry Geometry_6()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(12.2959995F, -9.79199982F));
                    builder.AddCubicBezier(new Vector2(12.2959995F, -9.79199982F), new Vector2(9.13899994F, -12.8219995F), new Vector2(9.13899994F, -12.8219995F));
                    builder.AddCubicBezier(new Vector2(9.13899994F, -12.8219995F), new Vector2(-11.6709995F, 9.04199982F), new Vector2(-11.6709995F, 9.04199982F));
                    builder.AddCubicBezier(new Vector2(-11.6709995F, 9.04199982F), new Vector2(-8.51399994F, 12.0719995F), new Vector2(-8.51399994F, 12.0719995F));
                    builder.AddCubicBezier(new Vector2(-8.51399994F, 12.0719995F), new Vector2(12.2959995F, -9.79199982F), new Vector2(12.2959995F, -9.79199982F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_7()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-3.227F, -6.06599998F));
                    builder.AddCubicBezier(new Vector2(-3.227F, -6.06599998F), new Vector2(-3.19700003F, -6.09800005F), new Vector2(-3.19700003F, -6.09800005F));
                    builder.AddCubicBezier(new Vector2(-3.19700003F, -6.09800005F), new Vector2(-6.22599983F, -2.94099998F), new Vector2(-6.22599983F, -2.94099998F));
                    builder.AddCubicBezier(new Vector2(-6.22599983F, -2.94099998F), new Vector2(-6.25600004F, -2.91000009F), new Vector2(-6.25600004F, -2.91000009F));
                    builder.AddCubicBezier(new Vector2(-6.25600004F, -2.91000009F), new Vector2(-6.23999977F, -2.92600012F), new Vector2(-6.23999977F, -2.92600012F));
                    builder.AddCubicBezier(new Vector2(-6.23999977F, -2.92600012F), new Vector2(-6.23999977F, -2.91499996F), new Vector2(-6.23999977F, -2.91499996F));
                    builder.AddCubicBezier(new Vector2(-6.23999977F, -2.91499996F), new Vector2(-3.227F, -6.06599998F), new Vector2(-3.227F, -6.06599998F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostBlueViolet_FF6C19FF()
            {
                return (_colorBrush_AlmostBlueViolet_FF6C19FF == null)
                    ? _colorBrush_AlmostBlueViolet_FF6C19FF = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x6C, 0x19, 0xFF))
                    : _colorBrush_AlmostBlueViolet_FF6C19FF;
            }

            // - - Shape tree root for layer: line overlay 1
            // Transforms: line overlay 1
            CompositionColorBrush ColorBrush_AlmostMediumBlue_FF2000C4()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x20, 0x00, 0xC4));
            }

            CompositionColorBrush ColorBrush_AlmostMediumBlue_FF2100C4()
            {
                return (_colorBrush_AlmostMediumBlue_FF2100C4 == null)
                    ? _colorBrush_AlmostMediumBlue_FF2100C4 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x21, 0x00, 0xC4))
                    : _colorBrush_AlmostMediumBlue_FF2100C4;
            }

            CompositionColorBrush ColorBrush_AlmostMediumTurquoise_FF3CDAB4()
            {
                return (_colorBrush_AlmostMediumTurquoise_FF3CDAB4 == null)
                    ? _colorBrush_AlmostMediumTurquoise_FF3CDAB4 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x3C, 0xDA, 0xB4))
                    : _colorBrush_AlmostMediumTurquoise_FF3CDAB4;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_00()
            {
                if (_containerShape_00 != null) { return _containerShape_00; }
                var result = _containerShape_00 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(24F, 24F);
                // ShapeGroup: Group 2 Offset:<24, 24>
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // Layer aggregator
            // Layer: line 2
            CompositionContainerShape ContainerShape_01()
            {
                if (_containerShape_01 != null) { return _containerShape_01; }
                var result = _containerShape_01 = _c.CreateContainerShape();
                result.Shapes.Add(ContainerShape_02());
                return result;
            }

            // - Layer aggregator
            // Layer: line 2
            CompositionContainerShape ContainerShape_02()
            {
                if (_containerShape_02 != null) { return _containerShape_02; }
                var result = _containerShape_02 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(24F, 24F);
                // Transforms: line 2
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // Layer aggregator
            // Layer: line 1
            CompositionContainerShape ContainerShape_03()
            {
                if (_containerShape_03 != null) { return _containerShape_03; }
                var result = _containerShape_03 = _c.CreateContainerShape();
                result.Shapes.Add(ContainerShape_04());
                return result;
            }

            // - Layer aggregator
            // Layer: line 1
            CompositionContainerShape ContainerShape_04()
            {
                if (_containerShape_04 != null) { return _containerShape_04; }
                var result = _containerShape_04 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(24F, 24F);
                // Transforms: line 1
                result.Shapes.Add(SpriteShape_2());
                return result;
            }

            // Shape tree root for layer: line overlay 1
            CompositionContainerShape ContainerShape_05()
            {
                if (_containerShape_05 != null) { return _containerShape_05; }
                var result = _containerShape_05 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(24F, 24F);
                // Transforms: line overlay 1
                result.Shapes.Add(SpriteShape_3());
                return result;
            }

            // Shape tree root for layer: mask 1
            CompositionContainerShape ContainerShape_06()
            {
                if (_containerShape_06 != null) { return _containerShape_06; }
                var result = _containerShape_06 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(24F, 24F);
                // Transforms: mask 1
                result.Shapes.Add(SpriteShape_4());
                return result;
            }

            // Layer aggregator
            // Layer: line 4
            CompositionContainerShape ContainerShape_07()
            {
                if (_containerShape_07 != null) { return _containerShape_07; }
                var result = _containerShape_07 = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                result.Shapes.Add(ContainerShape_08());
                return result;
            }

            // - Layer aggregator
            // Layer: line 4
            CompositionContainerShape ContainerShape_08()
            {
                if (_containerShape_08 != null) { return _containerShape_08; }
                var result = _containerShape_08 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(24F, 24F);
                // Transforms: line 4
                result.Shapes.Add(SpriteShape_5());
                return result;
            }

            // Layer aggregator
            // Layer: line 3
            CompositionContainerShape ContainerShape_09()
            {
                if (_containerShape_09 != null) { return _containerShape_09; }
                var result = _containerShape_09 = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                result.Shapes.Add(ContainerShape_10());
                return result;
            }

            // - Layer aggregator
            // Layer: line 3
            CompositionContainerShape ContainerShape_10()
            {
                if (_containerShape_10 != null) { return _containerShape_10; }
                var result = _containerShape_10 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(24F, 24F);
                // Transforms: line 3
                result.Shapes.Add(SpriteShape_6());
                return result;
            }

            // Shape tree root for layer: line overlay 2
            CompositionContainerShape ContainerShape_11()
            {
                if (_containerShape_11 != null) { return _containerShape_11; }
                var result = _containerShape_11 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(24F, 24F);
                // Transforms: line overlay 2
                result.Shapes.Add(SpriteShape_7());
                return result;
            }

            // Shape tree root for layer: mask 2
            CompositionContainerShape ContainerShape_12()
            {
                if (_containerShape_12 != null) { return _containerShape_12; }
                var result = _containerShape_12 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(24F, 24F);
                // Transforms: mask 2
                result.Shapes.Add(SpriteShape_8());
                return result;
            }

            CompositionEffectBrush EffectBrush_0()
            {
                var effectFactory = EffectFactory();
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            CompositionEffectBrush EffectBrush_1()
            {
                var effectFactory = EffectFactory();
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_2());
                result.SetSourceParameter("source", SurfaceBrush_3());
                return result;
            }

            CompositionEffectFactory EffectFactory()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationIn;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                if (_effectFactory != null) { return _effectFactory; }
                var result = _effectFactory = _c.CreateEffectFactory(compositeEffect);
                return result;
            }

            CompositionPath Path_0()
            {
                if (_path_0 != null) { return _path_0; }
                var result = _path_0 = new CompositionPath(Geometry_1());
                return result;
            }

            CompositionPath Path_1()
            {
                if (_path_1 != null) { return _path_1; }
                var result = _path_1 = new CompositionPath(Geometry_3());
                return result;
            }

            CompositionPath Path_2()
            {
                if (_path_2 != null) { return _path_2; }
                var result = _path_2 = new CompositionPath(Geometry_5());
                return result;
            }

            CompositionPath Path_3()
            {
                if (_path_3 != null) { return _path_3; }
                var result = _path_3 = new CompositionPath(Geometry_7());
                return result;
            }

            CompositionPathGeometry PathGeometry_0()
            {
                return (_pathGeometry_0 == null)
                    ? _pathGeometry_0 = _c.CreatePathGeometry(new CompositionPath(Geometry_0()))
                    : _pathGeometry_0;
            }

            CompositionPathGeometry PathGeometry_1()
            {
                if (_pathGeometry_1 != null) { return _pathGeometry_1; }
                var result = _pathGeometry_1 = _c.CreatePathGeometry();
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: line 1
            // Transforms: line 1
            CompositionPathGeometry PathGeometry_2()
            {
                if (_pathGeometry_2 != null) { return _pathGeometry_2; }
                var result = _pathGeometry_2 = _c.CreatePathGeometry();
                return result;
            }

            CompositionPathGeometry PathGeometry_3()
            {
                if (_pathGeometry_3 != null) { return _pathGeometry_3; }
                var result = _pathGeometry_3 = _c.CreatePathGeometry();
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: line 3
            // Transforms: line 3
            CompositionPathGeometry PathGeometry_4()
            {
                if (_pathGeometry_4 != null) { return _pathGeometry_4; }
                var result = _pathGeometry_4 = _c.CreatePathGeometry();
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<24, 24>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 24F), ColorBrush_AlmostMediumTurquoise_FF3CDAB4()); ;
                return result;
            }

            // - - Layer aggregator
            // - Layer: line 2
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<32.507, 18.758>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 32.507F, 18.7579994F), ColorBrush_AlmostBlueViolet_FF6C19FF()); ;
                return result;
            }

            // - - Layer aggregator
            // - Layer: line 1
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<20.787, 24.731>
                var geometry = PathGeometry_2();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 20.7870007F, 24.7310009F), ColorBrush_AlmostMediumBlue_FF2100C4()); ;
                return result;
            }

            // - Shape tree root for layer: line overlay 1
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<32.507, 18.758>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 32.507F, 18.7579994F), ColorBrush_AlmostMediumBlue_FF2000C4()); ;
                return result;
            }

            // - Shape tree root for layer: mask 1
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<24, 24>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 24F), ColorBrush_AlmostMediumTurquoise_FF3CDAB4()); ;
                return result;
            }

            // - - Layer aggregator
            // - Layer: line 4
            // Path 1
            CompositionSpriteShape SpriteShape_5()
            {
                // Offset:<32.507, 18.758>
                var geometry = PathGeometry_3();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 32.507F, 18.7579994F), ColorBrush_AlmostBlueViolet_FF6C19FF()); ;
                return result;
            }

            // - - Layer aggregator
            // - Layer: line 3
            // Path 1
            CompositionSpriteShape SpriteShape_6()
            {
                // Offset:<20.787, 24.731>
                var geometry = PathGeometry_4();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 20.7870007F, 24.7310009F), ColorBrush_AlmostMediumBlue_FF2100C4()); ;
                return result;
            }

            // - Shape tree root for layer: line overlay 2
            // Path 1
            CompositionSpriteShape SpriteShape_7()
            {
                // Offset:<32.507, 18.758>
                var geometry = PathGeometry_3();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 32.507F, 18.7579994F), ColorBrush_AlmostMediumBlue_FF2100C4()); ;
                return result;
            }

            // - Shape tree root for layer: mask 2
            // Path 1
            CompositionSpriteShape SpriteShape_8()
            {
                // Offset:<24, 24>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 24F), ColorBrush_AlmostMediumTurquoise_FF3CDAB4()); ;
                return result;
            }

            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            CompositionSurfaceBrush SurfaceBrush_2()
            {
                return _c.CreateSurfaceBrush(VisualSurface_2());
            }

            CompositionSurfaceBrush SurfaceBrush_3()
            {
                return _c.CreateSurfaceBrush(VisualSurface_3());
            }

            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_1();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            CompositionVisualSurface VisualSurface_2()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_2();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            CompositionVisualSurface VisualSurface_3()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_3();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: line overlay 1
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: mask 1
                result.Children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            ContainerVisual ContainerVisual_2()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: line overlay 2
                result.Children.InsertAtTop(ShapeVisual_4());
                return result;
            }

            ContainerVisual ContainerVisual_3()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: mask 2
                result.Children.InsertAtTop(ShapeVisual_5());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_0());
                children.InsertAtTop(SpriteVisual_0());
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_3());
                children.InsertAtTop(SpriteVisual_1());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), StepThenHoldEasingFunction());
                // Frame 7.
                result.InsertKeyFrame(0.25F, Path_0(), HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.392857134F, new CompositionPath(Geometry_2()), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.666999996F, 1F)));
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: line 1
            // - Transforms: line 1
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_1(), StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.107142858F, Path_1(), HoldThenStepEasingFunction());
                // Frame 7.
                result.InsertKeyFrame(0.25F, new CompositionPath(Geometry_4()), _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.833000004F, 0.833000004F)));
                return result;
            }

            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_2()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_2(), StepThenHoldEasingFunction());
                // Frame 21.
                result.InsertKeyFrame(0.75F, Path_2(), HoldThenStepEasingFunction());
                // Frame 25.
                result.InsertKeyFrame(0.892857134F, new CompositionPath(Geometry_6()), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 1F)));
                // Frame 27.
                result.InsertKeyFrame(0.964285731F, Path_0(), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0F), new Vector2(0.833000004F, 1F)));
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: line 3
            // - Transforms: line 3
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_3()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_3(), StepThenHoldEasingFunction());
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, Path_3(), HoldThenStepEasingFunction());
                // Frame 21.
                result.InsertKeyFrame(0.75F, Path_1(), _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.833000004F, 1F)));
                return result;
            }

            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0()
            {
                // Frame 0.
                if (_rotationAngleInDegreesScalarAnimation_0_to_0 != null) { return _rotationAngleInDegreesScalarAnimation_0_to_0; }
                var result = _rotationAngleInDegreesScalarAnimation_0_to_0 = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.357142866F, 0F, HoldThenStepEasingFunction());
                // Frame 14.
                result.InsertKeyFrame(0.5F, -4F, CubicBezierEasingFunction_0());
                // Frame 18.
                result.InsertKeyFrame(0.642857134F, 4F, CubicBezierEasingFunction_0());
                // Frame 26.
                result.InsertKeyFrame(0.928571403F, 0F, CubicBezierEasingFunction_0());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_00());
                // Layer: line 2
                shapes.Add(ContainerShape_01());
                // Layer: line 1
                shapes.Add(ContainerShape_03());
                return result;
            }

            // Shape tree root for layer: line overlay 1
            ShapeVisual ShapeVisual_1()
            {
                if (_shapeVisual_1 != null) { return _shapeVisual_1; }
                var result = _shapeVisual_1 = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                result.Shapes.Add(ContainerShape_05());
                return result;
            }

            // Shape tree root for layer: mask 1
            ShapeVisual ShapeVisual_2()
            {
                if (_shapeVisual_2 != null) { return _shapeVisual_2; }
                var result = _shapeVisual_2 = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                result.Shapes.Add(ContainerShape_06());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_3()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                var shapes = result.Shapes;
                // Layer: line 4
                shapes.Add(ContainerShape_07());
                // Layer: line 3
                shapes.Add(ContainerShape_09());
                return result;
            }

            // Shape tree root for layer: line overlay 2
            ShapeVisual ShapeVisual_4()
            {
                if (_shapeVisual_4 != null) { return _shapeVisual_4; }
                var result = _shapeVisual_4 = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(48F, 48F);
                result.Shapes.Add(ContainerShape_11());
                return result;
            }

            // Shape tree root for layer: mask 2
            ShapeVisual ShapeVisual_5()
            {
                if (_shapeVisual_5 != null) { return _shapeVisual_5; }
                var result = _shapeVisual_5 = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(48F, 48F);
                result.Shapes.Add(ContainerShape_12());
                return result;
            }

            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(48F, 48F);
                result.Brush = EffectBrush_0();
                return result;
            }

            SpriteVisual SpriteVisual_1()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(48F, 48F);
                result.Brush = EffectBrush_1();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                // Frame 0.
                if (_scaleVector2Animation != null) { return _scaleVector2Animation; }
                var result = _scaleVector2Animation = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.357142866F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 14.
                result.InsertKeyFrame(0.5F, new Vector2(1.14999998F, 1.14999998F), CubicBezierEasingFunction_0());
                // Frame 18.
                result.InsertKeyFrame(0.642857134F, new Vector2(0.920000017F, 0.920000017F), CubicBezierEasingFunction_0());
                // Frame 26.
                result.InsertKeyFrame(0.928571403F, new Vector2(1F, 1F), CubicBezierEasingFunction_0());
                return result;
            }

            // - Layer aggregator
            // Layer: line 2
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.392857134F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                return result;
            }

            // - Layer aggregator
            // Layer: line 1
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 7.
                result.InsertKeyFrame(0.25F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                return result;
            }

            // - Layer aggregator
            // Layer: line 4
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 21.
                result.InsertKeyFrame(0.75F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                return result;
            }

            // - Layer aggregator
            // Layer: line 3
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_3()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                return result;
            }

            internal Shield_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(48F, 48F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_00.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), AnimationController_0());
                _containerShape_00.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
                _containerShape_01.StartAnimation("Scale", ShapeVisibilityAnimation_0(), AnimationController_0());
                _containerShape_02.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), AnimationController_0());
                _containerShape_02.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
                _containerShape_03.StartAnimation("Scale", ShapeVisibilityAnimation_1(), AnimationController_0());
                _containerShape_04.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), AnimationController_0());
                _containerShape_04.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
                _containerShape_05.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), AnimationController_0());
                _containerShape_05.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
                _containerShape_06.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), AnimationController_0());
                _containerShape_06.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
                _containerShape_07.StartAnimation("Scale", ShapeVisibilityAnimation_2(), AnimationController_0());
                _containerShape_08.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), AnimationController_0());
                _containerShape_08.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
                _containerShape_09.StartAnimation("Scale", ShapeVisibilityAnimation_3(), AnimationController_0());
                _containerShape_10.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), AnimationController_0());
                _containerShape_10.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
                _containerShape_11.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), AnimationController_0());
                _containerShape_11.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
                _containerShape_12.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), AnimationController_0());
                _containerShape_12.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
                _pathGeometry_1.StartAnimation("Path", PathKeyFrameAnimation_0(), AnimationController_0());
                _pathGeometry_2.StartAnimation("Path", PathKeyFrameAnimation_1(), AnimationController_0());
                _pathGeometry_3.StartAnimation("Path", PathKeyFrameAnimation_2(), AnimationController_0());
                _pathGeometry_4.StartAnimation("Path", PathKeyFrameAnimation_3(), AnimationController_0());
                _shapeVisual_1.StartAnimation("IsVisible", IsVisibleBooleanAnimation_0(), AnimationController_0());
                _shapeVisual_2.StartAnimation("IsVisible", IsVisibleBooleanAnimation_0(), AnimationController_0());
                _shapeVisual_4.StartAnimation("IsVisible", IsVisibleBooleanAnimation_1(), AnimationController_0());
                _shapeVisual_5.StartAnimation("IsVisible", IsVisibleBooleanAnimation_1(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _containerShape_00.StopAnimation("RotationAngleInDegrees");
                _containerShape_00.StopAnimation("Scale");
                _containerShape_01.StopAnimation("Scale");
                _containerShape_02.StopAnimation("RotationAngleInDegrees");
                _containerShape_02.StopAnimation("Scale");
                _containerShape_03.StopAnimation("Scale");
                _containerShape_04.StopAnimation("RotationAngleInDegrees");
                _containerShape_04.StopAnimation("Scale");
                _containerShape_05.StopAnimation("RotationAngleInDegrees");
                _containerShape_05.StopAnimation("Scale");
                _containerShape_06.StopAnimation("RotationAngleInDegrees");
                _containerShape_06.StopAnimation("Scale");
                _containerShape_07.StopAnimation("Scale");
                _containerShape_08.StopAnimation("RotationAngleInDegrees");
                _containerShape_08.StopAnimation("Scale");
                _containerShape_09.StopAnimation("Scale");
                _containerShape_10.StopAnimation("RotationAngleInDegrees");
                _containerShape_10.StopAnimation("Scale");
                _containerShape_11.StopAnimation("RotationAngleInDegrees");
                _containerShape_11.StopAnimation("Scale");
                _containerShape_12.StopAnimation("RotationAngleInDegrees");
                _containerShape_12.StopAnimation("Scale");
                _pathGeometry_1.StopAnimation("Path");
                _pathGeometry_2.StopAnimation("Path");
                _pathGeometry_3.StopAnimation("Path");
                _pathGeometry_4.StopAnimation("Path");
                _shapeVisual_1.StopAnimation("IsVisible");
                _shapeVisual_2.StopAnimation("IsVisible");
                _shapeVisual_4.StopAnimation("IsVisible");
                _shapeVisual_5.StopAnimation("IsVisible");
            }

        }
    }
}
