<?xml version="1.0" encoding="utf-8"?>
<Page
    x:Class="HardenSystemSecurity.Pages.Protects.OptionalWindowsFeatures"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ui="using:CommunityToolkit.WinUI"
    xmlns:customUI="using:AppControlManager.CustomUIElements"
    xmlns:others="using:AppControlManager.Others"
    xmlns:ani="using:CommunityToolkit.WinUI.Animations"
    xmlns:controls="using:CommunityToolkit.WinUI.Controls"
    xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:viewModels="using:HardenSystemSecurity.ViewModels"
    xmlns:animatedvisuals="using:AnimatedVisuals"
    FlowDirection="{x:Bind ViewModel.AppSettings.ApplicationGlobalFlowDirection, Mode=OneWay}">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Grid.Resources>

            <!-- Defines a single DISMOutputEntry that is displayed in the ListView -->
            <DataTemplate x:Key="DISMOutputListViewTemplate"
                          x:DataType="viewModels:DISMOutputEntry">
                <Border BorderThickness="2"
                        BorderBrush="{x:Bind BorderBrush, Mode=OneWay}"
                        CornerRadius="8"
                        Padding="16"
                        Margin="0,4,0,4"
                        Background="{ThemeResource CardBackgroundFillColorDefaultBrush}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- Name and Type -->
                        <Grid Grid.Row="0" Margin="0,0,0,10">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <TextBlock Grid.Column="0"
                                       Text="{x:Bind Name, Mode=OneWay}"
                                       ToolTipService.ToolTip="{x:Bind Name, Mode=OneWay}"
                                       AutomationProperties.HelpText="{x:Bind Name, Mode=OneWay}"
                                       TextWrapping="WrapWholeWords"
                                       x:Phase="1"
                                       Style="{ThemeResource SubtitleTextBlockStyle}"/>

                            <!-- Type Label -->
                            <Border Grid.Column="1"
                                    CornerRadius="14"
                                    Padding="10,6"
                                    VerticalAlignment="Center"
                                    Background="{ThemeResource AppOverlayBackgroundBrush}"
                                    BorderBrush="{ThemeResource ControlStrokeColorSecondaryBrush}"
                                    BorderThickness="1">
                                <TextBlock Text="{x:Bind TypeDisplayName, Mode=OneWay}"
                                           FontSize="11"
                                           FontWeight="SemiBold"/>
                            </Border>
                        </Grid>

                        <!-- State -->
                        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,0,0,10" Spacing="10">

                            <TextBlock Text="State:"
			                           Style="{ThemeResource BodyTextBlockStyle}"/>

                            <!-- State pill -->
                            <Border Background="{x:Bind StateBadgeBrush, Mode=OneWay}"
			                        Padding="10,4"
			                        CornerRadius="12"
			                        HorizontalAlignment="Left">
                                <TextBlock Text="{x:Bind StateDisplayName, Mode=OneWay}"
				                           Foreground="White"
				                           FontSize="12"
				                           FontWeight="SemiBold"/>
                            </Border>

                        </StackPanel>

                        <!-- Description -->
                        <Grid Grid.Row="2" Margin="0,0,0,6">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <TextBlock Grid.Column="0"
			                           Text="Description:"
			                           Style="{ThemeResource BodyTextBlockStyle}"
			                           VerticalAlignment="Top"
			                           Margin="0,0,10,0"/>

                            <TextBlock Grid.Column="1"
			                           Text="{x:Bind Description, Mode=OneWay}"
			                           TextWrapping="WrapWholeWords"
			                           Foreground="{ThemeResource TextFillColorSecondaryBrush}"
			                           Style="{ThemeResource BodyTextBlockStyle}"/>
                        </Grid>

                        <!-- Action Buttons -->
                        <StackPanel Grid.Row="3"
                                    Orientation="Horizontal"
                                    Spacing="8"
                                    HorizontalAlignment="Right">

                            <Button Click="{x:Bind EnableItem}"
                                    IsEnabled="{x:Bind ButtonsEnabled, Mode=OneWay}">
                                <StackPanel Orientation="Horizontal" Spacing="4">
                                    <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}"
                                              Glyph="&#xE73E;"
                                              FontSize="14"/>
                                    <TextBlock Text="Enable"
                                               FontSize="12"
                                               FontWeight="SemiBold"
                                               VerticalAlignment="Center"/>
                                </StackPanel>
                            </Button>

                            <Button Click="{x:Bind DisableItem}"
                                    IsEnabled="{x:Bind ButtonsEnabled, Mode=OneWay}">
                                <StackPanel Orientation="Horizontal" Spacing="4">
                                    <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}"
                                              Glyph="&#xE74D;"
                                              FontSize="14"/>
                                    <TextBlock Text="Disable"
                                               FontSize="12"
                                               FontWeight="SemiBold"
                                               VerticalAlignment="Center"/>
                                </StackPanel>
                            </Button>
                        </StackPanel>

                    </Grid>
                </Border>
            </DataTemplate>

            <!-- Grouped CollectionViewSource for DISM items -->
            <CollectionViewSource x:Name="DISMItemsCollectionViewSource"
                                  Source="{x:Bind ViewModel.GroupedFilteredDISMItems, Mode=OneWay}"
                                  IsSourceGrouped="True"/>
        </Grid.Resources>

        <controls:WrapPanel Style="{StaticResource PageHeaderWrapPanelStyle}">

            <TextBlock x:Uid="OptionalWindowsFeaturesPageTitle" TextWrapping="WrapWholeWords" Style="{StaticResource BodyTextBlockStyle}" />

            <customUI:GuideButton NavigateUri="https://github.com/HotCakeX/Harden-Windows-Security/wiki/Optional-Windows-Features" />

        </controls:WrapPanel>

        <customUI:InfoBarV2 Grid.Row="1"
                Margin="15"
                IsOpen="{x:Bind ViewModel.MainInfoBarIsOpen, Mode=TwoWay}"
                Message="{x:Bind ViewModel.MainInfoBarMessage, Mode=OneWay}"
                Severity="{x:Bind ViewModel.MainInfoBarSeverity, Mode=OneWay}"
                IsClosable="{x:Bind ViewModel.MainInfoBarIsClosable, Mode=OneWay}"/>

        <Border Grid.Row="2"
                Margin="0,10,0,10"
                Style="{StaticResource GridCardStyle}"
                Padding="12">

            <controls:WrapPanel Orientation="Horizontal"
                                HorizontalSpacing="15"
                                VerticalSpacing="10"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center">

                <!-- Search TextBox -->
                <TextBox x:Uid="SearchFeatureCapabilityPlaceHolder"
                         Text="{x:Bind ViewModel.SearchQuery, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                         MinWidth="200"
                         IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}" />

                <!-- Total and Displayed Count -->
                <Border Background="{ThemeResource SubtleFillColorSecondaryBrush}"
                        CornerRadius="6"
                        Padding="12,8">
                    <TextBlock VerticalAlignment="Center"
                               FontSize="14"
                               FontWeight="SemiBold">
                        <Run x:Uid="TotalText"/>
                        <Run Text="{x:Bind ViewModel.TotalItemsCount, Mode=OneWay}"/>
                        <Run Text=" | Displayed: "/>
                        <Run Text="{x:Bind ViewModel.FilteredItemsCount, Mode=OneWay}"/>
                    </TextBlock>
                </Border>

                <!-- Progress Ring -->
                <ProgressRing IsActive="True"
                              Visibility="{x:Bind ViewModel.ProgressBarVisibility, Mode=OneWay}"
                              VerticalAlignment="Center" />

                <SplitButton IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}"
                             Click="{x:Bind ViewModel.LoadAll}">

                    <SplitButton.Content>
                        <StackPanel Orientation="Horizontal" Spacing="4">
                            <AnimatedIcon Height="18" Width="18">
                                <AnimatedIcon.Source>
                                    <animatedvisuals:MindMap/>
                                </AnimatedIcon.Source>
                            </AnimatedIcon>
                            <TextBlock x:Uid="RetrieveAllOptionalsButtonText"
                                       FontWeight="SemiBold"
                                       VerticalAlignment="Center"/>
                        </StackPanel>
                    </SplitButton.Content>

                    <SplitButton.Flyout>
                        <MenuFlyout Placement="RightEdgeAlignedBottom">
                            <MenuFlyout.SystemBackdrop>
                                <MicaBackdrop Kind="BaseAlt"/>
                            </MenuFlyout.SystemBackdrop>
                            <MenuFlyoutItem x:Uid="RetrieveRecommendedOnlyMenuFlyoutItem"
                                            Click="{x:Bind ViewModel.EnsureRecommendedItemsRetrievedAndGroupAsync_Click}"/>
                        </MenuFlyout>

                    </SplitButton.Flyout>
                </SplitButton>

                <customUI:AnimatedCancellableButton
                    IsEnabled="{x:Bind ViewModel.IsApplyButtonEnabled, Mode=OneWay}"
                    CancelMethod="{x:Bind ViewModel.ApplyCancellableButton.Cancel, Mode=OneWay}"
                    ExternalOperationInProgress="{x:Bind ViewModel.ApplyCancellableButton.IsOperationInProgress, Mode=OneWay}"
                    ExternalIsCancelState="{x:Bind ViewModel.ApplyCancellableButton.IsCancelState, Mode=OneWay}"
                    ExternalIsCancellingState="{x:Bind ViewModel.ApplyCancellableButton.IsCancellingState, Mode=OneWay}"
                    ExternalIsAnimating="{x:Bind ViewModel.ApplyCancellableButton.IsAnimating, Mode=OneWay}"
                    ExternalButtonContent="{x:Bind ViewModel.ApplyCancellableButton.ButtonContent, Mode=OneWay}"
                    ExternalOriginalText="{x:Bind ViewModel.ApplyCancellableButton.OriginalText, Mode=OneWay}"
                    ExternalInternalIsCancelState="{x:Bind ViewModel.ApplyCancellableButton.InternalIsCancelState, Mode=OneWay}"
                    ExternalInternalIsCancellingState="{x:Bind ViewModel.ApplyCancellableButton.InternalIsCancellingState, Mode=OneWay}"
                    ExternalInternalIsAnimating="{x:Bind ViewModel.ApplyCancellableButton.InternalIsAnimating, Mode=OneWay}"
                    ExternalInternalIsOperationInProgress="{x:Bind ViewModel.ApplyCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
                    ExternalInternalSuppressExternalClick="{x:Bind ViewModel.ApplyCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
                    ExternalShadowAnimationRunning="{x:Bind ViewModel.ApplyCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
                    ExternalOperationStarted="{x:Bind ViewModel.ApplyCancellableButton.OperationStarted, Mode=OneWay}"
                    Click="{x:Bind ViewModel.ApplySecurityHardeningUI}">

                    <ani:Implicit.HideAnimations>
                        <ani:OpacityAnimation Duration="0:0:0.3" To="0.0"/>
                        <ani:ScaleAnimation Duration="0:0:0.3" To="0.9"/>
                    </ani:Implicit.HideAnimations>
                    <ani:Implicit.ShowAnimations>
                        <ani:OpacityAnimation Duration="0:0:0.5" From="0.0" To="1.0"/>
                        <ani:ScaleAnimation Duration="0:0:0.5" From="0.9" To="1.0"/>
                    </ani:Implicit.ShowAnimations>

                </customUI:AnimatedCancellableButton>

                <customUI:AnimatedCancellableButton
                    IsEnabled="{x:Bind ViewModel.IsVerifyButtonEnabled, Mode=OneWay}"
                    CancelMethod="{x:Bind ViewModel.VerifyCancellableButton.Cancel, Mode=OneWay}"
                    ExternalOperationInProgress="{x:Bind ViewModel.VerifyCancellableButton.IsOperationInProgress, Mode=OneWay}"
                    ExternalIsCancelState="{x:Bind ViewModel.VerifyCancellableButton.IsCancelState, Mode=OneWay}"
                    ExternalIsCancellingState="{x:Bind ViewModel.VerifyCancellableButton.IsCancellingState, Mode=OneWay}"
                    ExternalIsAnimating="{x:Bind ViewModel.VerifyCancellableButton.IsAnimating, Mode=OneWay}"
                    ExternalButtonContent="{x:Bind ViewModel.VerifyCancellableButton.ButtonContent, Mode=OneWay}"
                    ExternalOriginalText="{x:Bind ViewModel.VerifyCancellableButton.OriginalText, Mode=OneWay}"
                    ExternalInternalIsCancelState="{x:Bind ViewModel.VerifyCancellableButton.InternalIsCancelState, Mode=OneWay}"
                    ExternalInternalIsCancellingState="{x:Bind ViewModel.VerifyCancellableButton.InternalIsCancellingState, Mode=OneWay}"
                    ExternalInternalIsAnimating="{x:Bind ViewModel.VerifyCancellableButton.InternalIsAnimating, Mode=OneWay}"
                    ExternalInternalIsOperationInProgress="{x:Bind ViewModel.VerifyCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
                    ExternalInternalSuppressExternalClick="{x:Bind ViewModel.VerifyCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
                    ExternalShadowAnimationRunning="{x:Bind ViewModel.VerifyCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
                    ExternalOperationStarted="{x:Bind ViewModel.VerifyCancellableButton.OperationStarted, Mode=OneWay}"
                    Click="{x:Bind ViewModel.VerifySecurityHardeningUI}">

                    <ani:Implicit.HideAnimations>
                        <ani:OpacityAnimation Duration="0:0:0.3" To="0.0"/>
                        <ani:ScaleAnimation Duration="0:0:0.3" To="0.9"/>
                    </ani:Implicit.HideAnimations>
                    <ani:Implicit.ShowAnimations>
                        <ani:OpacityAnimation Duration="0:0:0.5" From="0.0" To="1.0"/>
                        <ani:ScaleAnimation Duration="0:0:0.5" From="0.9" To="1.0"/>
                    </ani:Implicit.ShowAnimations>

                </customUI:AnimatedCancellableButton>

                <customUI:AnimatedCancellableButton
                    IsEnabled="{x:Bind ViewModel.IsRemoveButtonEnabled, Mode=OneWay}"
                    CancelMethod="{x:Bind ViewModel.RemoveCancellableButton.Cancel, Mode=OneWay}"
                    ExternalOperationInProgress="{x:Bind ViewModel.RemoveCancellableButton.IsOperationInProgress, Mode=OneWay}"
                    ExternalIsCancelState="{x:Bind ViewModel.RemoveCancellableButton.IsCancelState, Mode=OneWay}"
                    ExternalIsCancellingState="{x:Bind ViewModel.RemoveCancellableButton.IsCancellingState, Mode=OneWay}"
                    ExternalIsAnimating="{x:Bind ViewModel.RemoveCancellableButton.IsAnimating, Mode=OneWay}"
                    ExternalButtonContent="{x:Bind ViewModel.RemoveCancellableButton.ButtonContent, Mode=OneWay}"
                    ExternalOriginalText="{x:Bind ViewModel.RemoveCancellableButton.OriginalText, Mode=OneWay}"
                    ExternalInternalIsCancelState="{x:Bind ViewModel.RemoveCancellableButton.InternalIsCancelState, Mode=OneWay}"
                    ExternalInternalIsCancellingState="{x:Bind ViewModel.RemoveCancellableButton.InternalIsCancellingState, Mode=OneWay}"
                    ExternalInternalIsAnimating="{x:Bind ViewModel.RemoveCancellableButton.InternalIsAnimating, Mode=OneWay}"
                    ExternalInternalIsOperationInProgress="{x:Bind ViewModel.RemoveCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
                    ExternalInternalSuppressExternalClick="{x:Bind ViewModel.RemoveCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
                    ExternalShadowAnimationRunning="{x:Bind ViewModel.RemoveCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
                    ExternalOperationStarted="{x:Bind ViewModel.RemoveCancellableButton.OperationStarted, Mode=OneWay}"
                    Click="{x:Bind ViewModel.RemoveSecurityHardeningUI}">

                    <ani:Implicit.HideAnimations>
                        <ani:OpacityAnimation Duration="0:0:0.3" To="0.0"/>
                        <ani:ScaleAnimation Duration="0:0:0.3" To="0.9"/>
                    </ani:Implicit.HideAnimations>
                    <ani:Implicit.ShowAnimations>
                        <ani:OpacityAnimation Duration="0:0:0.5" From="0.0" To="1.0"/>
                        <ani:ScaleAnimation Duration="0:0:0.5" From="0.9" To="1.0"/>
                    </ani:Implicit.ShowAnimations>

                </customUI:AnimatedCancellableButton>

                <!-- Manage Selections Dropdown -->
                <DropDownButton x:Uid="ManageSelectionsDropDownButton">
                    <DropDownButton.Flyout>
                        <MenuFlyout Placement="Bottom">
                            <MenuFlyoutItem x:Uid="SelectAllMenuFlyoutItem" IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}" Click="{x:Bind ViewModel.SelectAll_Click}">
                                <MenuFlyoutItem.Icon>
                                    <FontIcon Glyph="&#xE8B3;"/>
                                </MenuFlyoutItem.Icon>
                            </MenuFlyoutItem>

                            <MenuFlyoutItem x:Uid="RemoveSelectionsMenuFlyoutItem" IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}" Click="{x:Bind ViewModel.RemoveSelections_Click}">
                                <MenuFlyoutItem.Icon>
                                    <FontIcon Glyph="&#xE8E6;"/>
                                </MenuFlyoutItem.Icon>
                            </MenuFlyoutItem>

                            <MenuFlyoutSeparator/>

                            <MenuFlyoutItem x:Uid="DisableSelectedItemsMenuFlyoutItem" IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}" Click="{x:Bind ViewModel.DisableSelected_Click}" >
                                <MenuFlyoutItem.Icon>
                                    <FontIcon Glyph="&#xE738;"/>
                                </MenuFlyoutItem.Icon>
                            </MenuFlyoutItem>

                            <MenuFlyoutItem x:Uid="EnableSelectedItemsMenuFlyoutItem" IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}" Click="{x:Bind ViewModel.EnableSelected_Click}" >
                                <MenuFlyoutItem.Icon>
                                    <FontIcon Glyph="&#xE710;"/>
                                </MenuFlyoutItem.Icon>
                            </MenuFlyoutItem>

                        </MenuFlyout>
                    </DropDownButton.Flyout>
                </DropDownButton>

                <!-- Selected Items Count -->
                <Border Background="#aa4b6b"
                        CornerRadius="12"
                        Padding="12,8">
                    <TextBlock FontSize="14"
                               FontWeight="SemiBold"
                               Foreground="WhiteSmoke"
                               VerticalAlignment="Center">
                        <Run Text="Selected: "/>
                        <Run Text="{x:Bind ViewModel.SelectedItemsCount, Mode=OneWay}"/>
                    </TextBlock>
                </Border>

            </controls:WrapPanel>
        </Border>

        <RefreshContainer Grid.Row="3"
                          RefreshRequested="{x:Bind ViewModel.LoadAll}">

            <ListView Loaded="{x:Bind ViewModel.MainListView_Loaded}"
                      CornerRadius="10"
                      BorderBrush="{ThemeResource SystemControlForegroundBaseMediumLowBrush}"
                      ScrollViewer.HorizontalScrollBarVisibility="Auto"
                      ScrollViewer.VerticalScrollBarVisibility="Auto"
                      ScrollViewer.HorizontalScrollMode="Enabled"
                      ScrollViewer.VerticalScrollMode="Enabled"
                      SelectionChanged="{x:Bind ViewModel.MainListView_SelectionChanged}"
                      ItemTemplate="{StaticResource DISMOutputListViewTemplate}"
                      ItemsSource="{x:Bind DISMItemsCollectionViewSource.View, Mode=OneWay}"
                      SelectionMode="Multiple">
                <ListView.GroupStyle>
                    <GroupStyle>
                        <GroupStyle.HeaderTemplate>
                            <DataTemplate x:DataType="viewModels:GroupInfoListForDISMItems">
                                <Border AutomationProperties.AccessibilityView="Raw">
                                    <TextBlock Text="{x:Bind Key}"
                                               AutomationProperties.AccessibilityView="Raw"/>
                                </Border>
                            </DataTemplate>
                        </GroupStyle.HeaderTemplate>
                    </GroupStyle>
                </ListView.GroupStyle>
            </ListView>

        </RefreshContainer>

    </Grid>
</Page>