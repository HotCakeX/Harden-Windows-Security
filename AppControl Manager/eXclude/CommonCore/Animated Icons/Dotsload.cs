//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.1.240821.1+077322fa26
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile dotsload.json
//       
//       Input file:
//           dotsload.json (38513 bytes created 15:42+02:00 Mar 10 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    68 |
// |--------------------------+-------|
// | Expression animators     |     4 |
// | KeyFrame animators       |     6 |
// | Reference parameters     |     4 |
// | Expression operations    |     6 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     4 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     3 |
// | CompositionSpriteShapes  |     3 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
	// Name:        dots-loading-4
	// Frame rate:  24 fps
	// Frame count: 28
	// Duration:    1166.7 mS
	// _____________________________________________________________________________________________
	// |           Marker           |           Constant           | Frame |   mS   |   Progress   |
	// |____________________________|______________________________|_______|________|______________|
	// | NormalToPressed_Start      | M_NormalToPressed_Start      |     0 |    0.0 | 0F           |
	// | NormalToPressed_End        | M_NormalToPressed_End        |     9 |  375.0 | 0.323214293F |
	// | PointerOverToPressed_Start | M_PointerOverToPressed_Start |     9 |  375.0 | 0.323214293F |
	// | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    19 |  791.7 | 0.680357158F |
	// | PressedToNormal_Start      | M_PressedToNormal_Start      |    20 |  833.3 | 0.716071427F |
	// | PressedToNormal_End        | M_PressedToNormal_End        |    28 | 1166.7 | 1F           |
	// | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    28 | 1166.7 | 1F           |
	// | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    28 | 1166.7 | 1F           |
	// ---------------------------------------------------------------------------------------------
	sealed partial class Dotsload
		: Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
		, Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
	{
		// Animation duration: 1.167 seconds.
		internal const long c_durationTicks = 11666666;

		// Marker: NormalToPressed_Start.
		internal const float M_NormalToPressed_Start = 0F;

		// Marker: NormalToPressed_End.
		internal const float M_NormalToPressed_End = 0.323214293F;

		// Marker: PointerOverToPressed_Start.
		internal const float M_PointerOverToPressed_Start = 0.323214293F;

		// Marker: PointerOverToPressed_End.
		internal const float M_PointerOverToPressed_End = 0.680357158F;

		// Marker: PressedToNormal_Start.
		internal const float M_PressedToNormal_Start = 0.716071427F;

		// Marker: PressedToNormal_End.
		internal const float M_PressedToNormal_End = 1F;

		// Marker: PressedToPointerOver_Start.
		internal const float M_PressedToPointerOver_Start = 1F;

		// Marker: PressedToPointerOver_End.
		internal const float M_PressedToPointerOver_End = 1F;

		public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
		{
			object ignored = null;
			return TryCreateAnimatedVisual(compositor, out ignored);
		}

		public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
		{
			diagnostics = null;

			var res =
				new Dotsload_AnimatedVisual(
					compositor
					);
			res.CreateAnimations();
			return res;
		}

		/// <summary>
		/// Gets the number of frames in the animation.
		/// </summary>
		public double FrameCount => 28d;

		/// <summary>
		/// Gets the frame rate of the animation.
		/// </summary>
		public double Framerate => 24d;

		/// <summary>
		/// Gets the duration of the animation.
		/// </summary>
		public TimeSpan Duration => TimeSpan.FromTicks(11666666);

		/// <summary>
		/// Converts a zero-based frame number to the corresponding progress value denoting the
		/// start of the frame.
		/// </summary>
		public double FrameToProgress(double frameNumber)
		{
			return frameNumber / 28d;
		}

		/// <summary>
		/// Returns a map from marker names to corresponding progress values.
		/// </summary>
		public IReadOnlyDictionary<string, double> Markers =>
			new Dictionary<string, double>
			{
				{ "NormalToPressed_Start", 0d },
				{ "NormalToPressed_End", 0.323214285714286 },
				{ "PointerOverToPressed_Start", 0.323214285714286 },
				{ "PointerOverToPressed_End", 0.680357142857143 },
				{ "PressedToNormal_Start", 0.716071428571429 },
				{ "PressedToNormal_End", 1d },
				{ "PressedToPointerOver_Start", 1d },
				{ "PressedToPointerOver_End", 1d },
			};

		/// <summary>
		/// Sets the color property with the given name, or does nothing if no such property
		/// exists.
		/// </summary>
		public void SetColorProperty(string propertyName, Color value)
		{
		}

		/// <summary>
		/// Sets the scalar property with the given name, or does nothing if no such property
		/// exists.
		/// </summary>
		public void SetScalarProperty(string propertyName, double value)
		{
		}

		sealed partial class Dotsload_AnimatedVisual
			: Microsoft.UI.Xaml.Controls.IAnimatedVisual
			, Microsoft.UI.Xaml.Controls.IAnimatedVisual2
		{
			const long c_durationTicks = 11666666;
			readonly Compositor _c;
			readonly ExpressionAnimation _reusableExpressionAnimation;
			AnimationController _animationController_0;
			CompositionColorBrush _colorBrush_AlmostCornflowerBlue_FF63B5F6;
			CompositionContainerShape _containerShape_0;
			CompositionContainerShape _containerShape_1;
			CompositionContainerShape _containerShape_2;
			CompositionPathGeometry _pathGeometry;
			ContainerVisual _root;
			CubicBezierEasingFunction _cubicBezierEasingFunction_0;
			CubicBezierEasingFunction _cubicBezierEasingFunction_1;
			CubicBezierEasingFunction _cubicBezierEasingFunction_2;
			StepEasingFunction _holdThenStepEasingFunction;
			StepEasingFunction _stepThenHoldEasingFunction;

			void BindProperty(
				CompositionObject target,
				string animatedPropertyName,
				string expression,
				string referenceParameterName,
				CompositionObject referencedObject)
			{
				_reusableExpressionAnimation.ClearAllParameters();
				_reusableExpressionAnimation.Expression = expression;
				_reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
				target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
			}

			ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
			{
				var result = _c.CreateScalarKeyFrameAnimation();
				result.Duration = TimeSpan.FromTicks(c_durationTicks);
				result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
				return result;
			}

			CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
			{
				var result = _c.CreateSpriteShape(geometry);
				result.TransformMatrix = transformMatrix;
				result.FillBrush = fillBrush;
				return result;
			}

			AnimationController AnimationController_0()
			{
				if (_animationController_0 != null) { return _animationController_0; }
				var result = _animationController_0 = _c.CreateAnimationController();
				result.Pause();
				BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
				return result;
			}

			CanvasGeometry Geometry()
			{
				CanvasGeometry result;
				using (var builder = new CanvasPathBuilder(null))
				{
					builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
					builder.BeginFigure(new Vector2(0F, -4F));
					builder.AddCubicBezier(new Vector2(-2.20900011F, -4F), new Vector2(-4F, -2.20900011F), new Vector2(-4F, 0F));
					builder.AddCubicBezier(new Vector2(-4F, 2.20900011F), new Vector2(-2.20900011F, 4F), new Vector2(0F, 4F));
					builder.AddCubicBezier(new Vector2(2.20900011F, 4F), new Vector2(4F, 2.20900011F), new Vector2(4F, 0F));
					builder.AddCubicBezier(new Vector2(4F, -2.20900011F), new Vector2(2.20900011F, -4F), new Vector2(0F, -4F));
					builder.EndFigure(CanvasFigureLoop.Closed);
					result = CanvasGeometry.CreatePath(builder);
				}
				return result;
			}

			CompositionColorBrush ColorBrush_AlmostCornflowerBlue_FF63B5F6()
			{
				return (_colorBrush_AlmostCornflowerBlue_FF63B5F6 == null)
					? _colorBrush_AlmostCornflowerBlue_FF63B5F6 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x63, 0xB5, 0xF6))
					: _colorBrush_AlmostCornflowerBlue_FF63B5F6;
			}

			CompositionContainerShape ContainerShape_0()
			{
				if (_containerShape_0 != null) { return _containerShape_0; }
				var result = _containerShape_0 = _c.CreateContainerShape();
				var propertySet = result.Properties;
				propertySet.InsertVector2("Position", new Vector2(8F, 24F));
				// ShapeGroup: Group 1 Offset:<4.25, 4.25>
				result.Shapes.Add(SpriteShape_0());
				BindProperty(_containerShape_0, "Offset", "Vector2(my.Position.X-4.25,my.Position.Y-4.25)", "my", _containerShape_0);
				return result;
			}

			CompositionContainerShape ContainerShape_1()
			{
				if (_containerShape_1 != null) { return _containerShape_1; }
				var result = _containerShape_1 = _c.CreateContainerShape();
				var propertySet = result.Properties;
				propertySet.InsertVector2("Position", new Vector2(24F, 24F));
				// ShapeGroup: Group 1 Offset:<4.25, 4.25>
				result.Shapes.Add(SpriteShape_1());
				BindProperty(_containerShape_1, "Offset", "Vector2(my.Position.X-4.25,my.Position.Y-4.25)", "my", _containerShape_1);
				return result;
			}

			CompositionContainerShape ContainerShape_2()
			{
				if (_containerShape_2 != null) { return _containerShape_2; }
				var result = _containerShape_2 = _c.CreateContainerShape();
				var propertySet = result.Properties;
				propertySet.InsertVector2("Position", new Vector2(40F, 24F));
				// ShapeGroup: Group 1 Offset:<4.25, 4.25>
				result.Shapes.Add(SpriteShape_2());
				BindProperty(_containerShape_2, "Offset", "Vector2(my.Position.X-4.25,my.Position.Y-4.25)", "my", _containerShape_2);
				return result;
			}

			CompositionPathGeometry PathGeometry()
			{
				return (_pathGeometry == null)
					? _pathGeometry = _c.CreatePathGeometry(new CompositionPath(Geometry()))
					: _pathGeometry;
			}

			// Path 1
			CompositionSpriteShape SpriteShape_0()
			{
				// Offset:<4.25, 4.25>
				var geometry = PathGeometry();
				var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 4.25F, 4.25F), ColorBrush_AlmostCornflowerBlue_FF63B5F6()); ;
				return result;
			}

			// Path 1
			CompositionSpriteShape SpriteShape_1()
			{
				// Offset:<4.25, 4.25>
				var geometry = PathGeometry();
				var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 4.25F, 4.25F), ColorBrush_AlmostCornflowerBlue_FF63B5F6()); ;
				return result;
			}

			// Path 1
			CompositionSpriteShape SpriteShape_2()
			{
				// Offset:<4.25, 4.25>
				var geometry = PathGeometry();
				var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 4.25F, 4.25F), ColorBrush_AlmostCornflowerBlue_FF63B5F6()); ;
				return result;
			}

			// The root of the composition.
			ContainerVisual Root()
			{
				if (_root != null) { return _root; }
				var result = _root = _c.CreateContainerVisual();
				var propertySet = result.Properties;
				propertySet.InsertScalar("Progress", 0F);
				// Layer aggregator
				result.Children.InsertAtTop(ShapeVisual_0());
				return result;
			}

			CubicBezierEasingFunction CubicBezierEasingFunction_0()
			{
				return (_cubicBezierEasingFunction_0 == null)
					? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F))
					: _cubicBezierEasingFunction_0;
			}

			CubicBezierEasingFunction CubicBezierEasingFunction_1()
			{
				return (_cubicBezierEasingFunction_1 == null)
					? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 0.465000004F))
					: _cubicBezierEasingFunction_1;
			}

			CubicBezierEasingFunction CubicBezierEasingFunction_2()
			{
				return (_cubicBezierEasingFunction_2 == null)
					? _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0.458999991F), new Vector2(0.666999996F, 1F))
					: _cubicBezierEasingFunction_2;
			}

			// Position.X
			ScalarKeyFrameAnimation PositionXScalarAnimation_8_to_40()
			{
				// Frame 0.
				var result = CreateScalarKeyFrameAnimation(0F, 8F, HoldThenStepEasingFunction());
				// Frame 14.
				result.InsertKeyFrame(0.5F, 24F, CubicBezierEasingFunction_0());
				// Frame 21.
				result.InsertKeyFrame(0.75F, 32F, CubicBezierEasingFunction_1());
				// Frame 27.
				result.InsertKeyFrame(0.964285731F, 40F, CubicBezierEasingFunction_2());
				return result;
			}

			// Position.X
			ScalarKeyFrameAnimation PositionXScalarAnimation_24_to_8()
			{
				// Frame 0.
				var result = CreateScalarKeyFrameAnimation(0F, 24F, HoldThenStepEasingFunction());
				// Frame 14.
				result.InsertKeyFrame(0.5F, 8F, CubicBezierEasingFunction_0());
				return result;
			}

			// Position.X
			ScalarKeyFrameAnimation PositionXScalarAnimation_40_to_24()
			{
				// Frame 0.
				var result = CreateScalarKeyFrameAnimation(0F, 40F, StepThenHoldEasingFunction());
				// Frame 14.
				result.InsertKeyFrame(0.5F, 40F, HoldThenStepEasingFunction());
				// Frame 21.
				result.InsertKeyFrame(0.75F, 32F, CubicBezierEasingFunction_1());
				// Frame 27.
				result.InsertKeyFrame(0.964285731F, 24F, CubicBezierEasingFunction_2());
				return result;
			}

			// Position.Y
			ScalarKeyFrameAnimation PositionYScalarAnimation_24_to_24_0()
			{
				// Frame 0.
				var result = CreateScalarKeyFrameAnimation(0F, 24F, HoldThenStepEasingFunction());
				// Frame 7.
				result.InsertKeyFrame(0.25F, 34F, _c.CreateCubicBezierEasingFunction(new Vector2(0.476999998F, 0.00999999978F), new Vector2(0.375999987F, 1F)));
				// Frame 14.
				result.InsertKeyFrame(0.5F, 24F, _c.CreateCubicBezierEasingFunction(new Vector2(0.640999973F, 0F), new Vector2(0.638999999F, 0.801999986F)));
				// Frame 21.
				result.InsertKeyFrame(0.75F, 16F, _c.CreateCubicBezierEasingFunction(new Vector2(0.472000003F, 0.340000004F), new Vector2(0.414999992F, 1F)));
				// Frame 27.
				result.InsertKeyFrame(0.964285731F, 24F, _c.CreateCubicBezierEasingFunction(new Vector2(0.611999989F, 0F), new Vector2(0.569999993F, 0.99000001F)));
				return result;
			}

			// Position.Y
			ScalarKeyFrameAnimation PositionYScalarAnimation_24_to_24_1()
			{
				// Frame 0.
				var result = CreateScalarKeyFrameAnimation(0F, 24F, HoldThenStepEasingFunction());
				// Frame 7.
				result.InsertKeyFrame(0.25F, 16F, _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.375999987F, 1F)));
				// Frame 14.
				result.InsertKeyFrame(0.5F, 24F, _c.CreateCubicBezierEasingFunction(new Vector2(0.640999973F, 0F), new Vector2(0.833000004F, 0.998000026F)));
				return result;
			}

			// Position.Y
			ScalarKeyFrameAnimation PositionYScalarAnimation_24_to_24_2()
			{
				// Frame 0.
				var result = CreateScalarKeyFrameAnimation(0F, 24F, StepThenHoldEasingFunction());
				// Frame 14.
				result.InsertKeyFrame(0.5F, 24F, HoldThenStepEasingFunction());
				// Frame 21.
				result.InsertKeyFrame(0.75F, 34F, _c.CreateCubicBezierEasingFunction(new Vector2(0.472000003F, 0.00999999978F), new Vector2(0.414999992F, 1F)));
				// Frame 27.
				result.InsertKeyFrame(0.964285731F, 24F, _c.CreateCubicBezierEasingFunction(new Vector2(0.611999989F, 0F), new Vector2(0.569999993F, 0.995999992F)));
				return result;
			}

			// Layer aggregator
			ShapeVisual ShapeVisual_0()
			{
				var result = _c.CreateShapeVisual();
				result.Size = new Vector2(48F, 48F);
				var shapes = result.Shapes;
				shapes.Add(ContainerShape_0());
				shapes.Add(ContainerShape_1());
				shapes.Add(ContainerShape_2());
				return result;
			}

			StepEasingFunction HoldThenStepEasingFunction()
			{
				if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
				var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
				result.IsFinalStepSingleFrame = true;
				return result;
			}

			StepEasingFunction StepThenHoldEasingFunction()
			{
				if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
				var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
				result.IsInitialStepSingleFrame = true;
				return result;
			}

			internal Dotsload_AnimatedVisual(
				Compositor compositor
				)
			{
				_c = compositor;
				_reusableExpressionAnimation = compositor.CreateExpressionAnimation();
				Root();
			}

			public Visual RootVisual => _root;
			public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
			public Vector2 Size => new Vector2(48F, 48F);
			void IDisposable.Dispose() => _root?.Dispose();

			public void CreateAnimations()
			{
				_containerShape_0.Properties.StartAnimation("Position.X", PositionXScalarAnimation_8_to_40(), AnimationController_0());
				_containerShape_0.Properties.StartAnimation("Position.Y", PositionYScalarAnimation_24_to_24_0(), AnimationController_0());
				_containerShape_1.Properties.StartAnimation("Position.X", PositionXScalarAnimation_24_to_8(), AnimationController_0());
				_containerShape_1.Properties.StartAnimation("Position.Y", PositionYScalarAnimation_24_to_24_1(), AnimationController_0());
				_containerShape_2.Properties.StartAnimation("Position.X", PositionXScalarAnimation_40_to_24(), AnimationController_0());
				_containerShape_2.Properties.StartAnimation("Position.Y", PositionYScalarAnimation_24_to_24_2(), AnimationController_0());
			}

			public void DestroyAnimations()
			{
				_containerShape_0.Properties.StopAnimation("Position.X");
				_containerShape_0.Properties.StopAnimation("Position.Y");
				_containerShape_1.Properties.StopAnimation("Position.X");
				_containerShape_1.Properties.StopAnimation("Position.Y");
				_containerShape_2.Properties.StopAnimation("Position.X");
				_containerShape_2.Properties.StopAnimation("Position.Y");
			}

		}
	}
}
