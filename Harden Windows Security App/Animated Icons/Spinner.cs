//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.2.250604.1+b02a3ee244
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile Spinner.json
//       
//       Input file:
//           Spinner.json (55180 bytes created 17:42+03:00 Jul 26 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    54 |
// |--------------------------+-------|
// | Expression animators     |     1 |
// | KeyFrame animators       |     3 |
// | Reference parameters     |     1 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     1 |
// | CompositionSpriteShapes  |     5 |
// |--------------------------+-------|
// | Brushes                  |     4 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        fidget-spinner
    // Frame rate:  24 fps
    // Frame count: 28
    // Duration:    1166.7 mS
    // _____________________________________________________________________________________________
    // |           Marker           |           Constant           | Frame |   mS   |   Progress   |
    // |____________________________|______________________________|_______|________|______________|
    // | NormalToPressed_Start      | M_NormalToPressed_Start      |     0 |    0.0 | 0F           |
    // | NormalToPressed_End        | M_NormalToPressed_End        |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_Start | M_PointerOverToPressed_Start |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    19 |  791.7 | 0.680357158F |
    // | PressedToNormal_Start      | M_PressedToNormal_Start      |    20 |  833.3 | 0.716071427F |
    // | PressedToNormal_End        | M_PressedToNormal_End        |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    28 | 1166.7 | 1F           |
    // ---------------------------------------------------------------------------------------------
    sealed partial class Spinner
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 1.167 seconds.
        internal const long c_durationTicks = 11666666;

        // Marker: NormalToPressed_Start.
        internal const float M_NormalToPressed_Start = 0F;

        // Marker: NormalToPressed_End.
        internal const float M_NormalToPressed_End = 0.323214293F;

        // Marker: PointerOverToPressed_Start.
        internal const float M_PointerOverToPressed_Start = 0.323214293F;

        // Marker: PointerOverToPressed_End.
        internal const float M_PointerOverToPressed_End = 0.680357158F;

        // Marker: PressedToNormal_Start.
        internal const float M_PressedToNormal_Start = 0.716071427F;

        // Marker: PressedToNormal_End.
        internal const float M_PressedToNormal_End = 1F;

        // Marker: PressedToPointerOver_Start.
        internal const float M_PressedToPointerOver_Start = 1F;

        // Marker: PressedToPointerOver_End.
        internal const float M_PressedToPointerOver_End = 1F;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            var res = 
                new Spinner_AnimatedVisual(
                    compositor
                    );
                res.CreateAnimations();
                return res;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 28d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 24d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(11666666);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 28d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPressed_Start", 0d },
                { "NormalToPressed_End", 0.323214285714286 },
                { "PointerOverToPressed_Start", 0.323214285714286 },
                { "PointerOverToPressed_End", 0.680357142857143 },
                { "PressedToNormal_Start", 0.716071428571429 },
                { "PressedToNormal_End", 1d },
                { "PressedToPointerOver_Start", 1d },
                { "PressedToPointerOver_End", 1d },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class Spinner_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 11666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            CompositionColorBrush _colorBrush_AlmostDimGray_FF546E7A;
            CompositionColorBrush _colorBrush_White;
            CompositionContainerShape _containerShape;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            StepEasingFunction _holdThenStepEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // - - - - Layer aggregator
            // - - Transforms: Spinner
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(17.5049992F, 5.65399981F));
                    builder.AddCubicBezier(new Vector2(16.5119991F, 4.82999992F), new Vector2(15.3929996F, 4.329F), new Vector2(14.2510004F, 4.12099981F));
                    builder.AddCubicBezier(new Vector2(14.052F, 4.08500004F), new Vector2(13.835F, 4.03700018F), new Vector2(13.6049995F, 3.98000002F));
                    builder.AddCubicBezier(new Vector2(8.07600021F, 2.60700011F), new Vector2(4.79799986F, -3.23900008F), new Vector2(6.60099983F, -8.64299965F));
                    builder.AddCubicBezier(new Vector2(6.61000013F, -8.67099953F), new Vector2(6.61999989F, -8.69900036F), new Vector2(6.62900019F, -8.72599983F));
                    builder.AddCubicBezier(new Vector2(7.0079999F, -9.82299995F), new Vector2(7.12099981F, -11.0439997F), new Vector2(6.89099979F, -12.3140001F));
                    builder.AddCubicBezier(new Vector2(6.38800001F, -15.085F), new Vector2(4.17600012F, -17.3349991F), new Vector2(1.40999997F, -17.8710003F));
                    builder.AddCubicBezier(new Vector2(-3.06999993F, -18.7390003F), new Vector2(-6.99100018F, -15.3310003F), new Vector2(-6.99100018F, -11.007F));
                    builder.AddCubicBezier(new Vector2(-6.99100018F, -10.1599998F), new Vector2(-6.84000015F, -9.34799957F), new Vector2(-6.56400013F, -8.59700012F));
                    builder.AddCubicBezier(new Vector2(-6.4460001F, -8.27700043F), new Vector2(-6.33300018F, -7.88800001F), new Vector2(-6.22599983F, -7.45300007F));
                    builder.AddCubicBezier(new Vector2(-4.95200014F, -2.31100011F), new Vector2(-8.14700031F, 3.01900005F), new Vector2(-13.3549995F, 3.98900008F));
                    builder.AddCubicBezier(new Vector2(-13.5F, 4.01599979F), new Vector2(-13.6370001F, 4.03700018F), new Vector2(-13.7650003F, 4.05100012F));
                    builder.AddCubicBezier(new Vector2(-15.007F, 4.1869998F), new Vector2(-16.2399998F, 4.66200018F), new Vector2(-17.3309994F, 5.51300001F));
                    builder.AddCubicBezier(new Vector2(-19.6159992F, 7.29500008F), new Vector2(-20.5750008F, 10.4099998F), new Vector2(-19.6580009F, 13.1590004F));
                    builder.AddCubicBezier(new Vector2(-18.2140007F, 17.4880009F), new Vector2(-13.3199997F, 19.2299995F), new Vector2(-9.55300045F, 17.1060009F));
                    builder.AddCubicBezier(new Vector2(-8.81499958F, 16.6900005F), new Vector2(-8.18200016F, 16.1599998F), new Vector2(-7.66400003F, 15.5500002F));
                    builder.AddCubicBezier(new Vector2(-7.57700014F, 15.4469995F), new Vector2(-7.47900009F, 15.3400002F), new Vector2(-7.37200022F, 15.2279997F));
                    builder.AddCubicBezier(new Vector2(-3.39499998F, 11.0629997F), new Vector2(3.38800001F, 11.0629997F), new Vector2(7.36499977F, 15.2279997F));
                    builder.AddCubicBezier(new Vector2(7.47200012F, 15.3400002F), new Vector2(7.57000017F, 15.448F), new Vector2(7.65700006F, 15.5500002F));
                    builder.AddCubicBezier(new Vector2(8.17599964F, 16.1590004F), new Vector2(8.80799961F, 16.6900005F), new Vector2(9.54599953F, 17.1060009F));
                    builder.AddCubicBezier(new Vector2(13.3129997F, 19.2290001F), new Vector2(18.2070007F, 17.4880009F), new Vector2(19.6509991F, 13.1590004F));
                    builder.AddCubicBezier(new Vector2(20.5459995F, 10.4849997F), new Vector2(19.6730003F, 7.45300007F), new Vector2(17.5049992F, 5.65399981F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - Transforms: Spinner
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, -15F));
                    builder.AddCubicBezier(new Vector2(2.20900011F, -15F), new Vector2(4F, -13.2089996F), new Vector2(4F, -11F));
                    builder.AddCubicBezier(new Vector2(4F, -8.79100037F), new Vector2(2.20900011F, -7F), new Vector2(0F, -7F));
                    builder.AddCubicBezier(new Vector2(-2.20900011F, -7F), new Vector2(-4F, -8.79100037F), new Vector2(-4F, -11F));
                    builder.AddCubicBezier(new Vector2(-4F, -13.2089996F), new Vector2(-2.20900011F, -15F), new Vector2(0F, -15F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - Transforms: Spinner
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-13F, 7F));
                    builder.AddCubicBezier(new Vector2(-10.7910004F, 7F), new Vector2(-9F, 8.79100037F), new Vector2(-9F, 11F));
                    builder.AddCubicBezier(new Vector2(-9F, 13.2089996F), new Vector2(-10.7910004F, 15F), new Vector2(-13F, 15F));
                    builder.AddCubicBezier(new Vector2(-15.2089996F, 15F), new Vector2(-17F, 13.2089996F), new Vector2(-17F, 11F));
                    builder.AddCubicBezier(new Vector2(-17F, 8.79100037F), new Vector2(-15.2089996F, 7F), new Vector2(-13F, 7F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - Transforms: Spinner
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(13F, 7F));
                    builder.AddCubicBezier(new Vector2(15.2089996F, 7F), new Vector2(17F, 8.79100037F), new Vector2(17F, 11F));
                    builder.AddCubicBezier(new Vector2(17F, 13.2089996F), new Vector2(15.2089996F, 15F), new Vector2(13F, 15F));
                    builder.AddCubicBezier(new Vector2(10.7910004F, 15F), new Vector2(9F, 13.2089996F), new Vector2(9F, 11F));
                    builder.AddCubicBezier(new Vector2(9F, 8.79100037F), new Vector2(10.7910004F, 7F), new Vector2(13F, 7F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 1
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, -2F));
                    builder.AddCubicBezier(new Vector2(2.76099992F, -2F), new Vector2(5F, 0.238999993F), new Vector2(5F, 3F));
                    builder.AddCubicBezier(new Vector2(5F, 5.76100016F), new Vector2(2.76099992F, 8F), new Vector2(0F, 8F));
                    builder.AddCubicBezier(new Vector2(-2.76099992F, 8F), new Vector2(-5F, 5.76100016F), new Vector2(-5F, 3F));
                    builder.AddCubicBezier(new Vector2(-5F, 0.238999993F), new Vector2(-2.76099992F, -2F), new Vector2(0F, -2F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostDimGray_FF546E7A()
            {
                return (_colorBrush_AlmostDimGray_FF546E7A == null)
                    ? _colorBrush_AlmostDimGray_FF546E7A = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x54, 0x6E, 0x7A))
                    : _colorBrush_AlmostDimGray_FF546E7A;
            }

            // - - Layer aggregator
            // ShapeGroup: Group 1
            CompositionColorBrush ColorBrush_AlmostDodgerBlue_FF0288D1()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x02, 0x88, 0xD1));
            }

            // - - Layer aggregator
            // Transforms: Spinner
            CompositionColorBrush ColorBrush_AlmostDodgerBlue_FF29B6F6()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x29, 0xB6, 0xF6));
            }

            CompositionColorBrush ColorBrush_White()
            {
                return (_colorBrush_White == null)
                    ? _colorBrush_White = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF))
                    : _colorBrush_White;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape()
            {
                if (_containerShape != null) { return _containerShape; }
                var result = _containerShape = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 3F);
                var shapes = result.Shapes;
                // Transforms: Spinner
                shapes.Add(SpriteShape_0());
                // Transforms: Spinner
                shapes.Add(SpriteShape_1());
                // Transforms: Spinner
                shapes.Add(SpriteShape_2());
                // Transforms: Spinner
                shapes.Add(SpriteShape_3());
                // ShapeGroup: Group 1
                shapes.Add(SpriteShape_4());
                return result;
            }

            // - - Layer aggregator
            // Transforms: Spinner
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - Layer aggregator
            // Transforms: Spinner
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - - Layer aggregator
            // Transforms: Spinner
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // - - Layer aggregator
            // Transforms: Spinner
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 1
            CompositionPathGeometry PathGeometry_4()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_4()));
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = ColorBrush_AlmostDodgerBlue_FF29B6F6();
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = ColorBrush_White();
                result.StrokeBrush = ColorBrush_AlmostDimGray_FF546E7A();
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.FillBrush = ColorBrush_White();
                result.StrokeBrush = ColorBrush_AlmostDimGray_FF546E7A();
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                var result = _c.CreateSpriteShape(PathGeometry_3());
                result.FillBrush = ColorBrush_White();
                result.StrokeBrush = ColorBrush_AlmostDimGray_FF546E7A();
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                var result = _c.CreateSpriteShape(PathGeometry_4());
                result.FillBrush = ColorBrush_AlmostDodgerBlue_FF0288D1();
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F))
                    : _cubicBezierEasingFunction_1;
            }

            // - Layer aggregator
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_360()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 28.
                result.InsertKeyFrame(1F, 360F, _c.CreateCubicBezierEasingFunction(new Vector2(0.602999985F, 0F), new Vector2(0.389999986F, 1F)));
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                result.Shapes.Add(ContainerShape());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // - - Layer aggregator
            // Scale
            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Layer aggregator
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(24F, 24F), HoldThenStepEasingFunction());
                // Frame 14.
                result.InsertKeyFrame(0.5F, new Vector2(24F, 22F), CubicBezierEasingFunction_1());
                // Frame 28.
                result.InsertKeyFrame(1F, new Vector2(24F, 24F), CubicBezierEasingFunction_1());
                return result;
            }

            // - Layer aggregator
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 2.
                result.InsertKeyFrame(0.0714285746F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.285714298F, new Vector2(0.949999988F, 0.949999988F), CubicBezierEasingFunction_0());
                // Frame 20.
                result.InsertKeyFrame(0.714285731F, new Vector2(0.949999988F, 0.949999988F), CubicBezierEasingFunction_0());
                // Frame 26.
                result.InsertKeyFrame(0.928571403F, new Vector2(1F, 1F), CubicBezierEasingFunction_0());
                return result;
            }

            internal Spinner_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(48F, 48F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_360(), AnimationController_0());
                _containerShape.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
                _containerShape.StartAnimation("Offset", OffsetVector2Animation(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _containerShape.StopAnimation("RotationAngleInDegrees");
                _containerShape.StopAnimation("Scale");
                _containerShape.StopAnimation("Offset");
            }

        }
    }
}
