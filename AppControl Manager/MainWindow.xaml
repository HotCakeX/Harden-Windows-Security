<?xml version="1.0" encoding="utf-8"?>
<Window
    x:Class="AppControlManager.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:WindowComponents="using:AppControlManager.WindowComponents"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="using:CommunityToolkit.WinUI"
    xmlns:controls="using:CommunityToolkit.WinUI.Controls"
    xmlns:animations="using:CommunityToolkit.WinUI.Animations"
    xmlns:AnimatedVisuals="using:Microsoft.UI.Xaml.Controls.AnimatedVisuals"
    mc:Ignorable="d"
    SizeChanged="{x:Bind ViewModel.MainWindow_SizeChanged}"
    xmlns:animatedvisuals="using:AnimatedVisuals"
    SystemBackdrop="{x:Bind ViewModel.SystemBackDropStyle, Mode=OneWay}"
    Title="AppControl Manager">

    <Grid x:Name="RootGrid" FlowDirection="{x:Bind ViewModel.AppSettings.ApplicationGlobalFlowDirection, Mode=OneWay}">

        <Grid.RowDefinitions>
            <!-- Titlebar Row -->
            <RowDefinition Height="Auto"/>
            <!-- NavigationView Row -->
            <RowDefinition/>
        </Grid.RowDefinitions>

        <Grid.Resources>
            <!-- For the BreadCrumbBar's size -->
            <x:Double x:Key="BreadcrumbBarChevronFontSize">30</x:Double>

            <!-- Theme Shadow effect used on certain elements inside of the grid -->
            <!-- https://learn.microsoft.com/windows/apps/design/layout/depth-shadow -->
            <ThemeShadow x:Name="SharedShadow" />

        </Grid.Resources>

        <!-- When using this, we shouldn't set PaneDisplayMode="" property on the navigation element itself or set that property to anything other than Auto, otherwise these dynamic triggers won't work on it. -->
        <!-- Also apparently there are hardcoded minimum width that do not allow for smaller MinWindowWidth to be set for the triggers below and they are overriden when it happens -->

        <!-- VisualStateManager for responsive layout of the NavigationView -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <!-- Very narrow window state -->
                <VisualState x:Name="DefaultState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="MainNavigation.PaneDisplayMode" Value="Top" />
                    </VisualState.Setters>
                </VisualState>

                <!-- Narrow window state -->
                <VisualState x:Name="NarrowState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="200" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="MainNavigation.PaneDisplayMode" Value="LeftCompact" />
                    </VisualState.Setters>
                </VisualState>

                <!-- Wide window state -->
                <VisualState x:Name="WideState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="400" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="MainNavigation.PaneDisplayMode" Value="Left" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <!-- Titlebar -->
        <!-- https://learn.microsoft.com/windows/apps/develop/title-bar#full-customization-example -->
        <Grid x:Name="AppTitleBar"
              Loaded="{x:Bind SetRegionsForCustomTitleBar}"
              SizeChanged="{x:Bind SetRegionsForCustomTitleBar}"
              Height="48"
              AutomationProperties.LandmarkType="Custom"
              AutomationProperties.LocalizedLandmarkType="Title Bar"
              Grid.Row="0">

            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="LeftPaddingColumn" Width="0"/>
                <ColumnDefinition x:Name="BackButtonColumn" Width="Auto"/>
                <ColumnDefinition x:Name="HamburgerMenuButtonColumn" Width="Auto"/>
                <ColumnDefinition x:Name="IconColumn" Width="Auto"/>
                <ColumnDefinition Width="{x:Bind ViewModel.TitleColumnWidth, Mode=OneWay}" />
                <ColumnDefinition x:Name="LeftDragColumn" Width="*"/>
                <ColumnDefinition x:Name="SearchColumn" Width="3*"/>
                <ColumnDefinition x:Name="RightDragColumn" Width="*" />
                <ColumnDefinition x:Name="AccountColumn" Width="Auto"/>
                <ColumnDefinition x:Name="RightPaddingColumn" Width="0"/>
            </Grid.ColumnDefinitions>

            <!-- Back button style, mimics the same NavigationView back button's style. If the style isn't set here, we can use the built-in animated icon for the back button -->
            <Button x:Name="BackButtonTitleBar"
                    Style="{StaticResource NavigationBackButtonNormalStyle}"
                    Grid.Column="1"
                    Click="{x:Bind Nav.BackButtonTitleBar_Click}" />

            <!-- Menu button style, mimics the same NavigationView menu (hamburger) button's style. If the style isn't set here, we can use the built-in animated icon for the menu (hamburger) button -->
            <Button VerticalAlignment="Center"
                    VerticalContentAlignment="Center"
                    x:Name="HamburgerMenuButton"
                    Grid.Column="2"
                    Style="{StaticResource PaneToggleButtonStyle}"
                    Margin="10,0,0,0"
                    Click="{x:Bind ViewModel.HamburgerMenuButton_Click}" />

            <!-- App icon -->
            <Image x:Name="TitleBarIcon" Source="ms-appx:///Assets/StoreLogo.png" Grid.Column="3"
                Width="16" Height="16"
                Margin="8,0,4,0"/>

            <!-- App title bar -->
            <TextBlock x:Name="TitleBarTextBlock"
                       Style="{StaticResource CaptionTextBlockStyle}"
                       Grid.Column="4"
                       VerticalAlignment="Center" />

            <!-- Main search area at the top -->
            <AutoSuggestBox x:Name="TitleBarSearchBox"
                            Grid.Column="6"
                            QueryIcon="Find"
                            VerticalAlignment="Center"
                            MaxWidth="600"
                            AutomationProperties.LandmarkType="Search"
                            TextChanged="{x:Bind Nav.SearchBox_TextChanged}"
                            SuggestionChosen="{x:Bind Nav.SearchBox_SuggestionChosen}"
                            x:Uid="MainSearchAutoSuggestBox" Margin="0"/>

            <!-- Sidebar access point -->
            <Button x:Name="SidebarButton"
                    Click="{x:Bind ViewModel.SidebarButton_Click}"
                    Grid.Column="8"
                    Height="32"
                    Margin="5,0,30,0"
                    Background="Transparent"
                    BorderThickness="0">

                <Button.Content>
                    <controls:WrapPanel Orientation="Horizontal">

                        <AnimatedIcon Height="35" Width="35" Margin="-9,-9,-9,-9">
                            <AnimatedIcon.Source>
                                <animatedvisuals:Sidebar/>
                            </AnimatedIcon.Source>
                        </AnimatedIcon>

                    </controls:WrapPanel>
                </Button.Content>

            </Button>

        </Grid>

        <!-- Doc: https://learn.microsoft.com/windows/apps/design/controls/navigationview -->
        <NavigationView x:Name="MainNavigation"
                        FlowDirection="{x:Bind ViewModel.AppSettings.ApplicationGlobalFlowDirection, Mode=OneWay}"
                        IsTabStop="True"
                        IsPaneOpen="{x:Bind ViewModel.MainNavigationIsPaneOpen, Mode=TwoWay}"
                        ItemInvoked="{x:Bind Nav.MainNavigation_ItemInvoked}"
                        IsBackButtonVisible="Collapsed"
                        IsBackEnabled="False"
                        AlwaysShowHeader="False"
                        AutomationProperties.LandmarkType="Navigation"
                        Grid.Row="1"
                        Margin="{x:Bind ViewModel.NavViewMargin, Mode=OneWay}"
                        SelectedItem="{x:Bind ViewModel.NavViewSelectedItem, Mode=TwoWay}"
                        IsTitleBarAutoPaddingEnabled="False"
                        IsPaneToggleButtonVisible="False">

            <!--
             Being controlled from MainWindow.xaml.cs

            <NavigationView.Resources>
                <SolidColorBrush x:Key="NavigationViewContentBackground" Color="Transparent" />
            </NavigationView.Resources>

            -->

            <!--
            Used in the Titlebar

            <NavigationView.AutoSuggestBox>
                <AutoSuggestBox x:Name="SearchBox"
                        QueryIcon="Find"
                        TextChanged="SearchBox_TextChanged"
                        SuggestionChosen="SearchBox_SuggestionChosen"
                        PlaceholderText="Search menu items..."/>
            </NavigationView.AutoSuggestBox>

           -->

            <!--
            <NavigationView.PaneCustomContent>
                <HyperlinkButton x:Name="PaneHyperlink" Content="More info" Margin="12,0" Visibility="Visible" />
            </NavigationView.PaneCustomContent>
            -->

            <NavigationView.MenuItems>
                <!-- Creation Group -->
                <NavigationViewItemHeader x:Name="CreationNavigationViewItemHeader" x:Uid="CreationNavigationViewItemHeader" />
                <NavigationViewItem x:Name="CreatePolicyNavItem" x:Uid="CreatePolicyNavItem" Icon="{x:Bind ViewModel.CreatePolicyIcon, Mode=OneWay}" Tag="CreatePolicy" />
                <NavigationViewItem x:Name="CreateSupplementalPolicyNavItem" x:Uid="CreateSupplementalPolicyNavItem" Icon="{x:Bind ViewModel.CreateSupplementalPolicyIcon, Mode=OneWay}" Tag="CreateSupplementalPolicy" />
                <NavigationViewItem x:Name="CreateDenyPolicyNavItem" x:Uid="CreateDenyPolicyNavItem" Icon="{x:Bind ViewModel.CreateDenyPolicyIcon, Mode=OneWay}" Tag="CreateDenyPolicy" />

                <!-- Certificates Group -->
                <NavigationViewItemHeader x:Name="CertificatesNavigationViewItemHeader" x:Uid="CertificatesNavigationViewItemHeader"/>
                <NavigationViewItem x:Name="BuildNewCertificateNavItem" x:Uid="BuildNewCertificateNavItem" Icon="{x:Bind ViewModel.BuildNewCertificateIcon, Mode=OneWay}" Tag="BuildNewCertificate" />
                <NavigationViewItem x:Name="ViewFileCertificatesNavItem" x:Uid="ViewFileCertificatesNavItem" Icon="{x:Bind ViewModel.ViewFileCertificatesIcon, Mode=OneWay}" Tag="ViewFileCertificates" />

                <!-- Logs Processing Group -->
                <NavigationViewItemHeader x:Name="LogsProcessingNavigationViewItemHeader" x:Uid="LogsProcessingNavigationViewItemHeader"/>
                <NavigationViewItem x:Name="CreatePolicyFromEventLogsNavItem" x:Uid="CreatePolicyFromEventLogsNavItem" Icon="{x:Bind ViewModel.CreatePolicyFromEventLogsIcon, Mode=OneWay}" Tag="CreatePolicyFromEventLogs" />
                <NavigationViewItem x:Name="CreatePolicyFromMDEAHNavItem" x:Uid="CreatePolicyFromMDEAHNavItem" Icon="{x:Bind ViewModel.CreatePolicyFromMDEAHIcon, Mode=OneWay}" Tag="CreatePolicyFromMDEAH" />

                <!-- Tactical Group -->
                <NavigationViewItemHeader x:Name="TacticalNavigationViewItemHeader" x:Uid="TacticalNavigationViewItemHeader"/>
                <NavigationViewItem x:Name="AllowNewAppsNavItem" x:Uid="AllowNewAppsNavItem" Icon="{x:Bind ViewModel.AllowNewAppsIcon, Mode=OneWay}" Tag="AllowNewApps" />
                <NavigationViewItem x:Name="PolicyEditorNavItem" x:Uid="PolicyEditorNavItem" Icon="{x:Bind ViewModel.PolicyEditorIcon, Mode=OneWay}" Tag="PolicyEditor" />
                <NavigationViewItem x:Name="SimulationNavItem" x:Uid="SimulationNavItem" Icon="{x:Bind ViewModel.SimulationIcon, Mode=OneWay}" Tag="Simulation" />

                <!-- Info Gathering Group -->
                <NavigationViewItemHeader x:Name="InfoGatheringNavigationViewItemHeader" x:Uid="InfoGatheringNavigationViewItemHeader"/>
                <NavigationViewItem x:Name="SystemInformationNavItem" x:Uid="SystemInformationNavItem" Icon="{x:Bind ViewModel.SystemInformationIcon, Mode=OneWay}" Tag="SystemInformation" />
                <NavigationViewItem x:Name="GetCodeIntegrityHashesNavItem" x:Uid="GetCodeIntegrityHashesNavItem" Icon="{x:Bind ViewModel.GetCodeIntegrityHashesIcon, Mode=OneWay}" Tag="GetCodeIntegrityHashes" />
                <NavigationViewItem x:Name="GetSecurePolicySettingsNavItem" x:Uid="GetSecurePolicySettingsNavItem" Icon="{x:Bind ViewModel.GetSecurePolicySettingsIcon, Mode=OneWay}" Tag="GetSecurePolicySettings" />

                <!-- Policy Management Group -->
                <NavigationViewItemHeader x:Name="PolicyManagementNavigationViewItemHeader" x:Uid="PolicyManagementNavigationViewItemHeader"/>
                <NavigationViewItem x:Name="ConfigurePolicyRuleOptionsNavItem" x:Uid="ConfigurePolicyRuleOptionsNavItem" Icon="{x:Bind ViewModel.ConfigurePolicyRuleOptionsIcon, Mode=OneWay}" Tag="ConfigurePolicyRuleOptions" />
                <NavigationViewItem x:Name="MergePoliciesNavItem" x:Uid="MergePoliciesNavItem" Icon="{x:Bind ViewModel.MergePoliciesIcon, Mode=OneWay}" Tag="MergePolicies" />
                <NavigationViewItem x:Name="DeploymentNavItem" x:Uid="DeploymentNavItem" Icon="{x:Bind ViewModel.DeploymentIcon, Mode=OneWay}" Tag="Deployment" />
                <NavigationViewItem x:Name="ValidatePoliciesNavItem" x:Uid="ValidatePoliciesNavItem" Icon="{x:Bind ViewModel.ValidatePoliciesIcon, Mode=OneWay}" Tag="ValidatePolicies" />

                <!-- Documentation Group -->
                <NavigationViewItemHeader x:Name="DocumentationNavigationViewItemHeader" x:Uid="DocumentationNavigationViewItemHeader"/>
                <NavigationViewItem x:Name="GitHubDocsNavItem" x:Uid="GitHubDocsNavItem" Icon="{x:Bind ViewModel.GitHubDocsIcon, Mode=OneWay}" Tag="GitHubDocs" />
                <NavigationViewItem x:Name="MSFTDocsNavItem" x:Uid="MSFTDocsNavItem" Icon="{x:Bind ViewModel.MSFTDocsIcon, Mode=OneWay}" Tag="MSFTDocs" />

                <NavigationViewItemSeparator/>

                <NavigationViewItem x:Name="LogsNavItem" x:Uid="LogsNavItem" Icon="{x:Bind ViewModel.LogsIcon, Mode=OneWay}" Tag="Logs" />
            </NavigationView.MenuItems>

            <NavigationView.FooterMenuItems>
                <NavigationViewItem x:Name="UpdateNavItem" x:Uid="UpdateNavItem" Icon="{x:Bind ViewModel.UpdateIcon, Mode=OneWay}" Tag="Update">
                    <NavigationViewItem.InfoBadge>
                        <InfoBadge Opacity="{x:Bind ViewModel.InfoBadgeOpacity, Mode=OneWay}"
                               Style="{ThemeResource AttentionIconInfoBadgeStyle}">
                            <InfoBadge.IconSource>
                                <FontIconSource Glyph="&#xEA6A;"/>
                            </InfoBadge.IconSource>
                        </InfoBadge>
                    </NavigationViewItem.InfoBadge>
                </NavigationViewItem>
            </NavigationView.FooterMenuItems>

            <!-- Split view to create the sidebar -->
            <SplitView PaneBackground="Transparent"
                       IsPaneOpen="{x:Bind ViewModel.SidebarPaneIsOpen, Mode=TwoWay}"
                       OpenPaneLength="256"
                       CompactPaneLength="48"
                       DisplayMode="Inline"
                       PanePlacement="Right"
                       AutomationProperties.LandmarkType="Custom"
                       AutomationProperties.LocalizedLandmarkType="Sidebar">

                <SplitView.Pane>
                    <Border BorderThickness="1"
                            Background="{ThemeResource CardBackgroundFillColorDefaultBrush}"
                            BorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                            CornerRadius="5">

                        <ScrollViewer>

                            <controls:WrapPanel HorizontalSpacing="20" VerticalSpacing="20" Orientation="Vertical" Margin="10,0,10,0" HorizontalAlignment="Center">

                                <TextBlock x:Name="SidebarTextBlock" x:Uid="SidebarTextBlock" Style="{ThemeResource TitleTextBlockStyle}" HorizontalAlignment="Center" Margin="0,15,0,0" HorizontalTextAlignment="Center"/>

                                <TextBlock x:Name="SidebarMainCaptionTextBlock" x:Uid="SidebarMainCaptionTextBlock" Style="{ThemeResource CaptionTextBlockStyle}" HorizontalAlignment="Center" HorizontalTextAlignment="Center"/>

                                <Border Translation="{x:Bind ViewModel.BorderTranslation, Mode=OneWay}" BorderThickness="1" CornerRadius="15" Shadow="{StaticResource SharedShadow}">

                                    <Border.BorderBrush>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                            <GradientStop Color="HotPink" Offset="0" />
                                            <GradientStop Color="Wheat" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.BorderBrush>

                                    <controls:WrapPanel HorizontalSpacing="10" VerticalSpacing="15" Orientation="Vertical" Padding="20" Margin="5" HorizontalAlignment="Center" VerticalAlignment="Center">

                                        <TextBlock TextWrapping="WrapWholeWords" HorizontalAlignment="Center" x:Name="SidebarPinnedPolicyPathTextBlock" x:Uid="SidebarPinnedPolicyPathTextBlock" Style="{ThemeResource BodyStrongTextBlockStyle}" />

                                        <TextBox IsReadOnly="True"
                                                 Text="{x:Bind ViewModel.SidebarBasePolicyPathTextBoxText, Mode=OneWay}"
                                                 x:Name="SidebarPolicyPathPlaceHolder" x:Uid="SidebarPolicyPathPlaceHolder" TextWrapping="Wrap"
                                                 Width="150" />

                                        <Button x:Name="SidebarBrowseButton" x:Uid="SidebarBrowseButton" HorizontalAlignment="Center" Click="{x:Bind Nav.SidebarBasePolicyBrowseButton_Click}" Style="{ThemeResource AccentButtonStyle}">
                                            <Button.Content>
                                                <StackPanel Orientation="Horizontal">
                                                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
                                                        <FontIcon Glyph="&#xE8E5;" Margin="0,0,8,0" />
                                                        <TextBlock x:Name="BrowseTextBlock" x:Uid="BrowseTextBlock"/>
                                                    </StackPanel>
                                                </StackPanel>
                                            </Button.Content>
                                        </Button>

                                        <Button x:Name="SidebarClearButton" x:Uid="SidebarClearButton" HorizontalAlignment="Center" Click="{x:Bind Nav.SidebarBasePolicyClearButton_Click}" Style="{ThemeResource AccentButtonStyle}">
                                            <Button.Content>
                                                <StackPanel Orientation="Horizontal">
                                                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
                                                        <FontIcon Glyph="&#xE8E6;" Margin="0,0,8,0" />
                                                        <TextBlock x:Name="ClearTextBlock" x:Uid="ClearTextBlock"/>
                                                    </StackPanel>
                                                </StackPanel>
                                            </Button.Content>
                                        </Button>

                                        <Button x:Name="SidebarPolicySelectAssignmentButton" x:Uid="SidebarPolicySelectAssignmentButton" HorizontalAlignment="Center">
                                            <Button.Content>
                                                <controls:WrapPanel Orientation="Horizontal">

                                                    <AnimatedIcon Height="20" Margin="0,0,5,0" Width="20" Visibility="{x:Bind sidebarVM.SidebarBasePolicySelectButtonLightAnimatedIconVisibility, Mode=OneWay}">
                                                        <AnimatedIcon.Source>
                                                            <animatedvisuals:Light/>
                                                        </AnimatedIcon.Source>
                                                    </AnimatedIcon>

                                                    <TextBlock x:Name="SelectTextBlock" x:Uid="SelectTextBlock" />

                                                </controls:WrapPanel>
                                            </Button.Content>

                                            <Button.Flyout>
                                                <Flyout Placement="Bottom">
                                                    <StackPanel Orientation="Vertical" Spacing="10">
                                                        <Button HorizontalAlignment="Stretch" Content="{x:Bind sidebarVM.SidebarPolicyConnect1Content, Mode=OneWay}" Visibility="{x:Bind sidebarVM.SidebarPolicyConnect1Visibility, Mode=OneWay}" Command="{x:Bind sidebarVM.SidebarPolicyConnect1Command, Mode=OneWay}" />
                                                        <Button HorizontalAlignment="Stretch" Content="{x:Bind sidebarVM.SidebarPolicyConnect2Content, Mode=OneWay}" Visibility="{x:Bind sidebarVM.SidebarPolicyConnect2Visibility, Mode=OneWay}" Command="{x:Bind sidebarVM.SidebarPolicyConnect2Command, Mode=OneWay}" />
                                                        <Button HorizontalAlignment="Stretch" Content="{x:Bind sidebarVM.SidebarPolicyConnect3Content, Mode=OneWay}" Visibility="{x:Bind sidebarVM.SidebarPolicyConnect3Visibility, Mode=OneWay}" Command="{x:Bind sidebarVM.SidebarPolicyConnect3Command, Mode=OneWay}" />
                                                        <Button HorizontalAlignment="Stretch" Content="{x:Bind sidebarVM.SidebarPolicyConnect4Content, Mode=OneWay}" Visibility="{x:Bind sidebarVM.SidebarPolicyConnect4Visibility, Mode=OneWay}" Command="{x:Bind sidebarVM.SidebarPolicyConnect4Command, Mode=OneWay}" />
                                                        <Button HorizontalAlignment="Stretch" Content="{x:Bind sidebarVM.SidebarPolicyConnect5Content, Mode=OneWay}" Visibility="{x:Bind sidebarVM.SidebarPolicyConnect5Visibility, Mode=OneWay}" Command="{x:Bind sidebarVM.SidebarPolicyConnect5Command, Mode=OneWay}" />
                                                        <Button HorizontalAlignment="Stretch" Content="{x:Bind sidebarVM.SidebarPolicyConnect6Content, Mode=OneWay}" Visibility="{x:Bind sidebarVM.SidebarPolicyConnect6Visibility, Mode=OneWay}" Command="{x:Bind sidebarVM.SidebarPolicyConnect6Command, Mode=OneWay}" />
                                                    </StackPanel>
                                                </Flyout>
                                            </Button.Flyout>
                                        </Button>

                                    </controls:WrapPanel>

                                </Border>

                                <controls:SettingsCard HorizontalContentAlignment="Center"
                                                       x:Name="SidebarAutomaticAssignmentSettingsCard"
                                                       x:Uid="SidebarAutomaticAssignmentSettingsCard"
                                                       Click="{x:Bind ViewModel.AutomaticAssignmentSidebarSettingsCard_Click}"
                                                       HeaderIcon="{ui:FontIcon Glyph=&#xF32A;}"
                                                       IsClickEnabled="True"
                                                       IsActionIconVisible="False">

                                    <ToggleSwitch Toggled="{x:Bind ViewModel.AutomaticAssignmentSidebarToggleSwitch_Toggled}"
                                                  x:Uid="ToggleSwitchGeneral"
                                                  x:Name="AutomaticAssignmentSidebarToggleSwitch"
                                                  IsOn="{x:Bind ViewModel.AutomaticAssignmentSidebarToggleSwitchToggledState, Mode=TwoWay}"/>
                                </controls:SettingsCard>

                                <HyperlinkButton x:Name="SidebarGuideHyperlinkButton"
                                                 x:Uid="SidebarGuideHyperlinkButton"
                                                 HorizontalAlignment="Center"
                                                 NavigateUri="https://github.com/HotCakeX/Harden-Windows-Security/wiki/Sidebar"
                                                 Padding="12,8"
                                                 CornerRadius="6"
                                                 Background="{ThemeResource CardBackgroundFillColorDefaultBrush}"
                                                 BorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                                                 BorderThickness="1"/>

                                <HyperlinkButton x:Name="SidebarHelpHyperlinkButton"
                                                 HorizontalAlignment="Center"
                                                 NavigateUri="https://github.com/HotCakeX/Harden-Windows-Security/discussions"
                                                 Padding="12,8"
                                                 CornerRadius="6"
                                                 Background="{ThemeResource CardBackgroundFillColorDefaultBrush}"
                                                 BorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                                                 BorderThickness="1">
                                    <StackPanel Orientation="Horizontal" Spacing="8">
                                        <FontIcon Glyph="&#xE9CE;"
                                                  Foreground="Gold"
                                                  FontSize="16"/>
                                        <TextBlock x:Uid="SidebarHelpHyperlinkTextBlock"
                                                   x:Name="SidebarHelpHyperlinkTextBlock"
                                                   VerticalAlignment="Center"
                                                   FontWeight="SemiBold"/>
                                    </StackPanel>
                                </HyperlinkButton>

                                <Button HorizontalAlignment="Center"
                                        x:Name="OpenConfigDirectoryButton"
                                        x:Uid="OpenConfigDirectoryButton"
                                        IsEnabled="{x:Bind ViewModel.OpenConfigDirectoryButtonState, Mode=OneWay}"
                                        Click="{x:Bind ViewModel.OpenConfigDirectoryButton_Click}">
                                    <Button.Content>
                                        <StackPanel Orientation="Horizontal">
                                            <StackPanel Orientation="Horizontal"
                                                        VerticalAlignment="Center"
                                                        HorizontalAlignment="Center">
                                                <FontIcon Glyph="&#xE8A7;" Margin="0,0,8,0" />
                                                <TextBlock x:Name="OpenConfigDirectoryButtonText"
                                                           x:Uid="OpenConfigDirectoryButtonText"/>
                                            </StackPanel>
                                        </StackPanel>
                                    </Button.Content>
                                </Button>

                            </controls:WrapPanel>

                        </ScrollViewer>

                    </Border>
                </SplitView.Pane>

                <!-- The area where the main window content are displayed -->
                <Grid>

                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <!-- BreadCrumBar that that also acts as a sticky header -->
                    <BreadcrumbBar VerticalAlignment="Top"
                                   Grid.Row="0"
                                   Padding="10"
                                   AutomationProperties.LandmarkType="Custom"
                                   AutomationProperties.LocalizedLandmarkType="Bread Crumb Bar Navigation and Page Title"
                                   Margin="20,10,0,10"
                                   ItemsSource="{x:Bind ViewModel.Breadcrumbs}"
                                   ItemClicked="{x:Bind Nav.BreadcrumbBar_ItemClicked}">

                        <BreadcrumbBar.ItemTemplate>
                            <DataTemplate x:DataType="WindowComponents:Crumb">
                                <TextBlock Text="{x:Bind Label}"
                                           TextWrapping="Wrap"
                                           Style="{StaticResource TitleTextBlockStyle}" />
                            </DataTemplate>
                        </BreadcrumbBar.ItemTemplate>

                    </BreadcrumbBar>

                    <!--  Note the use of a TwoWay binding here, this is required for this control to work.  -->
                    <controls:PropertySizer HorizontalAlignment="Left"
                                            Grid.Row="1"
                                            Binding="{x:Bind MainNavigation.OpenPaneLength, Mode=TwoWay}"
                                            Maximum="640"
                                            Minimum="60"
                                            Visibility="{x:Bind MainNavigation.IsPaneOpen, Mode=OneWay}" />

                    <!-- Global margin settings for every page's content -->
                    <Frame x:Name="ContentFrame"
                           Margin="15,15,15,10"
                           Grid.Row="1"
                           AutomationProperties.LandmarkType="Main" />

                </Grid>
            </SplitView>

        </NavigationView>

    </Grid>
</Window>