//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.2.250604.1+b02a3ee244
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile toolbox.json
//       
//       Input file:
//           toolbox.json (132098 bytes created 16:36+03:00 Jul 27 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    84 |
// |--------------------------+-------|
// | Expression animators     |     1 |
// | KeyFrame animators       |    15 |
// | Reference parameters     |     1 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     2 |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     1 |
// | CompositionSpriteShapes  |     9 |
// |--------------------------+-------|
// | Brushes                  |     6 |
// | Gradient stops           |     7 |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
	// Name:        toolbox
	// Frame rate:  24 fps
	// Frame count: 28
	// Duration:    1166.7 mS
	// _____________________________________________________________________________________________
	// |           Marker           |           Constant           | Frame |   mS   |   Progress   |
	// |____________________________|______________________________|_______|________|______________|
	// | NormalToPressed_Start      | M_NormalToPressed_Start      |     0 |    0.0 | 0F           |
	// | NormalToPressed_End        | M_NormalToPressed_End        |     9 |  375.0 | 0.323214293F |
	// | PointerOverToPressed_Start | M_PointerOverToPressed_Start |     9 |  375.0 | 0.323214293F |
	// | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    19 |  791.7 | 0.680357158F |
	// | PressedToNormal_Start      | M_PressedToNormal_Start      |    20 |  833.3 | 0.716071427F |
	// | PressedToNormal_End        | M_PressedToNormal_End        |    28 | 1166.7 | 1F           |
	// | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    28 | 1166.7 | 1F           |
	// | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    28 | 1166.7 | 1F           |
	// ---------------------------------------------------------------------------------------------
	sealed partial class Toolbox
		: Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
		, Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
	{
		// Animation duration: 1.167 seconds.
		internal const long c_durationTicks = 11666666;

		// Marker: NormalToPressed_Start.
		internal const float M_NormalToPressed_Start = 0F;

		// Marker: NormalToPressed_End.
		internal const float M_NormalToPressed_End = 0.323214293F;

		// Marker: PointerOverToPressed_Start.
		internal const float M_PointerOverToPressed_Start = 0.323214293F;

		// Marker: PointerOverToPressed_End.
		internal const float M_PointerOverToPressed_End = 0.680357158F;

		// Marker: PressedToNormal_Start.
		internal const float M_PressedToNormal_Start = 0.716071427F;

		// Marker: PressedToNormal_End.
		internal const float M_PressedToNormal_End = 1F;

		// Marker: PressedToPointerOver_Start.
		internal const float M_PressedToPointerOver_Start = 1F;

		// Marker: PressedToPointerOver_End.
		internal const float M_PressedToPointerOver_End = 1F;

		public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
		{
			object ignored = null;
			return TryCreateAnimatedVisual(compositor, out ignored);
		}

		public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
		{
			diagnostics = null;

			var res =
				new Toolbox_AnimatedVisual(
					compositor
					);
			res.CreateAnimations();
			return res;
		}

		/// <summary>
		/// Gets the number of frames in the animation.
		/// </summary>
		public double FrameCount => 28d;

		/// <summary>
		/// Gets the frame rate of the animation.
		/// </summary>
		public double Framerate => 24d;

		/// <summary>
		/// Gets the duration of the animation.
		/// </summary>
		public TimeSpan Duration => TimeSpan.FromTicks(11666666);

		/// <summary>
		/// Converts a zero-based frame number to the corresponding progress value denoting the
		/// start of the frame.
		/// </summary>
		public double FrameToProgress(double frameNumber)
		{
			return frameNumber / 28d;
		}

		/// <summary>
		/// Returns a map from marker names to corresponding progress values.
		/// </summary>
		public IReadOnlyDictionary<string, double> Markers =>
			new Dictionary<string, double>
			{
				{ "NormalToPressed_Start", 0d },
				{ "NormalToPressed_End", 0.323214285714286 },
				{ "PointerOverToPressed_Start", 0.323214285714286 },
				{ "PointerOverToPressed_End", 0.680357142857143 },
				{ "PressedToNormal_Start", 0.716071428571429 },
				{ "PressedToNormal_End", 1d },
				{ "PressedToPointerOver_Start", 1d },
				{ "PressedToPointerOver_End", 1d },
			};

		/// <summary>
		/// Sets the color property with the given name, or does nothing if no such property
		/// exists.
		/// </summary>
		public void SetColorProperty(string propertyName, Color value)
		{
		}

		/// <summary>
		/// Sets the scalar property with the given name, or does nothing if no such property
		/// exists.
		/// </summary>
		public void SetScalarProperty(string propertyName, double value)
		{
		}

		sealed partial class Toolbox_AnimatedVisual
			: Microsoft.UI.Xaml.Controls.IAnimatedVisual
			, Microsoft.UI.Xaml.Controls.IAnimatedVisual2
		{
			const long c_durationTicks = 11666666;
			readonly Compositor _c;
			readonly ExpressionAnimation _reusableExpressionAnimation;
			AnimationController _animationController_0;
			CompositionColorBrush _colorBrush_SemiTransparentBlack_0;
			CompositionColorBrush _colorBrush_SemiTransparentBlack_1;
			CompositionColorBrush _colorBrush_White;
			CompositionContainerShape _containerShape;
			CompositionPath _path_0;
			CompositionPath _path_1;
			CompositionPathGeometry _pathGeometry_0;
			CompositionPathGeometry _pathGeometry_2;
			CompositionPathGeometry _pathGeometry_3;
			CompositionPathGeometry _pathGeometry_4;
			CompositionPathGeometry _pathGeometry_5;
			CompositionSpriteShape _spriteShape_3;
			CompositionSpriteShape _spriteShape_4;
			CompositionSpriteShape _spriteShape_5;
			CompositionSpriteShape _spriteShape_6;
			CompositionSpriteShape _spriteShape_7;
			CompositionSpriteShape _spriteShape_8;
			ContainerVisual _root;
			CubicBezierEasingFunction _cubicBezierEasingFunction_0;
			StepEasingFunction _holdThenStepEasingFunction;
			Vector2KeyFrameAnimation _offsetVector2Animation_0;
			Vector2KeyFrameAnimation _offsetVector2Animation_1;
			Vector2KeyFrameAnimation _scaleVector2Animation;

			void BindProperty(
				CompositionObject target,
				string animatedPropertyName,
				string expression,
				string referenceParameterName,
				CompositionObject referencedObject)
			{
				_reusableExpressionAnimation.ClearAllParameters();
				_reusableExpressionAnimation.Expression = expression;
				_reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
				target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
			}

			PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
			{
				var result = _c.CreatePathKeyFrameAnimation();
				result.Duration = TimeSpan.FromTicks(c_durationTicks);
				result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
				return result;
			}

			Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
			{
				var result = _c.CreateVector2KeyFrameAnimation();
				result.Duration = TimeSpan.FromTicks(c_durationTicks);
				result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
				return result;
			}

			CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
			{
				var result = _c.CreateSpriteShape(geometry);
				result.TransformMatrix = transformMatrix;
				result.FillBrush = fillBrush;
				return result;
			}

			AnimationController AnimationController_0()
			{
				if (_animationController_0 != null) { return _animationController_0; }
				var result = _animationController_0 = _c.CreateAnimationController();
				result.Pause();
				BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
				return result;
			}

			CanvasGeometry Geometry_0()
			{
				CanvasGeometry result;
				using (var builder = new CanvasPathBuilder(null))
				{
					builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
					builder.BeginFigure(new Vector2(-20F, -11.5F));
					builder.AddCubicBezier(new Vector2(-20F, -11.5F), new Vector2(20F, -11.5F), new Vector2(20F, -11.5F));
					builder.AddCubicBezier(new Vector2(20F, -11.5F), new Vector2(20F, 9.5F), new Vector2(20F, 9.5F));
					builder.AddCubicBezier(new Vector2(20F, 10.6049995F), new Vector2(19.1049995F, 11.5F), new Vector2(18F, 11.5F));
					builder.AddCubicBezier(new Vector2(18F, 11.5F), new Vector2(-18F, 11.5F), new Vector2(-18F, 11.5F));
					builder.AddCubicBezier(new Vector2(-19.1049995F, 11.5F), new Vector2(-20F, 10.6049995F), new Vector2(-20F, 9.5F));
					builder.AddCubicBezier(new Vector2(-20F, 9.5F), new Vector2(-20F, -11.5F), new Vector2(-20F, -11.5F));
					builder.EndFigure(CanvasFigureLoop.Closed);
					result = CanvasGeometry.CreatePath(builder);
				}
				return result;
			}

			// - - - - Layer aggregator
			// - - -  Offset:<24, 28.5>
			// - Path
			CanvasGeometry Geometry_1()
			{
				CanvasGeometry result;
				using (var builder = new CanvasPathBuilder(null))
				{
					builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
					builder.BeginFigure(new Vector2(-20F, -6.875F));
					builder.AddCubicBezier(new Vector2(-15.375F, -6.875F), new Vector2(17.75F, -6.75F), new Vector2(20F, -6.75F));
					builder.AddCubicBezier(new Vector2(22.5F, 3.93799996F), new Vector2(20F, 9.5F), new Vector2(20F, 9.5F));
					builder.AddCubicBezier(new Vector2(20F, 10.6049995F), new Vector2(19.1049995F, 11.5F), new Vector2(18F, 11.5F));
					builder.AddCubicBezier(new Vector2(18F, 11.5F), new Vector2(-18F, 11.5F), new Vector2(-18F, 11.5F));
					builder.AddCubicBezier(new Vector2(-19.1049995F, 11.5F), new Vector2(-20F, 10.6049995F), new Vector2(-20F, 9.5F));
					builder.AddCubicBezier(new Vector2(-20F, 9.5F), new Vector2(-21.875F, 4F), new Vector2(-20F, -6.875F));
					builder.EndFigure(CanvasFigureLoop.Closed);
					result = CanvasGeometry.CreatePath(builder);
				}
				return result;
			}

			// - - - - Layer aggregator
			// - - Transforms: hand Offset:<0, -5>
			CanvasGeometry Geometry_2()
			{
				CanvasGeometry result;
				using (var builder = new CanvasPathBuilder(null))
				{
					builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
					builder.BeginFigure(new Vector2(6.5F, -1.5F));
					builder.AddLine(new Vector2(-6.5F, -1.5F));
					builder.AddCubicBezier(new Vector2(-7.32800007F, -1.5F), new Vector2(-8F, -0.828000009F), new Vector2(-8F, 0F));
					builder.AddLine(new Vector2(-8F, 1.5F));
					builder.AddLine(new Vector2(8F, 1.5F));
					builder.AddLine(new Vector2(8F, 0F));
					builder.AddCubicBezier(new Vector2(8F, -0.828000009F), new Vector2(7.32800007F, -1.5F), new Vector2(6.5F, -1.5F));
					builder.EndFigure(CanvasFigureLoop.Closed);
					result = CanvasGeometry.CreatePath(builder);
				}
				return result;
			}

			CanvasGeometry Geometry_3()
			{
				CanvasGeometry result;
				using (var builder = new CanvasPathBuilder(null))
				{
					builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
					builder.BeginFigure(new Vector2(20F, 3.5F));
					builder.AddCubicBezier(new Vector2(20F, 3.5F), new Vector2(20F, 0.328000009F), new Vector2(20F, 0.328000009F));
					builder.AddCubicBezier(new Vector2(20F, -0.202000007F), new Vector2(19.7889996F, -0.711000025F), new Vector2(19.4139996F, -1.08599997F));
					builder.AddCubicBezier(new Vector2(19.4139996F, -1.08599997F), new Vector2(17.5860004F, -2.91400003F), new Vector2(17.5860004F, -2.91400003F));
					builder.AddCubicBezier(new Vector2(17.2110004F, -3.28900003F), new Vector2(16.7019997F, -3.5F), new Vector2(16.1720009F, -3.5F));
					builder.AddCubicBezier(new Vector2(16.1720009F, -3.5F), new Vector2(-16.1720009F, -3.5F), new Vector2(-16.1720009F, -3.5F));
					builder.AddCubicBezier(new Vector2(-16.7019997F, -3.5F), new Vector2(-17.2110004F, -3.28900003F), new Vector2(-17.5860004F, -2.91400003F));
					builder.AddCubicBezier(new Vector2(-17.5860004F, -2.91400003F), new Vector2(-19.4139996F, -1.08599997F), new Vector2(-19.4139996F, -1.08599997F));
					builder.AddCubicBezier(new Vector2(-19.7889996F, -0.711000025F), new Vector2(-20F, -0.202000007F), new Vector2(-20F, 0.328000009F));
					builder.AddCubicBezier(new Vector2(-20F, 0.328000009F), new Vector2(-20F, 3.5F), new Vector2(-20F, 3.5F));
					builder.AddCubicBezier(new Vector2(-20F, 3.5F), new Vector2(20F, 3.5F), new Vector2(20F, 3.5F));
					builder.EndFigure(CanvasFigureLoop.Closed);
					result = CanvasGeometry.CreatePath(builder);
				}
				return result;
			}

			// - - - - - Layer aggregator
			// - - - ShapeGroup: Group 1
			// - Path
			CanvasGeometry Geometry_4()
			{
				CanvasGeometry result;
				using (var builder = new CanvasPathBuilder(null))
				{
					builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
					builder.BeginFigure(new Vector2(20F, 4.875F));
					builder.AddCubicBezier(new Vector2(20F, 4.875F), new Vector2(20F, 0.328000009F), new Vector2(20F, 0.328000009F));
					builder.AddCubicBezier(new Vector2(20F, -0.202000007F), new Vector2(19.7889996F, -0.711000025F), new Vector2(19.4139996F, -1.08599997F));
					builder.AddCubicBezier(new Vector2(19.4139996F, -1.08599997F), new Vector2(17.5860004F, -2.91400003F), new Vector2(17.5860004F, -2.91400003F));
					builder.AddCubicBezier(new Vector2(17.2110004F, -3.28900003F), new Vector2(16.7019997F, -3.5F), new Vector2(16.1720009F, -3.5F));
					builder.AddCubicBezier(new Vector2(16.1720009F, -3.5F), new Vector2(-16.1720009F, -3.5F), new Vector2(-16.1720009F, -3.5F));
					builder.AddCubicBezier(new Vector2(-16.7019997F, -3.5F), new Vector2(-17.2110004F, -3.28900003F), new Vector2(-17.5860004F, -2.91400003F));
					builder.AddCubicBezier(new Vector2(-17.5860004F, -2.91400003F), new Vector2(-19.4139996F, -1.08599997F), new Vector2(-19.4139996F, -1.08599997F));
					builder.AddCubicBezier(new Vector2(-19.7889996F, -0.711000025F), new Vector2(-20F, -0.202000007F), new Vector2(-20F, 0.328000009F));
					builder.AddCubicBezier(new Vector2(-20F, 0.328000009F), new Vector2(-20F, 4.875F), new Vector2(-20F, 4.875F));
					builder.AddCubicBezier(new Vector2(-20F, 4.875F), new Vector2(20F, 4.875F), new Vector2(20F, 4.875F));
					builder.EndFigure(CanvasFigureLoop.Closed);
					result = CanvasGeometry.CreatePath(builder);
				}
				return result;
			}

			CanvasGeometry Geometry_5()
			{
				CanvasGeometry result;
				using (var builder = new CanvasPathBuilder(null))
				{
					builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
					builder.BeginFigure(new Vector2(1F, 3.727F));
					builder.AddLine(new Vector2(-1F, 3.727F));
					builder.AddCubicBezier(new Vector2(-1.954F, 3.727F), new Vector2(-2.727F, 2.954F), new Vector2(-2.727F, 2F));
					builder.AddLine(new Vector2(-2.727F, -2F));
					builder.AddCubicBezier(new Vector2(-2.727F, -2.954F), new Vector2(-1.954F, -3.727F), new Vector2(-1F, -3.727F));
					builder.AddLine(new Vector2(1F, -3.727F));
					builder.AddCubicBezier(new Vector2(1.954F, -3.727F), new Vector2(2.727F, -2.954F), new Vector2(2.727F, -2F));
					builder.AddLine(new Vector2(2.727F, 2F));
					builder.AddCubicBezier(new Vector2(2.727F, 2.954F), new Vector2(1.954F, 3.727F), new Vector2(1F, 3.727F));
					builder.EndFigure(CanvasFigureLoop.Closed);
					result = CanvasGeometry.CreatePath(builder);
				}
				return result;
			}

			CanvasGeometry Geometry_6()
			{
				CanvasGeometry result;
				using (var builder = new CanvasPathBuilder(null))
				{
					builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
					builder.BeginFigure(new Vector2(1F, 3.45499992F));
					builder.AddLine(new Vector2(-1F, 3.45499992F));
					builder.AddCubicBezier(new Vector2(-1.80299997F, 3.45499992F), new Vector2(-2.45499992F, 2.8039999F), new Vector2(-2.45499992F, 2F));
					builder.AddLine(new Vector2(-2.45499992F, -2F));
					builder.AddCubicBezier(new Vector2(-2.45499992F, -2.80299997F), new Vector2(-1.80400002F, -3.45499992F), new Vector2(-1F, -3.45499992F));
					builder.AddLine(new Vector2(1F, -3.45499992F));
					builder.AddCubicBezier(new Vector2(1.80299997F, -3.45499992F), new Vector2(2.45499992F, -2.8039999F), new Vector2(2.45499992F, -2F));
					builder.AddLine(new Vector2(2.45499992F, 2F));
					builder.AddCubicBezier(new Vector2(2.45499992F, 2.80299997F), new Vector2(1.80299997F, 3.45499992F), new Vector2(1F, 3.45499992F));
					builder.EndFigure(CanvasFigureLoop.Closed);
					result = CanvasGeometry.CreatePath(builder);
				}
				return result;
			}

			CanvasGeometry Geometry_7()
			{
				CanvasGeometry result;
				using (var builder = new CanvasPathBuilder(null))
				{
					builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
					builder.BeginFigure(new Vector2(-1F, -3F));
					builder.AddLine(new Vector2(1F, -3F));
					builder.AddCubicBezier(new Vector2(1.55200005F, -3F), new Vector2(2F, -2.55200005F), new Vector2(2F, -2F));
					builder.AddLine(new Vector2(2F, 2F));
					builder.AddCubicBezier(new Vector2(2F, 2.55200005F), new Vector2(1.55200005F, 3F), new Vector2(1F, 3F));
					builder.AddLine(new Vector2(-1F, 3F));
					builder.AddCubicBezier(new Vector2(-1.55200005F, 3F), new Vector2(-2F, 2.55200005F), new Vector2(-2F, 2F));
					builder.AddLine(new Vector2(-2F, -2F));
					builder.AddCubicBezier(new Vector2(-2F, -2.55200005F), new Vector2(-1.55200005F, -3F), new Vector2(-1F, -3F));
					builder.EndFigure(CanvasFigureLoop.Closed);
					result = CanvasGeometry.CreatePath(builder);
				}
				return result;
			}

			// - - Layer aggregator
			// ShapeGroup: Group 1
			CompositionColorBrush ColorBrush_AlmostLightCoral_FFEB6773()
			{
				return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xEB, 0x67, 0x73));
			}

			CompositionColorBrush ColorBrush_SemiTransparentBlack_0()
			{
				return (_colorBrush_SemiTransparentBlack_0 == null)
					? _colorBrush_SemiTransparentBlack_0 = _c.CreateColorBrush(Color.FromArgb(0x0D, 0x00, 0x00, 0x00))
					: _colorBrush_SemiTransparentBlack_0;
			}

			CompositionColorBrush ColorBrush_SemiTransparentBlack_1()
			{
				return (_colorBrush_SemiTransparentBlack_1 == null)
					? _colorBrush_SemiTransparentBlack_1 = _c.CreateColorBrush(Color.FromArgb(0x1B, 0x00, 0x00, 0x00))
					: _colorBrush_SemiTransparentBlack_1;
			}

			CompositionColorBrush ColorBrush_White()
			{
				return (_colorBrush_White == null)
					? _colorBrush_White = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF))
					: _colorBrush_White;
			}

			// - - - Layer aggregator
			// - Transforms: hand Offset:<0, -5>
			// Stop 0
			CompositionColorGradientStop GradientStop_0_AlmostDimGray_FF5E5E5E()
			{
				return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0x5E, 0x5E, 0x5E));
			}

			// - - Layer aggregator
			// -  Offset:<24, 28.5>
			// Stop 0
			CompositionColorGradientStop GradientStop_0p88_AlmostFirebrick_FFC61825()
			{
				return _c.CreateColorGradientStop(0.879999995F, Color.FromArgb(0xFF, 0xC6, 0x18, 0x25));
			}

			// - - Layer aggregator
			// -  Offset:<24, 28.5>
			// Stop 1
			CompositionColorGradientStop GradientStop_0p882_AlmostFirebrick_FFBD1724()
			{
				return _c.CreateColorGradientStop(0.882000029F, Color.FromArgb(0xFF, 0xBD, 0x17, 0x24));
			}

			// - - Layer aggregator
			// -  Offset:<24, 28.5>
			// Stop 2
			CompositionColorGradientStop GradientStop_0p883_AlmostFirebrick_FFB51522()
			{
				return _c.CreateColorGradientStop(0.883000016F, Color.FromArgb(0xFF, 0xB5, 0x15, 0x22));
			}

			// - - Layer aggregator
			// -  Offset:<24, 28.5>
			// Stop 3
			CompositionColorGradientStop GradientStop_0p885_AlmostFirebrick_FFA81420()
			{
				return _c.CreateColorGradientStop(0.88499999F, Color.FromArgb(0xFF, 0xA8, 0x14, 0x20));
			}

			// - - Layer aggregator
			// -  Offset:<24, 28.5>
			// Stop 4
			CompositionColorGradientStop GradientStop_0p886_AlmostFirebrick_FF9C131F()
			{
				return _c.CreateColorGradientStop(0.885999978F, Color.FromArgb(0xFF, 0x9C, 0x13, 0x1F));
			}

			// - - - Layer aggregator
			// - Transforms: hand Offset:<0, -5>
			// Stop 1
			CompositionColorGradientStop GradientStop_1_AlmostDarkSlateGray_FF535353()
			{
				return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0x53, 0x53, 0x53));
			}

			// Layer aggregator
			CompositionContainerShape ContainerShape()
			{
				if (_containerShape != null) { return _containerShape; }
				var result = _containerShape = _c.CreateContainerShape();
				var shapes = result.Shapes;
				// Transforms: hand Offset:<0, -5>
				shapes.Add(SpriteShape_1());
				// ShapeGroup: Group 1
				shapes.Add(SpriteShape_2());
				// Transforms: fastening-2
				shapes.Add(SpriteShape_3());
				// Transforms: fastening-2
				shapes.Add(SpriteShape_4());
				// Transforms: fastening-1
				shapes.Add(SpriteShape_5());
				// Transforms: fastening-1
				shapes.Add(SpriteShape_6());
				// Transforms: fastening-2
				shapes.Add(SpriteShape_7());
				// Transforms: fastening-1
				shapes.Add(SpriteShape_8());
				return result;
			}

			// - Layer aggregator
			// Offset:<24, 28.5>
			CompositionLinearGradientBrush LinearGradientBrush_0()
			{
				var result = _c.CreateLinearGradientBrush();
				var colorStops = result.ColorStops;
				colorStops.Add(GradientStop_0p88_AlmostFirebrick_FFC61825());
				colorStops.Add(GradientStop_0p882_AlmostFirebrick_FFBD1724());
				colorStops.Add(GradientStop_0p883_AlmostFirebrick_FFB51522());
				colorStops.Add(GradientStop_0p885_AlmostFirebrick_FFA81420());
				colorStops.Add(GradientStop_0p886_AlmostFirebrick_FF9C131F());
				result.MappingMode = CompositionMappingMode.Absolute;
				result.StartPoint = new Vector2(-1F, -11F);
				result.EndPoint = new Vector2(-1F, 10.0120001F);
				return result;
			}

			// - - Layer aggregator
			// Transforms: hand Offset:<0, -5>
			CompositionLinearGradientBrush LinearGradientBrush_1()
			{
				var result = _c.CreateLinearGradientBrush();
				var colorStops = result.ColorStops;
				colorStops.Add(GradientStop_0_AlmostDimGray_FF5E5E5E());
				colorStops.Add(GradientStop_1_AlmostDarkSlateGray_FF535353());
				result.MappingMode = CompositionMappingMode.Absolute;
				result.StartPoint = new Vector2(-8F, -0.0309999995F);
				result.EndPoint = new Vector2(8F, 0.0309999995F);
				return result;
			}

			CompositionPath Path_0()
			{
				if (_path_0 != null) { return _path_0; }
				var result = _path_0 = new CompositionPath(Geometry_0());
				return result;
			}

			CompositionPath Path_1()
			{
				if (_path_1 != null) { return _path_1; }
				var result = _path_1 = new CompositionPath(Geometry_3());
				return result;
			}

			// - Layer aggregator
			// Offset:<24, 28.5>
			CompositionPathGeometry PathGeometry_0()
			{
				if (_pathGeometry_0 != null) { return _pathGeometry_0; }
				var result = _pathGeometry_0 = _c.CreatePathGeometry();
				return result;
			}

			// - - Layer aggregator
			// Transforms: hand Offset:<0, -5>
			CompositionPathGeometry PathGeometry_1()
			{
				return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
			}

			// - - Layer aggregator
			// ShapeGroup: Group 1
			CompositionPathGeometry PathGeometry_2()
			{
				if (_pathGeometry_2 != null) { return _pathGeometry_2; }
				var result = _pathGeometry_2 = _c.CreatePathGeometry();
				return result;
			}

			CompositionPathGeometry PathGeometry_3()
			{
				return (_pathGeometry_3 == null)
					? _pathGeometry_3 = _c.CreatePathGeometry(new CompositionPath(Geometry_5()))
					: _pathGeometry_3;
			}

			CompositionPathGeometry PathGeometry_4()
			{
				return (_pathGeometry_4 == null)
					? _pathGeometry_4 = _c.CreatePathGeometry(new CompositionPath(Geometry_6()))
					: _pathGeometry_4;
			}

			CompositionPathGeometry PathGeometry_5()
			{
				return (_pathGeometry_5 == null)
					? _pathGeometry_5 = _c.CreatePathGeometry(new CompositionPath(Geometry_7()))
					: _pathGeometry_5;
			}

			// Layer aggregator
			// Path 1
			CompositionSpriteShape SpriteShape_0()
			{
				// Offset:<24, 28.5>
				var geometry = PathGeometry_0();
				var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 28.5F), LinearGradientBrush_0()); ;
				return result;
			}

			// - Layer aggregator
			// Path 1
			CompositionSpriteShape SpriteShape_1()
			{
				// Offset:<0, -5>
				var geometry = PathGeometry_1();
				var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 0F, -5F), LinearGradientBrush_1()); ;
				return result;
			}

			// - Layer aggregator
			// Path 1
			CompositionSpriteShape SpriteShape_2()
			{
				var result = _c.CreateSpriteShape(PathGeometry_2());
				result.FillBrush = ColorBrush_AlmostLightCoral_FFEB6773();
				return result;
			}

			// - Layer aggregator
			// Path 1
			CompositionSpriteShape SpriteShape_3()
			{
				if (_spriteShape_3 != null) { return _spriteShape_3; }
				var result = _spriteShape_3 = _c.CreateSpriteShape(PathGeometry_3());
				result.FillBrush = ColorBrush_SemiTransparentBlack_0();
				return result;
			}

			// - Layer aggregator
			// Path 1
			CompositionSpriteShape SpriteShape_4()
			{
				if (_spriteShape_4 != null) { return _spriteShape_4; }
				var result = _spriteShape_4 = _c.CreateSpriteShape(PathGeometry_4());
				result.FillBrush = ColorBrush_SemiTransparentBlack_1();
				return result;
			}

			// - Layer aggregator
			// Path 1
			CompositionSpriteShape SpriteShape_5()
			{
				if (_spriteShape_5 != null) { return _spriteShape_5; }
				var result = _spriteShape_5 = _c.CreateSpriteShape(PathGeometry_3());
				result.FillBrush = ColorBrush_SemiTransparentBlack_0();
				return result;
			}

			// - Layer aggregator
			// Path 1
			CompositionSpriteShape SpriteShape_6()
			{
				if (_spriteShape_6 != null) { return _spriteShape_6; }
				var result = _spriteShape_6 = _c.CreateSpriteShape(PathGeometry_4());
				result.FillBrush = ColorBrush_SemiTransparentBlack_1();
				return result;
			}

			// - Layer aggregator
			// Path 1
			CompositionSpriteShape SpriteShape_7()
			{
				if (_spriteShape_7 != null) { return _spriteShape_7; }
				var result = _spriteShape_7 = _c.CreateSpriteShape(PathGeometry_5());
				result.FillBrush = ColorBrush_White();
				return result;
			}

			// - Layer aggregator
			// Path 1
			CompositionSpriteShape SpriteShape_8()
			{
				if (_spriteShape_8 != null) { return _spriteShape_8; }
				var result = _spriteShape_8 = _c.CreateSpriteShape(PathGeometry_5());
				result.FillBrush = ColorBrush_White();
				return result;
			}

			// The root of the composition.
			ContainerVisual Root()
			{
				if (_root != null) { return _root; }
				var result = _root = _c.CreateContainerVisual();
				var propertySet = result.Properties;
				propertySet.InsertScalar("Progress", 0F);
				// Layer aggregator
				result.Children.InsertAtTop(ShapeVisual_0());
				return result;
			}

			CubicBezierEasingFunction CubicBezierEasingFunction_0()
			{
				return (_cubicBezierEasingFunction_0 == null)
					? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F))
					: _cubicBezierEasingFunction_0;
			}

			// - - Layer aggregator
			// -  Offset:<24, 28.5>
			// Path
			PathKeyFrameAnimation PathKeyFrameAnimation_0()
			{
				// Frame 0.
				var result = CreatePathKeyFrameAnimation(0F, Path_0(), HoldThenStepEasingFunction());
				// Frame 6.
				result.InsertKeyFrame(0.214285716F, new CompositionPath(Geometry_1()), CubicBezierEasingFunction_0());
				// Frame 12.
				result.InsertKeyFrame(0.428571433F, Path_0(), CubicBezierEasingFunction_0());
				return result;
			}

			// - - - Layer aggregator
			// - ShapeGroup: Group 1
			// Path
			PathKeyFrameAnimation PathKeyFrameAnimation_1()
			{
				// Frame 0.
				var result = CreatePathKeyFrameAnimation(0F, Path_1(), HoldThenStepEasingFunction());
				// Frame 6.
				result.InsertKeyFrame(0.214285716F, new CompositionPath(Geometry_4()), CubicBezierEasingFunction_0());
				// Frame 12.
				result.InsertKeyFrame(0.428571433F, Path_1(), CubicBezierEasingFunction_0());
				return result;
			}

			// Layer aggregator
			ShapeVisual ShapeVisual_0()
			{
				var result = _c.CreateShapeVisual();
				result.Size = new Vector2(48F, 48F);
				var shapes = result.Shapes;
				// Offset:<24, 28.5>
				shapes.Add(SpriteShape_0());
				shapes.Add(ContainerShape());
				return result;
			}

			StepEasingFunction HoldThenStepEasingFunction()
			{
				if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
				var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
				result.IsFinalStepSingleFrame = true;
				return result;
			}

			// Scale
			StepEasingFunction StepThenHoldEasingFunction()
			{
				var result = _c.CreateStepEasingFunction();
				result.IsInitialStepSingleFrame = true;
				return result;
			}

			// Offset
			Vector2KeyFrameAnimation OffsetVector2Animation_0()
			{
				// Frame 0.
				if (_offsetVector2Animation_0 != null) { return _offsetVector2Animation_0; }
				var result = _offsetVector2Animation_0 = CreateVector2KeyFrameAnimation(0F, new Vector2(-12F, 4.5F), HoldThenStepEasingFunction());
				// Frame 6.
				result.InsertKeyFrame(0.214285716F, new Vector2(-12F, 5.125F), CubicBezierEasingFunction_0());
				// Frame 12.
				result.InsertKeyFrame(0.428571433F, new Vector2(-12F, 4.5F), CubicBezierEasingFunction_0());
				return result;
			}

			// Offset
			Vector2KeyFrameAnimation OffsetVector2Animation_1()
			{
				// Frame 0.
				if (_offsetVector2Animation_1 != null) { return _offsetVector2Animation_1; }
				var result = _offsetVector2Animation_1 = CreateVector2KeyFrameAnimation(0F, new Vector2(12F, 4.5F), HoldThenStepEasingFunction());
				// Frame 6.
				result.InsertKeyFrame(0.214285716F, new Vector2(12F, 5.125F), CubicBezierEasingFunction_0());
				// Frame 12.
				result.InsertKeyFrame(0.428571433F, new Vector2(12F, 4.5F), CubicBezierEasingFunction_0());
				return result;
			}

			// - Layer aggregator
			// Offset
			Vector2KeyFrameAnimation OffsetVector2Animation_2()
			{
				// Frame 0.
				var result = CreateVector2KeyFrameAnimation(0F, new Vector2(24F, 13.5F), HoldThenStepEasingFunction());
				// Frame 6.
				result.InsertKeyFrame(0.214285716F, new Vector2(24F, 17.25F), CubicBezierEasingFunction_0());
				// Frame 12.
				result.InsertKeyFrame(0.428571433F, new Vector2(24F, 13.5F), CubicBezierEasingFunction_0());
				return result;
			}

			// Scale
			Vector2KeyFrameAnimation ScaleVector2Animation()
			{
				// Frame 0.
				if (_scaleVector2Animation != null) { return _scaleVector2Animation; }
				var result = _scaleVector2Animation = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
				// Frame 3.
				result.InsertKeyFrame(0.107142858F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
				// Frame 9.
				result.InsertKeyFrame(0.321428567F, new Vector2(1F, 0.75F), CubicBezierEasingFunction_0());
				// Frame 15.
				result.InsertKeyFrame(0.535714269F, new Vector2(1F, 1F), CubicBezierEasingFunction_0());
				return result;
			}

			internal Toolbox_AnimatedVisual(
				Compositor compositor
				)
			{
				_c = compositor;
				_reusableExpressionAnimation = compositor.CreateExpressionAnimation();
				Root();
			}

			public Visual RootVisual => _root;
			public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
			public Vector2 Size => new Vector2(48F, 48F);
			void IDisposable.Dispose() => _root?.Dispose();

			public void CreateAnimations()
			{
				_containerShape.StartAnimation("Offset", OffsetVector2Animation_2(), AnimationController_0());
				_pathGeometry_0.StartAnimation("Path", PathKeyFrameAnimation_0(), AnimationController_0());
				_pathGeometry_2.StartAnimation("Path", PathKeyFrameAnimation_1(), AnimationController_0());
				_spriteShape_3.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
				_spriteShape_3.StartAnimation("Offset", OffsetVector2Animation_0(), AnimationController_0());
				_spriteShape_4.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
				_spriteShape_4.StartAnimation("Offset", OffsetVector2Animation_0(), AnimationController_0());
				_spriteShape_5.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
				_spriteShape_5.StartAnimation("Offset", OffsetVector2Animation_1(), AnimationController_0());
				_spriteShape_6.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
				_spriteShape_6.StartAnimation("Offset", OffsetVector2Animation_1(), AnimationController_0());
				_spriteShape_7.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
				_spriteShape_7.StartAnimation("Offset", OffsetVector2Animation_0(), AnimationController_0());
				_spriteShape_8.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
				_spriteShape_8.StartAnimation("Offset", OffsetVector2Animation_1(), AnimationController_0());
			}

			public void DestroyAnimations()
			{
				_containerShape.StopAnimation("Offset");
				_pathGeometry_0.StopAnimation("Path");
				_pathGeometry_2.StopAnimation("Path");
				_spriteShape_3.StopAnimation("Scale");
				_spriteShape_3.StopAnimation("Offset");
				_spriteShape_4.StopAnimation("Scale");
				_spriteShape_4.StopAnimation("Offset");
				_spriteShape_5.StopAnimation("Scale");
				_spriteShape_5.StopAnimation("Offset");
				_spriteShape_6.StopAnimation("Scale");
				_spriteShape_6.StopAnimation("Offset");
				_spriteShape_7.StopAnimation("Scale");
				_spriteShape_7.StopAnimation("Offset");
				_spriteShape_8.StopAnimation("Scale");
				_spriteShape_8.StopAnimation("Offset");
			}

		}
	}
}
