<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AppControlManager</name>
    </assembly>
    <members>
        <member name="P:AnimatedVisuals.Blueprint.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Blueprint.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Blueprint.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Blueprint.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Blueprint.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Blueprint.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Blueprint.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Cancel.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Cancel.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Cancel.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Cancel.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Cancel.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Cancel.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Cancel.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Certificate.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Certificate.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Certificate.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Certificate.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Certificate.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Certificate.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Certificate.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Confetti.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Confetti.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Confetti.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Confetti.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Confetti.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Confetti.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Confetti.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Configure.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Configure.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Configure.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Configure.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Configure.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Configure.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Configure.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.CurlyArrow.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.CurlyArrow.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.CurlyArrow.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.CurlyArrow.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.CurlyArrow.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.CurlyArrow.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.CurlyArrow.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Deny.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Deny.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Deny.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Deny.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Deny.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Deny.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Deny.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Deployment.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Deployment.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Deployment.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Deployment.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Deployment.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Deployment.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Deployment.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Document.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Document.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Document.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Document.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Document.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Document.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Document.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Dotsload.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Dotsload.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Dotsload.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Dotsload.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Dotsload.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Dotsload.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Dotsload.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.GitHub.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.GitHub.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.GitHub.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.GitHub.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.GitHub.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.GitHub.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.GitHub.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Hash.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Hash.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Hash.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Hash.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Hash.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Hash.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Hash.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Heart.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Heart.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Heart.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Heart.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Heart.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Heart.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Heart.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.HeartPulse.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.HeartPulse.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.HeartPulse.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.HeartPulse.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.HeartPulse.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.HeartPulse.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.HeartPulse.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Honeymoon.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Honeymoon.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Honeymoon.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Honeymoon.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Honeymoon.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Honeymoon.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Honeymoon.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Light.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Light.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Light.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Light.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Light.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Light.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Light.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Logout.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Logout.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Logout.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Logout.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Logout.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Logout.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Logout.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.MDE.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.MDE.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.MDE.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.MDE.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.MDE.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.MDE.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.MDE.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Merge.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Merge.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Merge.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Merge.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Merge.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Merge.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Merge.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.MicrosoftCloud.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.MicrosoftCloud.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.MicrosoftCloud.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.MicrosoftCloud.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.MicrosoftCloud.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.MicrosoftCloud.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.MicrosoftCloud.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Refresh.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Refresh.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Refresh.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Refresh.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Refresh.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Refresh.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Refresh.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Scan.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Scan.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Scan.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Scan.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Scan.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Scan.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Scan.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Select.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Select.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Select.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Select.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Select.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Select.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Select.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Shield.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Shield.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Shield.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Shield.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Shield.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Shield.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Shield.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Sidebar.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Sidebar.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Sidebar.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Sidebar.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Sidebar.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Sidebar.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Sidebar.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.SignIn.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.SignIn.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.SignIn.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.SignIn.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.SignIn.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.SignIn.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.SignIn.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Simulation.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Simulation.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Simulation.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Simulation.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Simulation.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Simulation.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Simulation.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.SparklingDiamond.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.SparklingDiamond.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.SparklingDiamond.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.SparklingDiamond.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.SparklingDiamond.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.SparklingDiamond.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.SparklingDiamond.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.StarBlack.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.StarBlack.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.StarBlack.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.StarBlack.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.StarBlack.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.StarBlack.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.StarBlack.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.StarYellow.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.StarYellow.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.StarYellow.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.StarYellow.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.StarYellow.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.StarYellow.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.StarYellow.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.SupplementalPolicy.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.SupplementalPolicy.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.SupplementalPolicy.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.SupplementalPolicy.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.SupplementalPolicy.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.SupplementalPolicy.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.SupplementalPolicy.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Timeline.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Timeline.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Timeline.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Timeline.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Timeline.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Timeline.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Timeline.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.TrashCan.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.TrashCan.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.TrashCan.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.TrashCan.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.TrashCan.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.TrashCan.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.TrashCan.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Validate.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Validate.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Validate.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Validate.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.Validate.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Validate.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.Validate.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.View.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.View.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.View.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.View.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.View.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.View.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.View.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.ViewAllCertificates.FrameCount">
            <summary>
            Gets the number of frames in the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.ViewAllCertificates.Framerate">
            <summary>
            Gets the frame rate of the animation.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.ViewAllCertificates.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.ViewAllCertificates.FrameToProgress(System.Double)">
            <summary>
            Converts a zero-based frame number to the corresponding progress value denoting the
            start of the frame.
            </summary>
        </member>
        <member name="P:AnimatedVisuals.ViewAllCertificates.Markers">
            <summary>
            Returns a map from marker names to corresponding progress values.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.ViewAllCertificates.SetColorProperty(System.String,Windows.UI.Color)">
            <summary>
            Sets the color property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="M:AnimatedVisuals.ViewAllCertificates.SetScalarProperty(System.String,System.Double)">
            <summary>
            Sets the scalar property with the given name, or does nothing if no such property
            exists.
            </summary>
        </member>
        <member name="T:AppControlManager.App">
            <summary>
            Provides application-specific behavior to supplement the default Application class.
            </summary>
        </member>
        <member name="F:AppControlManager.App.PFN">
            <summary>
            Package Family Name of the application
            </summary>
        </member>
        <member name="F:AppControlManager.App.AUMID">
            <summary>
            The App User Model ID which is in the format of PackageFamilyName!App
            The "App" is what's defined in the Package.appxmanifest file for ID in Application Id="App"
            </summary>
        </member>
        <member name="F:AppControlManager.App.PackageSource">
            <summary>
            Detects the source of the application.
            GitHub => 0
            Microsoft Store => 1
            Unknown => 2
            </summary>
        </member>
        <member name="P:AppControlManager.App.Settings">
            <summary>
            The application settings for AppControl Manager
            </summary>
        </member>
        <member name="F:AppControlManager.App.packageVersion">
            <summary>
            Get the current app's version
            </summary>
        </member>
        <member name="F:AppControlManager.App.currentAppVersion">
            <summary>
            Convert it to a normal Version object
            </summary>
        </member>
        <member name="F:AppControlManager.App.IsUniqueAppInstance">
            <summary>
            Check if another instance of AppControl Manager is running
            </summary>
        </member>
        <member name="F:AppControlManager.App.IsElevated">
            <summary>
            To determine whether the app has Administrator privileges
            </summary>
        </member>
        <member name="F:AppControlManager.App.LogsDirectory">
            <summary>
            The directory where the logs will be stored
            </summary>
        </member>
        <member name="P:AppControlManager.App.AppHost">
            <summary>
            Provides a static host for the dependency injection container used throughout the application. It configures and
            registers various view models as singletons.
            </summary>
        </member>
        <member name="M:AppControlManager.App.#ctor">
            <summary>
            Initializes the singleton application object. This is the first line of authored code
            executed, and as such is the logical equivalent of main() or WinMain().
            </summary>
        </member>
        <member name="M:AppControlManager.App.TaskScheduler_UnobservedTaskException(System.Object,System.Threading.Tasks.UnobservedTaskExceptionEventArgs)">
            <summary>
            Event handler for UnobservedTaskException events.
            This event is raised when a faulted Task's exception is not observed.
            UnobservedTaskException doesn't help for exceptions thrown in event handlers.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.App.OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs)">
            <summary>
            Invoked when the application is launched.
            </summary>
            <param name="args">Details about the launch request and process.</param>
        </member>
        <member name="M:AppControlManager.App.InitialNav">
            <summary>
            Perform initial navigation.
            </summary>
        </member>
        <member name="P:AppControlManager.App.MainWindow">
            <summary>
            Exposes the main application window as a static property. It retrieves the window from the current application
            instance.
            </summary>
        </member>
        <member name="M:AppControlManager.App.App_UnhandledException(System.Object,Microsoft.UI.Xaml.UnhandledExceptionEventArgs)">
            <summary>
            Event handler for unhandled exceptions.
            </summary>
        </member>
        <member name="M:AppControlManager.App.Window_Closed(System.Object,Microsoft.UI.Xaml.WindowEventArgs)">
            <summary>
            Event handler for when the window is closed.
            </summary>
        </member>
        <member name="M:AppControlManager.App.ShowErrorDialogAsync(System.Exception)">
            <summary>
            Displays a ContentDialog with the error message.
            </summary>
        </member>
        <member name="M:AppControlManager.App.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.App.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:AppControlManager.App.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:AppControlManager.App.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <member name="T:AppControlManager.AppSettings.Main">
            <summary>
            A thread-safe, unified settings manager for the application.
            Properties are strongly typed and any change is immediately persisted to local storage.
            </summary>
        </member>
        <member name="M:AppControlManager.AppSettings.Main.ReadValue``1(System.String,``0)">
            <summary>
            Generic helper method to read a value from local storage.
            If T is an enum type, expects the stored value to be its string name.
            </summary>
        </member>
        <member name="M:AppControlManager.AppSettings.Main.SaveValue(System.String,System.Object)">
            <summary>
            Helper method to immediately persist the new value to local storage.
            TODO: Add logic for Enums that will be added in the future.
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.SoundSetting">
            <summary>
            Whether the app emits sounds during navigation or not
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.NavViewBackground">
            <summary>
            If on, the extra layer is removed from the NavigationView's background, giving the entire app a darker look.
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.NavViewPaneDisplayMode">
            <summary>
            The display mode of the main NavigationView, whether it's on top or on the left side
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.AppTheme">
            <summary>
            Light, Dark or System
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.BackDropBackground">
            <summary>
            Mica, MicaAlt or Acrylic
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.IconsStyle">
            <summary>
            MonoChrome, Animated or accent based
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.MainWindowWidth">
            <summary>
            Width of the main window
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.MainWindowHeight">
            <summary>
            Height of the main window
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.MainWindowIsMaximized">
            <summary>
            Whether the main window is maximized prior to closing the app.
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.ListViewsVerticalCentering">
            <summary>
            Whether clicks/taps on ListView items will cause the selected row to be vertically centered.
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.CacheSecurityCatalogsScanResults">
            <summary>
            Cache the security catalog scan results to speed up various components of the app that use them.
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.PromptForElevationOnStartup">
            <summary>
            Whether the app will prompt for elevation and display a UAC on startup.
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.AutomaticAssignmentSidebar">
            <summary>
            Automatically assign the generated base policies to the Sidebar's selected policy field for easy usage in pages that support the augmentation.
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.AutoCheckForUpdateAtStartup">
            <summary>
            Automatically check for updates on app startup.
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.ApplicationGlobalLanguage">
            <summary>
            Selected language for the application
            </summary>	
        </member>
        <member name="P:AppControlManager.AppSettings.Main.ApplicationGlobalFlowDirection">
            <summary>
            Whether the User Interface flow direction is Left-to-Right or Right-to-Left
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.FileActivatedLaunchArg">
            <summary>
            The argument received if the app is launched via file activation.
            This allows us to have access to this after app has been relaunched with Admin privileges.
            </summary>
        </member>
        <member name="P:AppControlManager.AppSettings.Main.CiPolicySchemaPath">
            <summary>
            The path to the Code Integrity Schema XSD file.
            User can optionally provide a custom path to it. E.g., on Home edition where this file doesn't exist by default.
            </summary>
        </member>
        <member name="T:AppControlManager.CustomUIElements.ButtonV2">
            <summary>
            This button displays its inner Flyout when it's RightTapped (e.g., Right-clicked) or Holding on it with touch.
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.ButtonV2.TryShowFlyout">
            <summary>
            If a Flyout is attached to this Button and it isn't open, shows it.
            Returns true if there was a Flyout to show, false otherwise.
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.CustomPatternBasedFilePath.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.CustomPatternBasedFilePath.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.CustomPatternBasedFilePath.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="P:AppControlManager.CustomUIElements.ListViewV2.RegistryKey">
            <summary>
            When set in XAML, this key will be used for to register/unregister the ScrollViewer inside of the ListView and the ListView itself.
            </summary>
        </member>
        <member name="F:AppControlManager.CustomUIElements.ListViewV2.RegistryKeyProperty">
            <summary>
            A DP added to the ListView which is a type Enum, used to register it in the caches.
            This property is exposed and is available in the XAML just like other native properties of the ListView.
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.ListViewV2.#ctor">
            <summary>
            The SelectionChanged and ContainerContentChanging events can still be subscribed to from the code behind of any page that utilizes this ListView.
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.ListViewV2.OnLoaded(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Loaded event of the ListView. Every time the ListView becomes visible, such as by navigating to the page containing it, this event will be fired.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.CustomUIElements.ListViewV2.OnUnloaded(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Whenever we navigate away from a page that contains the ListView, this even will be fired.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:AppControlManager.CustomUIElements.MenuFlyoutV2">
            <summary>
            A custom implementation of MenuFlyout that prevents the flyout from automatically closing
            when a menu item is selected. This is achieved by tracking pointer interactions on the flyout items.
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.MenuFlyoutV2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AppControlManager.CustomUIElements.MenuFlyoutV2"/> class.
            Subscribes to the Opened event to attach pointer event handlers to the menu items.
            </summary>
        </member>
        <member name="P:AppControlManager.CustomUIElements.MenuFlyoutV2.IsPointerOver">
            <summary>
            Property to track whether the user's pointer is currently over any menu item in the flyout.
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.MenuFlyoutV2.MenuFlyoutV2_Opened(System.Object,System.Object)">
            <summary>
            Event handler for when the flyout is opened.
            Attaches PointerEntered and PointerExited event handlers to each item in the flyout.
            </summary>
            <param name="sender">The source of the event (the flyout itself).</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:AppControlManager.CustomUIElements.MenuFlyoutV2.MenuItem_PointerEntered(System.Object,Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Event handler for when the pointer enters a menu item in the flyout.
            This sets the IsPointerOver property to true, indicating that the pointer is interacting with the menu.
            </summary>
            <param name="sender">The menu item that the pointer entered.</param>
            <param name="e">The event data for the pointer interaction.</param>
        </member>
        <member name="M:AppControlManager.CustomUIElements.MenuFlyoutV2.MenuItem_PointerExited(System.Object,Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Event handler for when the pointer exits a menu item in the flyout.
            This sets the IsPointerOver property to false, indicating that the pointer is no longer interacting with the menu.
            </summary>
            <param name="sender">The menu item that the pointer exited.</param>
            <param name="e">The event data for the pointer interaction.</param>
        </member>
        <member name="T:AppControlManager.CustomUIElements.SettingsCardV2">
            <summary>
            Extends SettingsCard to automatically invoke its single child element
            (ToggleSwitch, ComboBox or Button) when the card itself is clicked.
            No click happens on the internal element when the element is disabled.
            </summary>
        </member>
        <member name="T:AppControlManager.CustomUIElements.SettingsCardV3">
            <summary>
            A SettingsCard that:
             - On RightTapped or Holding (on the card), shows its inner Button.Flyout at the card.
             - On RightTapped (on the Button), shows its Flyout at the button.
             It has special use case, for when the setting card hosts a button used for browsing for files/folders.
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.CertificateCNAutoSuggestBox_TextChanged(Microsoft.UI.Xaml.Controls.AutoSuggestBox,Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs)">
            <summary>
            Event handler for AutoSuggestBox
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.CertificateCommonNameAutoSuggestBox_GotFocus(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Start suggesting when tap or mouse click happens
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.FetchLatestCertificateCNs">
            <summary>
            Get all of the common names of the certificates in the user/my certificate store over time
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.OpenAppSettingsButton_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Event handler for the button that navigates to the Settings page
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.OnPrimaryButtonClick(AppControlManager.CustomUIElements.ContentDialogV2,Microsoft.UI.Xaml.Controls.ContentDialogButtonClickEventArgs)">
            <summary>
            Event handler for the primary button click
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.AutoAcquireSignTool_Toggled">
            <summary>
            Event handler for the toggle switch to automatically download SignTool.exe from the Microsoft servers
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.DisableUIElements">
            <summary>
            Disables the input UI elements
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.EnableUIElements">
            <summary>
            Enables the input UI elements
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.ShowTeachingTip(System.String)">
            <summary>
            To show the Teaching Tip for the Verify button
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.VerifyButton_Click">
            <summary>
            Event handler for the Verify button
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.SignToolBrowseButton_Click">
            <summary>
            Event handler for SignTool.exe browse button
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.CertFileBrowseButton_Click">
            <summary>
            Event handler for browse for certificate .cer file button
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialog.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.CertificateCNAutoSuggestBox_TextChanged(Microsoft.UI.Xaml.Controls.AutoSuggestBox,Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs)">
            <summary>
            Event handler for AutoSuggestBox
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.CertificateCommonNameAutoSuggestBox_GotFocus(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Start suggesting when tap or mouse click happens
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.FetchLatestCertificateCNs">
            <summary>
            Get all of the common names of the certificates in the user/my certificate store over time
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.OpenAppSettingsButton_Click">
            <summary>
            Event handler for the button that navigates to the Settings page
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.OnPrimaryButtonClick(Microsoft.UI.Xaml.Controls.ContentDialog,Microsoft.UI.Xaml.Controls.ContentDialogButtonClickEventArgs)">
            <summary>
            Event handler for the primary button click
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.AutoAcquireSignTool_Toggled">
            <summary>
            Event handler for the toggle switch to automatically download SignTool.exe from the Microsoft servers
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.DisableUIElements">
            <summary>
            Disables the input UI elements
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.EnableUIElements">
            <summary>
            Enables the input UI elements
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.ShowTeachingTip(System.String)">
            <summary>
            To show the Teaching Tip for the Verify button
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.VerifyButton_Click">
            <summary>
            Event handler for the Verify button
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.SignToolBrowseButton_Click">
            <summary>
            Event handler for SignTool.exe browse button
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.CertFileBrowseButton_Click">
            <summary>
            Event handler for browse for certificate .cer file button
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.XMLPolicyFileBrowseButton_Click">
            <summary>
            Event handler for the XML policy file browse button
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.SigningDetailsDialogForRemoval.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.CustomUIElements.HeaderBehaviorBase">
            <summary>
            Base class helper for header behaviors which manipulate an element within a viewport of a <see cref="T:Microsoft.UI.Xaml.Controls.ListViewBase"/> based control.
            </summary>
        </member>
        <member name="F:AppControlManager.CustomUIElements.HeaderBehaviorBase._scrollViewer">
            <summary>
            The ScrollViewer associated with the ListViewBase control.
            </summary>
        </member>
        <member name="F:AppControlManager.CustomUIElements.HeaderBehaviorBase._scrollProperties">
            <summary>
            The CompositionPropertySet associated with the ScrollViewer.
            </summary>
        </member>
        <member name="F:AppControlManager.CustomUIElements.HeaderBehaviorBase._animationProperties">
            <summary>
            The CompositionPropertySet associated with the animation.
            </summary>
        </member>
        <member name="F:AppControlManager.CustomUIElements.HeaderBehaviorBase._headerVisual">
            <summary>
            The Visual associated with the header element.
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.HeaderBehaviorBase.Initialize">
            <summary>
            Attaches the behavior to the associated object.
            </summary>
            <returns>
              <c>true</c> if attaching succeeded; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:AppControlManager.CustomUIElements.HeaderBehaviorBase.Uninitialize">
            <summary>
            Detaches the behavior from the associated object.
            </summary>
            <returns>
              <c>true</c> if detaching succeeded; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:AppControlManager.CustomUIElements.HeaderBehaviorBase.AssignAnimation">
            <summary>
            Uses Composition API to get the UIElement and sets an ExpressionAnimation.
            </summary>
            <remarks>
            If this method returns true, you should have access to all protected fields with assigned components to use.
            </remarks>
            <returns><c>true</c> if the assignment was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:AppControlManager.CustomUIElements.HeaderBehaviorBase.StopAnimation">
            <summary>
            Stop the animation of the UIElement.
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.HeaderBehaviorBase.RemoveAnimation">
            <summary>
            Remove the animation from the UIElement.
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.StickyHeaderBehaviorV2.Show">
            <summary>
            Show the header
            </summary>
        </member>
        <member name="M:AppControlManager.CustomUIElements.StickyHeaderBehaviorV2.AssignAnimation">
            <inheritdoc/>
        </member>
        <member name="M:AppControlManager.CustomUIElements.StickyHeaderBehaviorV2.StopAnimation">
            <inheritdoc/>
        </member>
        <member name="M:AppControlManager.IntelGathering.CatRootScanner.Scan(System.Collections.Generic.List{System.String},System.UInt16)">
            <summary>
            Scans the CatRoot directory for security catalogs.
            </summary>
            <param name="paths">Directories to scan for .cat files. if not provided, "C:\Windows\System32\CatRoot" will be used.</param>
            <param name="scalability">How many concurrent threads will be used to scan the files in parallel. If not provided, 4 will be used.</param>
            <returns>A dictionary where each key is a hash and each value is the .Cat file path where the hash was found in.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.CertCNFetcher.GetCertCNs">
            <summary>
            Gets the common names (CN) of the certificates in the Personal certificate store of the Current User.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:AppControlManager.IntelGathering.DriveLetterMapper.DriveMapping">
            <summary>
            Class to store drive mapping information
            </summary>
            <param name="driveLetter">Property to store drive letter</param>
            <param name="volumeName">Property to store volume name</param>
            <param name="devicePath">Property to store device path</param>
        </member>
        <member name="M:AppControlManager.IntelGathering.DriveLetterMapper.DriveMapping.#ctor(System.String,System.String,System.String)">
            <summary>
            Class to store drive mapping information
            </summary>
            <param name="driveLetter">Property to store drive letter</param>
            <param name="volumeName">Property to store volume name</param>
            <param name="devicePath">Property to store device path</param>
        </member>
        <member name="M:AppControlManager.IntelGathering.DriveLetterMapper.GetGlobalRootDrives">
            <summary>
            A method that gets the DriveLetter mappings in the global root namespace
            And fixes these: \Device\Harddiskvolume
            </summary>
            <returns>A list of DriveMapping objects containing drive information</returns>
            <exception cref="T:System.ComponentModel.Win32Exception"></exception>
        </member>
        <member name="T:AppControlManager.IntelGathering.EventAction">
            <summary>
            Defines the action type of Code Integrity and AppLocker event logs.
            </summary>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            Two <see cref="T:AppControlManager.IntelGathering.FileIdentity"/> instances are considered equal if each non-null property (excluding the parent view models and computed properties)
            is equal. String comparisons are done using ordinal ignore case.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentity.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentity.CompareStrings(System.String,System.String)">
            <summary>
            Compares two strings using ordinal ignore case.
            If both strings are null, they are considered equal.
            </summary>
            <param name="s1">First string.</param>
            <param name="s2">Second string.</param>
            <returns><c>true</c> if the strings are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentity.CompareHashSets(System.Collections.Generic.HashSet{AppControlManager.IntelGathering.FileSignerInfo},System.Collections.Generic.HashSet{AppControlManager.IntelGathering.FileSignerInfo})">
            <summary>
            Compares two hash sets of FileSignerInfo for equality.
            Two sets are considered equal if they contain the same elements.
            </summary>
            <param name="set1">First hash set.</param>
            <param name="set2">Second hash set.</param>
            <returns><c>true</c> if the sets are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentity.CompareStringSets(System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String})">
            <summary>
            Compares two hash sets of strings for equality using ordinal ignore case.
            Two sets are considered equal if they contain the same elements.
            </summary>
            <param name="set1">First hash set.</param>
            <param name="set2">Second hash set.</param>
            <returns><c>true</c> if the sets are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentity.GetHashCodeForHashSet(System.Collections.Generic.HashSet{AppControlManager.IntelGathering.FileSignerInfo})">
            <summary>
            Computes an order-independent hash code for a hash set of FileSignerInfo.
            </summary>
            <param name="set">The hash set to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentity.GetHashCodeForStringSet(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Computes an order-independent hash code for a hash set of strings using ordinal ignore case.
            </summary>
            <param name="set">The hash set to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:AppControlManager.IntelGathering.FileIdentityComparer">
            <summary>
            A custom equality comparer for the FileIdentity class.
            This comparer is used to determine the uniqueness of FileIdentity instances
            based on specific properties.
            </summary>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentityComparer.Equals(AppControlManager.IntelGathering.FileIdentity,AppControlManager.IntelGathering.FileIdentity)">
             <summary>
             Determines whether two FileIdentity instances are equal.
             The instances are considered equal if all six specified properties are the same.
            
            
             Both FileIdentity Instances Are Null:
             Result: Equal(true).
            
            
             One Instance Is Null:
             Result: Not equal(false).
            
            
             Both Instances Are Not Null, with Some Properties Null:
             If a property is null in both instances, that property is considered equal.
             If a property is null in one instance but has a value in the other, that property is considered not equal.
             If all specified properties are equal (including handling of nulls), the instances are equal; otherwise, they are not.
            
             </summary>
             <param name="x">The first FileIdentity instance to compare.</param>
             <param name="y">The second FileIdentity instance to compare.</param>
             <returns>true if the instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentityComparer.GetHashCode(AppControlManager.IntelGathering.FileIdentity)">
            <summary>
            Returns a hash code for the given FileIdentity instance.
            The hash code is computed based on the six specified properties.
            </summary>
            <param name="obj">The FileIdentity instance for which to get the hash code.</param>
            <returns>A hash code for the given FileIdentity instance.</returns>
        </member>
        <member name="T:AppControlManager.IntelGathering.FileIdentityECCBasedHashSet">
            <summary>
            A custom collection that manages a set of FileIdentity objects,
            prioritizing items with IsECCSigned set to true over others when adding items
            with identical properties, based on the custom equality comparer.
            </summary>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentityECCBasedHashSet.#ctor">
            <summary>
            Initializes a new instance of the FileIdentityECCBasedHashSet class.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.FileIdentityECCBasedHashSet.FileIdentitiesInternal">
            <summary>
            Expose the internal HashSet so we can access it directly.
            </summary>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentityECCBasedHashSet.Add(AppControlManager.IntelGathering.FileIdentity)">
            <summary>
            Adds a FileIdentity item to the set, replacing an item if it exists and is less preferred.
            </summary>
            <param name="item">The FileIdentity item to add.</param>
            <returns>True if a new item is added or an existing item is replaced; false otherwise.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentityECCBasedHashSet.Contains(AppControlManager.IntelGathering.FileIdentity)">
            <summary>
            Checks if the set contains an item equivalent to the specified FileIdentity item.
            </summary>
            <param name="item">The FileIdentity item to check for.</param>
            <returns>True if an equivalent item exists in the set; false otherwise.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentityECCBasedHashSet.Remove(AppControlManager.IntelGathering.FileIdentity)">
            <summary>
            Removes an equivalent FileIdentity item from the set, if it exists.
            </summary>
            <param name="item">The FileIdentity item to remove.</param>
            <returns>True if the item was removed; false if it did not exist in the set.</returns>
        </member>
        <member name="P:AppControlManager.IntelGathering.FileIdentityECCBasedHashSet.Count">
            <summary>
            Gets the count of items in the set.
            </summary>
        </member>
        <member name="T:AppControlManager.IntelGathering.FileIdentitySignatureBasedHashSet">
             <summary>
             A custom collection that manages a set of FileIdentity objects,
             prioritizing signed FileIdentity items over unsigned ones when adding items
             with identical properties, based on the custom equality comparer.
             Mostly used for MDE Advanced Hunting logs.
            
             If an equivalent item (based on the FileIdentityComparer which takes priority) already exists, the method checks the SignatureStatus of both the existing item and the new item:
             If the existing item is unsigned and the new item is signed: The unsigned item is removed, and the signed item is added to the set.
             If the existing item is already signed: The new item, signed or unsigned, will simply not be added because they are considered equal according to the FileIdentityComparer.
             </summary>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentitySignatureBasedHashSet.#ctor">
            <summary>
            Initializes a new instance of the FileIdentitySignatureBasedHashSet class.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.FileIdentitySignatureBasedHashSet.FileIdentitiesInternal">
            <summary>
            Expose the internal HashSet so we can access it directly.
            </summary>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentitySignatureBasedHashSet.Add(AppControlManager.IntelGathering.FileIdentity)">
            <summary>
            Adds a FileIdentity item to the set.
            </summary>
            <param name="item">The FileIdentity item to add.</param>
            <returns>True if a new item is added or an unsigned item is replaced; false otherwise.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentitySignatureBasedHashSet.Contains(AppControlManager.IntelGathering.FileIdentity)">
            <summary>
            Checks if the set contains an item equivalent to the specified FileIdentity item.
            </summary>
            <param name="item">The FileIdentity item to check for.</param>
            <returns>True if an equivalent item exists in the set; false otherwise.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentitySignatureBasedHashSet.Remove(AppControlManager.IntelGathering.FileIdentity)">
            <summary>
            Removes an equivalent FileIdentity item from the set, if it exists.
            </summary>
            <param name="item">The FileIdentity item to remove.</param>
            <returns>True if the item was removed; false if it did not exist in the set.</returns>
        </member>
        <member name="P:AppControlManager.IntelGathering.FileIdentitySignatureBasedHashSet.Count">
            <summary>
            Gets the count of items in the set.
            </summary>
        </member>
        <member name="T:AppControlManager.IntelGathering.FileIdentityTimeBasedHashSet">
             <summary>
             A custom collection that manages a set of FileIdentity objects,
             prioritizing newer FileIdentity items over older ones when adding items
             with identical properties, based on the custom equality comparer.
             Used by event logs scanning.
            
             If an equivalent item (based on the FileIdentityComparer which takes priority) already exists,
             the method checks the TimeCreated property of both the existing item and the new item:
             If the existing item is older and the new item is newer: The older item is removed,
             and the newer item is added to the set.
             If the existing item is newer or has the same timestamp, the new item will not be added
             because they are considered equal or the existing one is preferred.
             </summary>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentityTimeBasedHashSet.#ctor">
            <summary>
            Initializes a new instance of the FileIdentityTimeBasedHashSet class.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.FileIdentityTimeBasedHashSet.FileIdentitiesInternal">
            <summary>
            Expose the internal HashSet so we can access it directly.
            </summary>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentityTimeBasedHashSet.Add(AppControlManager.IntelGathering.FileIdentity)">
            <summary>
            Adds a FileIdentity item to the set, replacing an older equivalent item if it exists.
            </summary>
            <param name="item">The FileIdentity item to add.</param>
            <returns>True if a new item is added or an older item is replaced; false otherwise.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentityTimeBasedHashSet.Contains(AppControlManager.IntelGathering.FileIdentity)">
            <summary>
            Checks if the set contains an item equivalent to the specified FileIdentity item.
            </summary>
            <param name="item">The FileIdentity item to check for.</param>
            <returns>True if an equivalent item exists in the set; false otherwise.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileIdentityTimeBasedHashSet.Remove(AppControlManager.IntelGathering.FileIdentity)">
            <summary>
            Removes an equivalent FileIdentity item from the set, if it exists.
            </summary>
            <param name="item">The FileIdentity item to remove.</param>
            <returns>True if the item was removed; false if it did not exist in the set.</returns>
        </member>
        <member name="P:AppControlManager.IntelGathering.FileIdentityTimeBasedHashSet.Count">
            <summary>
            Gets the count of items in the set.
            </summary>
        </member>
        <member name="T:AppControlManager.IntelGathering.FileSignerInfoComparer">
            <summary>
            A custom equality comparer for the FileSignerInfo class.
            This comparer is used to determine the uniqueness of FileSignerInfo instances
            based on PublisherTBSHash and IssuerTBSHash properties.
            </summary>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileSignerInfoComparer.Equals(AppControlManager.IntelGathering.FileSignerInfo,AppControlManager.IntelGathering.FileSignerInfo)">
            <summary>
            Determines whether two FileSignerInfo instances are equal.
            The instances are considered equal if both the PublisherTBSHash
            and IssuerTBSHash properties are equal.
            </summary>
            <param name="x">The first FileSignerInfo instance to compare.</param>
            <param name="y">The second FileSignerInfo instance to compare.</param>
            <returns>true if the instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.FileSignerInfoComparer.GetHashCode(AppControlManager.IntelGathering.FileSignerInfo)">
            <summary>
            Returns a hash code for the given FileSignerInfo instance.
            The hash code is computed based on the PublisherTBSHash and IssuerTBSHash properties.
            </summary>
            <param name="obj">The FileSignerInfo instance for which to get the hash code.</param>
            <returns>A hash code for the given FileSignerInfo instance.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.CodeIntegrityEventsRetriever(System.String)">
            <summary>
            Retrieves the Code Integrity events from the local and EVTX files
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.AppLockerEventsRetriever(System.String)">
            <summary>
            Retrieves the AppLocker events from the local and EVTX files
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.SetFileVersion(System.String)">
            <summary>
            Method to safely set FileVersion from a nullable string
            </summary>
            <param name="versionString"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.GetIntValue(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.String)">
            <summary>
            Method to safely get an integer value from the XML document
            </summary>
            <param name="xmlDoc"></param>
            <param name="nsManager"></param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.GetEventDataDateTimeValue(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.String)">
            <summary>
            Only works for the "EventData" node of the Event
            </summary>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.GetStringValue(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.String)">
            <summary>
            Returns null if the string is null, empty or whitespaces
            </summary>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.GetLongValue(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.String)">
            <summary>
            Retrieves a long integer value from an XML document based on a specified XPath expression.
            </summary>
            <param name="xmlDoc">The XML document from which the value is extracted.</param>
            <param name="nsManager">Manages the namespaces used in the XPath query.</param>
            <param name="xpath">The XPath expression used to locate the desired node in the XML document.</param>
            <returns>Returns the long integer value if found and valid, otherwise returns null.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.GetGuidValue(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.String)">
            <summary>
            Retrieves a GUID value from an XML document based on a specified XPath expression.
            </summary>
            <param name="xmlDoc">The XML document from which the GUID value is extracted.</param>
            <param name="nsManager">Manages the namespaces used in the XPath query.</param>
            <param name="xpath">The XPath expression used to locate the desired node in the XML document.</param>
            <returns>Returns the extracted GUID if found and valid, otherwise returns null.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.GetBooleanValue(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.String)">
            <summary>
            Retrieves a boolean value from an XML document based on a specified XPath expression.
            </summary>
            <param name="xmlDoc">The XML document from which the boolean value is extracted.</param>
            <param name="nsManager">Manages the namespaces used in the XPath expression for accurate node selection.</param>
            <param name="xpath">The XPath expression used to locate the desired node within the XML document.</param>
            <returns>Returns the boolean value found at the specified node or null if not found or not a valid boolean.</returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.GetValidatedRequestedSigningLevel(System.Nullable{System.Int32})">
            <summary>
            Resolves the Validated/Requested Signing Level int to friendly string
            </summary>
            <param name="SigningLevelInt"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.GetVerificationError(System.Nullable{System.Int32})">
            <summary>
            Resolves the VerificationError int to a friendly string
            </summary>
            <param name="VerificationError"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.GetSignatureType(System.Nullable{System.Int32})">
            <summary>
            Resolves the SignatureType int to a friendly string
            </summary>
            <param name="SignatureType"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.ResolvePath(System.String)">
            <summary>
            Replaces global root NT paths to the normal paths
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetEventLogsData.GetAppControlEvents(System.String,System.String,System.Int32)">
            <summary>
            Gets Code Integrity and AppLocker event logs Asynchronously
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetMDEAdvancedHuntingLogsData.Retrieve(System.Collections.Generic.List{AppControlManager.IntelGathering.MDEAdvancedHuntingData})">
            <summary>
            Finds the correlated events in the CSV data and groups them together based on the EtwActivityId.
            Ensures that each Audit or Blocked event has its correlated Signing information events grouped together.
            CodeIntegrity and AppLocker logs are considered separately in each group of EtwActivityId.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetMDEAdvancedHuntingLogsData.SetFileVersion(System.String)">
            <summary>
            Method to safely set FileVersion from a nullable string
            </summary>
            <param name="versionString"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetMDEAdvancedHuntingLogsData.GetIntValue(System.String)">
            <summary>
            Method to safely get an integer value from string
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetMDEAdvancedHuntingLogsData.GetEventDataDateTimeValue(System.String)">
            <summary>
            Safely converts string to DateTime
            </summary>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetMDEAdvancedHuntingLogsData.GetGuidValue(System.String)">
            <summary>
            Safely converts string to GUID
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetMDEAdvancedHuntingLogsData.GetValidatedRequestedSigningLevel(System.Nullable{System.Int32})">
            <summary>
            Resolves the Validated/Requested Signing Level int to friendly string
            </summary>
            <param name="SigningLevelInt"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetMDEAdvancedHuntingLogsData.GetVerificationError(System.Nullable{System.Int32})">
            <summary>
            Resolves the VerificationError int to a friendly string
            </summary>
            <param name="VerificationError"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.GetMDEAdvancedHuntingLogsData.GetSignatureType(System.Nullable{System.Int32})">
            <summary>
            Resolves the SignatureType int to a friendly string
            </summary>
            <param name="SignatureType"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.CertificatePresence.InferCertificatePresence(AppControlManager.SiPolicy.SiPolicy,System.String,System.String)">
            <summary>
            Takes in a policy object and certificate .cer file path and ensures the certificate's details is added to the policy as UpdatePolicySigner
            It also checks to see whether user selected certificate matches the user selected certificate common name.
            The reason we don't need to check signature of the deployed signed cip files in the EFI partition is because
            The user-selected XML policy's ID is already checked against the deployed signed policies and that provides the necessary signing details in the XML.
            </summary>
            <param name="policyObject"></param>
            <param name="certificatePath"></param>
            <param name="certCN"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.CertificatePresence.VerifyCertAndCNMatch(System.String,System.String)">
            <summary>
            Gets the path to a .cer certificate file and a certificate common name
            Makes sure the common name belongs to the certificate file
            </summary>
            <param name="certificatePath"></param>
            <param name="certCN"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.LocalFilesScan.Scan``1(System.ValueTuple{System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.Int32},System.UInt16,System.IProgress{System.Double},``0,System.Action{AppControlManager.IntelGathering.FileIdentity,``0})">
            <summary>
            Scans the local files and returns the scan results
            </summary>
            <param name="files">File paths to scan</param>
            <param name="scalability">How many parallel tasks to use during the scan</param>
            <param name="progressReporter">A callback method that will run to display the scan progress in real time and updates the value of its associated ProgressRing UI element.</param>
            <param name="assignVMRef">Assigns the reference to the ViewModel reference to each instance of the FileIdentity class so we can use it via compiled binding in XAML to navigate our way into the ViewModel Class in the ItemTemplate of the ListView and use it for XAML compiled binding of column widths.</param>
            <param name="VMRef">The reference to the ViewModel class.</param>
            <typeparam name="TReference">The generic type used for ViewModel class reference. There are mode than 1 type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.LocalFilesScan.GetOIDs(System.Collections.Generic.List{AppControlManager.Others.AllFileSigners})">
            <summary>
            Gets the EKU OIDs of the leaf certificates of all of the signers of a signed file, the ones that App Control policy uses for EKU-based authorization.
            Only the leaf certificates have EKUs, others such as root or intermediate have KUs only.
            </summary>
            <param name="fileSigners"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.LocalFilesScan.DetermineWHQL(System.Security.Cryptography.X509Certificates.X509ExtensionCollection)">
            <summary>
            Determines whether a file has WHQL signer among all of its signers
            </summary>
            <param name="Collection"></param>
            <returns></returns>
        </member>
        <member name="P:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.NullableBoolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.AdditionalFields">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.MDEAdvancedHuntingData">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.MDEAdvancedHuntingDataRootObject">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.ListMDEAdvancedHuntingData">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.NullableInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.Int64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.NullableInt64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:AppControlManager.IntelGathering.MDEAdvancedHuntingJSONSerializationContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:AppControlManager.IntelGathering.OptimizeMDECSVData.Optimize(System.String)">
            <summary>
            The Main method of the class.
            Optimizes the MDE CSV data by adding the nested properties in the "AdditionalFields" property to the parent record as first-level properties, all in one class.
            </summary>
            <param name="CSVFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.OptimizeMDECSVData.ReadCsv(System.String)">
            <summary>
            Converts an entire MDE Advanced Hunting CSV file into a list of classes.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="M:AppControlManager.IntelGathering.OptimizeMDECSVData.EnsureAllValuesAreQuoted(System.String)">
            <summary>
            Ensures the JSON string is well formatted. If a field has no double quotes, it will add them around it.
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.OptimizeMDECSVData.ParseCsvLine(System.String)">
            <summary>
            Parses each line/row of the CSV file.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.OptimizeMDECSVData.GetValue(System.String[],System.Collections.Generic.Dictionary{System.String,System.Int32},System.String)">
            <summary>
            Gets the value of a column from the CSV row and returns it.
            Returns null if the column does not exist or the value is empty.
            </summary>
            <param name="values"></param>
            <param name="headerMap"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.IntelGathering.OptimizeMDECSVData.JsonFixerRegex">
            <remarks>
            Pattern:<br/>
            <code>(?&lt;=:)\\s*(?!\\")([^\\",\\s]+)(?=\\s*,|\\s*})</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Zero-width positive lookbehind.<br/>
                ○ Match ':' right-to-left.<br/>
            ○ Match a whitespace character greedily any number of times.<br/>
            ○ Zero-width negative lookahead.<br/>
                ○ Match '"'.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [^",\s] greedily at least once.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match with 2 alternative expressions, atomically.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match ','.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match '}'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:AppControlManager.IntelGathering.PrepareEmptyPolicy.Prepare(System.String)">
            <summary>
            Copies the empty policy in app resources to the defined directory and returns its new path
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="T:AppControlManager.MainWindow">
            <summary>
            MainWindow is a sealed class that represents the main application window, managing navigation, UI elements, and
            event handling.
            </summary>
        </member>
        <member name="M:AppControlManager.MainWindow.BreadcrumbBar_ItemClicked(Microsoft.UI.Xaml.Controls.BreadcrumbBar,Microsoft.UI.Xaml.Controls.BreadcrumbBarItemClickedEventArgs)">
            <summary>
            Event handler for the BreadCrumbBar's ItemClicked event
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.MainWindow.#ctor">
            <summary>
            Initializes the main window, sets up event handlers, and configures UI elements like the title bar and navigation
            items.
            </summary>
        </member>
        <member name="M:AppControlManager.MainWindow.SetRegionsForCustomTitleBar">
            <summary>
            Specifies the interactive regions of the title bar in the AppTitleBar Grid.
            </summary>
        </member>
        <member name="M:AppControlManager.MainWindow.RestoreWindowSize">
            <summary>
            Event handler to run at Window launch to restore its size to the one before closing
            </summary>
        </member>
        <member name="M:AppControlManager.MainWindow.OnNavigationViewLocationChanged(System.Object,AppControlManager.AppSettings.NavigationViewLocationChangedEventArgs)">
            <summary>
            Event handler for the global NavigationView location change event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.MainWindow.OnNavigationBackgroundChanged(System.Object,AppControlManager.AppSettings.NavigationBackgroundChangedEventArgs)">
            <summary>
            Note: Keeping it transparent would probably not be good for accessibility.
            Changing it during runtime is not possible without trigger a theme change: Light/Dark.
            Application.RequestedTheme is read-only, so we us RootGrid which is the origin of all other elements.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.MainWindow.OnAppThemeChanged(System.Object,AppControlManager.AppSettings.AppThemeChangedEventArgs)">
            <summary>
            Event handler for the global AppThemeChanged event
            Also changes the AnimatedIcons based on the theme to maintain their accessibility
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.MainWindow.SearchBox_TextChanged(Microsoft.UI.Xaml.Controls.AutoSuggestBox,Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs)">
            <summary>
            Event handler for the AutoSuggestBox text change event
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.MainWindow.SearchBox_SuggestionChosen(Microsoft.UI.Xaml.Controls.AutoSuggestBox,Microsoft.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs)">
            <summary>
            Event handler for when a suggestion is chosen in the AutoSuggestBox
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.MainWindow.MainNavigation_ItemInvoked(Microsoft.UI.Xaml.Controls.NavigationView,Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs)">
            <summary>
            Main navigation event of the Nav View
            ItemInvoked event is much better than SelectionChanged because it allows click/tap on the same selected menu on main navigation
            which is necessary if the same main page is selected but user has navigated to inner pages and then wants to go back by selecting the already selected main navigation item again.
            The duplicate-loading logic is implemented manually in code behind.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.MainWindow.BackButtonTitleBar_Click">
            <summary>
            Event handler for when the back button is pressed
            </summary>
        </member>
        <member name="M:AppControlManager.MainWindow.MainWindow_SizeChanged(System.Object,Microsoft.UI.Xaml.WindowSizeChangedEventArgs)">
            <summary>
            Event handler for when the main app window's size changes
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.MainWindow.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.MainWindow.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:AppControlManager.Main.AppControlSimulation.Invoke(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            An Aux method that calls the main method then checks the result to make sure all files are allowed, if they are then returns true, otherwise returns false
            </summary>
            <param name="filePaths"></param>
            <param name="xmlFilePath"></param>
            <param name="noCatalogScanning"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Main.AppControlSimulation.Invoke(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.Boolean,System.Collections.Generic.List{System.String},System.UInt16,Microsoft.UI.Xaml.Controls.ProgressRing)">
            <summary>
            The main method that performs the App Control Simulation.
            </summary>
            <param name="filePaths"></param>
            <param name="folderPaths"></param>
            <param name="xmlFilePath"></param>
            <param name="noCatalogScanning"></param>
            <param name="catRootPath"></param>
            <param name="threadsCount"> The number of concurrent threads used to run the simulation </param>
            <param name="UIProgressRing"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Main.BasePolicyCreator.SetAutoUpdateDriverBlockRules">
            <summary>
            Creates scheduled task that keeps the Microsoft recommended driver block rules up to date on the system
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Main.BasePolicyCreator.DriversBlockListInfoGathering">
            <summary>
            Used to supply extra information regarding Microsoft recommended driver block rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Main.BasePolicyCreator.DeployDriversBlockRules(System.String)">
            <summary>
            A method to deploy the Vulnerable Driver Block List from the Microsoft servers and deploy it to the system
            </summary>
            <param name="StagingArea">The directory to use for temporary files</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:AppControlManager.Main.BasePolicyCreator.GetDriversBlockRules(System.String)">
            <summary>
            Downloads the latest Microsoft Recommended Block rules from Microsoft's GitHub repository
            And creates a valid Code Integrity XML policy file from it.
            </summary>
            <param name="StagingArea">The directory where the XML file will be saved to.</param>
            <returns>the path to the Microsoft recommended driver block rules base policy path and the policy version</returns>
        </member>
        <member name="M:AppControlManager.Main.BasePolicyCreator.BuildAllowMSFT(System.String,System.Boolean,System.Nullable{System.Double},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates and deploys an AllowMicrosoft policy based on various configurations and parameters.
            </summary>
            <param name="StagingArea">Specifies the directory where temporary policy files are stored during processing.</param>
            <param name="IsAudit">Indicates whether the policy should operate in audit mode, affecting logging behavior.</param>
            <param name="LogSize">Sets the size of the log for audit events, defaulting to zero if not specified.</param>
            <param name="deploy">Determines if the policy should be deployed after creation, enabling further actions.</param>
            <param name="RequireEVSigners">Specifies if extended validation signers are required for the policy.</param>
            <param name="EnableScriptEnforcement">Controls whether script enforcement is enabled within the policy.</param>
            <param name="TestMode">Indicates if the policy should be created in test mode, affecting its execution.</param>
            <param name="deployAppControlSupplementalPolicy">Indicates if a supplemental policy should be deployed alongside the main policy.</param>
            <param name="PolicyIDToUse">Allows the use of a specific policy ID if provided, overriding the generated one.</param>
            <param name="DeployMicrosoftRecommendedBlockRules">Specifies whether to deploy recommended block rules if no policy ID is provided.</param>
            <returns>Returns the path to the created policy</returns>
        </member>
        <member name="M:AppControlManager.Main.BasePolicyCreator.BuildDefaultWindows(System.String,System.Boolean,System.Nullable{System.Double},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates and configures a DefaultWindows policy based on various parameters, handling staging and deployment
            options.
            </summary>
            <param name="StagingArea">Specifies the directory where temporary policy files are stored during processing.</param>
            <param name="IsAudit">Indicates whether the policy should operate in audit mode, affecting logging behavior.</param>
            <param name="LogSize">Sets the size limit for the event log if audit mode is enabled.</param>
            <param name="deploy">Determines whether the policy should be deployed after creation.</param>
            <param name="RequireEVSigners">Specifies if extended validation signers are required for the policy.</param>
            <param name="EnableScriptEnforcement">Controls whether script enforcement is enabled in the policy.</param>
            <param name="TestMode">Indicates if the policy should be created in test mode, affecting its enforcement.</param>
            <param name="deployAppControlSupplementalPolicy">Specifies if a supplemental policy should be deployed alongside the main policy.</param>
            <param name="PolicyIDToUse">Allows the use of a specific policy ID instead of generating a new one.</param>
            <param name="DeployMicrosoftRecommendedBlockRules">Indicates whether to retrieve and deploy Microsoft recommended block rules.</param>
            <returns>Returns the path to the created Default Windows base policy</returns>
        </member>
        <member name="M:AppControlManager.Main.BasePolicyCreator.GetBlockRules(System.String,System.Boolean)">
            <summary>
            Gets the latest Microsoft Recommended block rules for User Mode files, removes the audit mode policy rule option and sets HVCI to strict
            It generates a XML file compliant with CI Policies Schema.
            </summary>
            <param name="StagingArea">Specifies the directory where temporary policy files are stored during processing.</param>
            <param name="deploy">Indicates whether the policy should be deployed after processing.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when no XML content is found in the downloaded markdown from the Microsoft GitHub source.</exception>
        </member>
        <member name="M:AppControlManager.Main.BasePolicyCreator.BuildSignedAndReputable(System.String,System.Boolean,System.Nullable{System.Double},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates SignedAndReputable App Control policy which is based on AllowMicrosoft template policy.
            It uses ISG to authorize files with good reputation.
            </summary>
            <param name="StagingArea">Specifies the directory where temporary policy files are stored during processing.</param>
            <param name="IsAudit">Indicates whether the operation should be performed in audit mode.</param>
            <param name="LogSize">Sets the size of the event log for recording actions taken during the process.</param>
            <param name="deploy">Determines if the policy should be deployed after creation.</param>
            <param name="RequireEVSigners">Specifies if extended validation signers are required for the policy.</param>
            <param name="EnableScriptEnforcement">Controls whether script enforcement is enabled in the policy.</param>
            <param name="TestMode">Indicates if the operation should run in test mode without making permanent changes.</param>
            <param name="deployAppControlSupplementalPolicy">Indicates if a supplemental policy should be deployed alongside the main policy.</param>
            <param name="PolicyIDToUse">Allows the use of a specific policy ID if provided, overriding the generated one.</param>
            <param name="DeployMicrosoftRecommendedBlockRules">Specifies whether to retrieve and deploy Microsoft recommended block rules.</param>
            <returns>Returns the signed and reputable base policy file path</returns>
        </member>
        <member name="M:AppControlManager.Main.BasePolicyCreator.BuildStrictKernelMode(System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates and deploys the Strict Kernel-mode base policy
            Since this is only Kernel-mode, we don't need to deploy the special AppControl Manager supplemental policy
            </summary>
            <param name="StagingArea">Specifies the directory where the policy file will be created and stored.</param>
            <param name="IsAudit">Indicates whether to add audit mode rules to the policy.</param>
            <param name="NoFlightRoots">Determines the filename variant used for the policy based on flight root settings.</param>
            <param name="deploy">Indicates whether the policy should be deployed after creation.</param>
            <param name="PolicyIDToUse">Specifies an optional policy ID to associate with the created policy.</param>
            <returns>the path to the Strict Kernel-mode base policy path</returns>
        </member>
        <member name="M:AppControlManager.Main.BasePolicyCreator.MyRegex">
            <remarks>
            Pattern:<br/>
            <code>&lt;VersionEx&gt;(.*?)&lt;\\/VersionEx&gt;</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "&lt;VersionEx&gt;".<br/>
            ○ 1st capture group.<br/>
                ○ Match a character other than '\n' lazily any number of times.<br/>
            ○ Match the string "&lt;/VersionEx&gt;".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:AppControlManager.Main.BasePolicyCreator.MyRegex1">
            <remarks>
            Pattern:<br/>
            <code>```xml\\s*(.*?)\\s*```</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled | RegexOptions.Singleline</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "```xml".<br/>
            ○ Match a whitespace character greedily any number of times.<br/>
            ○ 1st capture group.<br/>
                ○ Match any character lazily any number of times.<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match the string "```".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:AppControlManager.Main.CiFileHash.GetCiFileHashes(System.String)">
            <summary>
            Method that outputs all 4 kinds of hashes
            </summary>
            <param name="filePath">The path to the file that is going to be hashed</param>
            <returns>CodeIntegrityHashes object that contains all 4 kinds of hashes</returns>
        </member>
        <member name="M:AppControlManager.Main.CiRuleOptions.Set(System.String,System.Nullable{AppControlManager.Main.CiRuleOptions.PolicyTemplate},AppControlManager.SiPolicy.OptionType[],AppControlManager.SiPolicy.OptionType[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Configures the Policy rule options in a given XML file and sets the HVCI to Strict in the output XML file.
            It offers many ways to configure the policy rule options in a given XML file.
            All of its various parameters provide the flexibility that ensures only one pass is needed to configure the policy rule options.
            First the template is processed, then the individual boolean parameters, and finally the individual rules to add and remove.
            </summary>
            <param name="filePath">  Specifies the path to the XML file that contains the CI policy rules </param>
            <param name="template"> Specifies the template to use for the CI policy rules </param>
            <param name="rulesToAdd"> Specifies the rule options to add to the policy XML file </param>
            <param name="rulesToRemove">  Specifies the rule options to remove from the policy XML file </param>
            <param name="RequireWHQL"> Specifies whether to require WHQL signatures for all drivers </param>
            <param name="EnableAuditMode"> Specifies whether to enable audit mode </param>
            <param name="DisableFlightSigning"> Specifies whether to disable flight signing </param>
            <param name="RequireEVSigners"> Specifies whether to require EV signers </param>
            <param name="ScriptEnforcement"> Specifies whether to disable script enforcement </param>
            <param name="TestMode"> Specifies whether to enable test mode </param>
            <param name="RemoveAll"> Removes all the existing rule options from the policy XML file </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Main.CiPolicyTest.TestCiPolicy(System.String)">
            <summary>
            Gets the path to an App Control XML file and validates it against the schema
            </summary>
            <param name="xmlFilePath"></param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:AppControlManager.Main.UserConfigurationContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Main.UserConfigurationContext.NullableBoolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Main.UserConfigurationContext.UserConfiguration">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Main.UserConfigurationContext.DictionaryStringDateTime">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Main.UserConfigurationContext.DateTime">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Main.UserConfigurationContext.NullableDateTime">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Main.UserConfigurationContext.Guid">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Main.UserConfigurationContext.NullableGuid">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Main.UserConfigurationContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Main.UserConfigurationContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:AppControlManager.Main.UserConfigurationContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:AppControlManager.Main.UserConfigurationContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:AppControlManager.Main.UserConfigurationContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:AppControlManager.Main.UserConfigurationContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:AppControlManager.Main.UserConfiguration.Set(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.DateTime})">
            <summary>
            Sets user configuration settings to the JSON file
            By default all params are null, so use named parameters when calling this method for easy invocation
            </summary>
            <param name="SignedPolicyPath"></param>
            <param name="UnsignedPolicyPath"></param>
            <param name="SignToolCustomPath"></param>
            <param name="CertificateCommonName"></param>
            <param name="CertificatePath"></param>
            <param name="StrictKernelPolicyGUID"></param>
            <param name="LastUpdateCheck"></param>
            <param name="AutoUpdateCheck"></param>
            <param name="SignedPolicyStage1RemovalTimes"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Main.UserConfiguration.Get">
            <summary>
            Gets the current user configuration settings from the JSON file and return them
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Main.UserConfiguration.Remove(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Removes the user configurations from the JSON file one by one using the provided parameters
            </summary>
            <param name="SignedPolicyPath"></param>
            <param name="UnsignedPolicyPath"></param>
            <param name="SignToolCustomPath"></param>
            <param name="CertificateCommonName"></param>
            <param name="CertificatePath"></param>
            <param name="StrictKernelPolicyGUID"></param>
            <param name="LastUpdateCheck"></param>
            <param name="AutoUpdateCheck"></param>
            <param name="SignedPolicyStage1RemovalTimes"></param>
        </member>
        <member name="M:AppControlManager.Main.UserConfiguration.ParseJson(System.String)">
            <summary>
            Parses the JSON string and returns a UserConfiguration object
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Main.UserConfiguration.WriteUserConfiguration(AppControlManager.Main.UserConfiguration)">
            <summary>
            Writes the UserConfiguration object to the JSON file
            </summary>
            <param name="userConfiguration"></param>
        </member>
        <member name="M:AppControlManager.Main.UserConfiguration.AddSignedPolicyStage1RemovalTime(System.String,System.DateTime)">
            <summary>
            Adds a new key-value pair to the SignedPolicyStage1RemovalTimes dictionary.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to associate with the key.</param>
        </member>
        <member name="M:AppControlManager.Main.UserConfiguration.QuerySignedPolicyStage1RemovalTime(System.String)">
            <summary>
            Queries the SignedPolicyStage1RemovalTimes dictionary by key and returns the corresponding value.
            </summary>
            <param name="key">The key to query.</param>
            <returns>The value associated with the key, or null if the key does not exist.</returns>
        </member>
        <member name="M:AppControlManager.Main.UserConfiguration.RemoveSignedPolicyStage1RemovalTime(System.String)">
            <summary>
            Removes a key-value pair from the SignedPolicyStage1RemovalTimes dictionary by key.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if the key was successfully removed; false if the key was not found.</returns>
        </member>
        <member name="T:AppControlManager.MicrosoftGraph.AssignmentPayload">
            <summary>
            Represents a payload for assignments containing a dictionary of target properties. The dictionary maps string keys
            to object values.
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.AssignmentPayload.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Represents a payload for assignments containing a dictionary of target properties. The dictionary maps string keys
            to object values.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.AssignmentPayload.Target">
            <summary>
            The target properties dictionary.
            </summary>
        </member>
        <member name="T:AppControlManager.MicrosoftGraph.AuthenticationCompanion">
            <summary>
            Encapsulates the logic shared among the pages and ViewModels that implement Microsoft Graph functionality
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.AuthenticationCompanion.#ctor(System.Action{System.Boolean},AppControlManager.Others.InfoBarSettings,AppControlManager.MicrosoftGraph.AuthenticationContext)">
            <summary>
            The constructor needs methods to run when the Active Account is updated
            </summary>
            <param name="updateButtons"></param>
            <param name="infoBar"></param>
            <param name="authContext"></param>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.AuthenticationCompanion.AuthenticatedAccounts_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            To subscribe to the Saved Accounts Observable Collection's events to update the local instances automatically
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.AuthenticationCompanion.ShimmerListViewVisibilityConfig">
            <summary>
            To determine the visibility of the Shimmer/ListView based on the availability of elements in the AuthenticatedAccounts ObservableCollection
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.AuthenticationCompanion.AuthenticatedAccountsListViewVisibility">
            <summary>
            Visibility of the ListView that contains the list of the Authenticated Accounts
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.AuthenticationCompanion.AuthenticatedAccountsShimmerVisibility">
            <summary>
            Visibility of the Shimmer for the ListView that contains the list of the Authenticated Accounts 
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.AuthenticationCompanion.UpdateAccountDetails">
            <summary>
            Helper method to update computed properties when CurrentActiveAccount changes.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.AuthenticationCompanion.CurrentActiveAccountUsername">
            <summary>
            Computed property for Username.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.AuthenticationCompanion.CurrentActiveAccountTenantID">
            <summary>
            Computed property for TenantID.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.AuthenticationCompanion.CurrentActiveAccountAccountIdentifier">
            <summary>
            Computed property for Account Identifier.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.AuthenticationCompanion.CurrentActiveAccountPermissions">
            <summary>
            Computed property for Permissions.
            </summary>
        </member>
        <member name="F:AppControlManager.MicrosoftGraph.AuthenticationCompanion.cancellationTokenSource">
            <summary>
            To save the cancellation token source for sign in operation
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.AuthenticationCompanion.MSGraphCancelSignInButton_Click">
            <summary>
            Event handler for the Cancel Sign In button
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.AuthenticationCompanion.LogOutOfSelectedAccount">
            <summary>
            Logs out of the currently selected account.
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.AuthenticationCompanion.SetActiveFromListView">
            <summary>
            Set the selected item in the ListView as active account to use
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.AuthenticationCompanion.ManageButtonsStates(System.Boolean)">
            <summary>
            Enable or Disable button states
            </summary>
            <param name="on">True will enable and False will disable UI buttons when an operation is ongoing</param>
        </member>
        <member name="F:AppControlManager.MicrosoftGraph.AuthenticationCompanion.SignInMethodsComboBoxSource">
            <summary>
            Sign In methods ComboBox source
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.AuthenticationCompanion.SignInMethodsComboBoxSelectedItem">
            <summary>
            Bound to the ComboBox's SelectedItem property with the default value
            </summary>
        </member>
        <member name="F:AppControlManager.MicrosoftGraph.AuthenticationCompanion.AuthenticationContextComboBoxSource">
            <summary>
            Authentication context ComboBox source
            </summary>
        </member>
        <member name="F:AppControlManager.MicrosoftGraph.AuthenticationCompanion._AuthenticationContextComboBoxSelectedItem">
            <summary>
            Bound to the ComboBox's SelectedItem property.
            Default value is supplied via the class constructor.
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.AuthenticationCompanion.SignIn">
            <summary>
            Signs into the Microsoft tenant
            </summary>
        </member>
        <member name="T:AppControlManager.MicrosoftGraph.AuthenticationContext">
            <summary>
            Used to determine which scope to use
            </summary>
        </member>
        <member name="T:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy">
            <summary>
            Represents a single device configuration policy.
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.#ctor(System.String,System.String,System.Nullable{System.DateTimeOffset},System.Collections.Generic.List{System.String},System.Boolean,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.String,System.String,System.Int32,System.Collections.Generic.List{AppControlManager.MicrosoftGraph.OmaSettingBase64})">
            <summary>
            Represents a single device configuration policy.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.ODataType">
            <summary>
            Represents the OData type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.Id">
            <summary>
            Unique identifier for the policy.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.LastModifiedDateTime">
            <summary>
            Date and time when the policy was last modified.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.RoleScopeTagIds">
            <summary>
            List of role scope tag identifiers.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.SupportsScopeTags">
            <summary>
            Indicates whether the policy supports scope tags.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.DeviceManagementApplicabilityRuleOsEdition">
            <summary>
            OS edition rule for device management applicability.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.DeviceManagementApplicabilityRuleOsVersion">
            <summary>
            OS version rule for device management applicability.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.DeviceManagementApplicabilityRuleDeviceMode">
            <summary>
            Device mode rule for device management applicability.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.CreatedDateTime">
            <summary>
            Date and time when the policy was created.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.Description">
            <summary>
            Description of the policy.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.DisplayName">
            <summary>
            Display name of the policy.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.Version">
            <summary>
            Version of the policy.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy.OmaSettings">
            <summary>
            List of OMA settings.
            </summary>
        </member>
        <member name="T:AppControlManager.MicrosoftGraph.DeviceConfigurationPoliciesResponse">
            <summary>
            Represents the response from the Graph API that contains a list of device configuration policies.
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.DeviceConfigurationPoliciesResponse.#ctor(System.String,System.String,System.Collections.Generic.List{AppControlManager.MicrosoftGraph.DeviceConfigurationPolicy})">
            <summary>
            Represents the response from the Graph API that contains a list of device configuration policies.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPoliciesResponse.ODataContext">
            <summary>
            OData context information.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPoliciesResponse.MicrosoftGraphTips">
            <summary>
            Additional Microsoft Graph tips.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.DeviceConfigurationPoliciesResponse.Value">
            <summary>
            The list of device configuration policies.
            </summary>
        </member>
        <member name="T:AppControlManager.MicrosoftGraph.IntuneGroupItemListView">
            <summary>
            Used to store Intune group Names/ID and is served as a DataType for ListViews that show them
            </summary>
            <param name="groupName"></param>
            <param name="groupID"></param>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.IntuneGroupItemListView.#ctor(System.String,System.String)">
            <summary>
            Used to store Intune group Names/ID and is served as a DataType for ListViews that show them
            </summary>
            <param name="groupName"></param>
            <param name="groupID"></param>
        </member>
        <member name="F:AppControlManager.MicrosoftGraph.Main.ClientId">
            <summary>
            For Microsoft Graph Command Line Tools
            </summary>
        </member>
        <member name="F:AppControlManager.MicrosoftGraph.Main.DeviceConfigurationsURL">
            <summary>
            URL for Intune related operations
            </summary>
        </member>
        <member name="F:AppControlManager.MicrosoftGraph.Main.GroupsUrl">
            <summary>
            URL for M365 Groups
            </summary>
        </member>
        <member name="F:AppControlManager.MicrosoftGraph.Main.MDEAH">
            <summary>
            URL for Microsoft Defender for Endpoint Advanced Hunting queries
            </summary>
        </member>
        <member name="F:AppControlManager.MicrosoftGraph.Main.App">
            <summary>
            Initialize the Public Client Application
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.Main.GetWindowHandle">
            <summary>
            Helper method for WithParentActivityOrWindow that returns the window handle.
            </summary>
            <returns></returns>
        </member>
        <member name="F:AppControlManager.MicrosoftGraph.Main.Scopes">
            <summary>
            The correlation between scopes and required permissions
            </summary>
        </member>
        <member name="T:AppControlManager.MicrosoftGraph.Main.IRestrictedAuthenticatedAccounts">
            <summary>
            Interface to restrict access to the following two properties only within the Main class.
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.Main.RunMDEAdvancedHuntingQuery(System.String,AppControlManager.MicrosoftGraph.AuthenticatedAccounts)">
            <summary>
            Performs an Advanced Hunting query using Microsoft Defender for Endpoint
            Accepts a device name as an optional parameter for filtering
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.Main.FetchGroups(AppControlManager.MicrosoftGraph.AuthenticatedAccounts)">
            <summary>
            Fetches the M365 security groups
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.Main.SignIn(AppControlManager.MicrosoftGraph.AuthenticationContext,AppControlManager.MicrosoftGraph.SignInMethods)">
            <summary>
            Signs into a tenant
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.Main.SignOut(AppControlManager.MicrosoftGraph.AuthenticatedAccounts)">
            <summary>
            Signs out the user
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.Main.UploadPolicyToIntune(AppControlManager.MicrosoftGraph.AuthenticatedAccounts,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String)">
            <summary>
            Grabs the path to a CIP file and upload it to Intune.
            </summary>
            <param name="policyPath"></param>
            <param name="groupIds"></param>
            <param name="policyName"></param>
            <param name="policyID"></param>
            <param name="descriptionText"></param>
            <param name="account"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.Main.AssignIntunePolicyToGroup(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Assigns a group to the created Intune policy for multiple groups.
            </summary>
            <param name="policyId">The ID of the policy to assign.</param>
            <param name="accessToken">The access token used for authentication.</param>
            <param name="groupIds">An enumerable collection of group IDs to which the policy will be assigned.</param>
            <returns>A task that represents the asynchronous assignment operation.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the assignment fails for any of the groups.</exception>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.Main.CreateCustomIntunePolicy(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            https://learn.microsoft.com/mem/intune/configuration/custom-settings-windows-10
            </summary>
            <param name="accessToken"></param>
            <param name="policyData"></param>
            <param name="policyID"></param>
            <param name="policyName"></param>
            <param name="descriptionText"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.Main.ConvertBinFileToBase64(System.String,System.Int32)">
            <summary>
            Converts a binary file to a Base64 string after checking its size against a specified limit.
            </summary>
            <param name="filePath">Specifies the location of the binary file to be converted.</param>
            <param name="maxSizeInBytes">Defines the maximum allowable size for the file before conversion.</param>
            <returns>Returns the Base64 encoded string of the file's contents.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the file size exceeds the specified maximum limit.</exception>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.Main.RetrieveDeviceConfigurations(AppControlManager.MicrosoftGraph.AuthenticatedAccounts)">
            <summary>
            Retrieves the custom policies available in Intune
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.Main.DeletePolicy(AppControlManager.MicrosoftGraph.AuthenticatedAccounts,System.String)">
            <summary>
            Deletes a custom Intune policy identified by the given policy ID.
            </summary>
            <param name="policyId">The ID of the policy to delete.</param>
            <param name="account"></param>
            <returns>A task that represents the asynchronous delete operation.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the user is not authenticated or the deletion fails.</exception>
        </member>
        <member name="T:AppControlManager.MicrosoftGraph.MSGraphJsonContext">
            <summary>
            Defines a context for JSON serialization with specific options for formatting and ignoring null values. It includes
            serialization support for various types.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.AssignmentPayload">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.DeviceConfigurationPoliciesResponse">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.DeviceConfigurationPolicy">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.OmaSettingBase64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.QueryPayload">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.Windows10CustomConfiguration">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.CiPolicyInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.DictionaryStringObject">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.ListDeviceConfigurationPolicy">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.ListOmaSettingBase64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.ListString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.DateTimeOffset">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.NullableDateTimeOffset">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.JsonElement">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.Version">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.Object">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.StringArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.MSGraphJsonContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.MSGraphJsonContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.MSGraphJsonContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.MSGraphJsonContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:AppControlManager.MicrosoftGraph.OmaSettingBase64">
            <summary>
            Represents a configuration setting with properties for OData type, display name, description, URI, file name, and
            value.
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.OmaSettingBase64.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Represents a configuration setting with properties for OData type, display name, description, URI, file name, and
            value.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.OmaSettingBase64.ODataType">
            <summary>
            The OData type of the setting.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.OmaSettingBase64.DisplayName">
            <summary>
            The display name of the setting.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.OmaSettingBase64.Description">
            <summary>
            The description of the setting.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.OmaSettingBase64.OmaUri">
            <summary>
            The OMA URI for the setting.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.OmaSettingBase64.FileName">
            <summary>
            The file name associated with the setting.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.OmaSettingBase64.Value">
            <summary>
            The value of the setting.
            </summary>
        </member>
        <member name="T:AppControlManager.MicrosoftGraph.QueryPayload">
            <summary>
            Represents a payload for a query with an optional query string. The query string can be serialized to JSON.
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.QueryPayload.#ctor(System.String)">
            <summary>
            Represents a payload for a query with an optional query string. The query string can be serialized to JSON.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.QueryPayload.Query">
            <summary>
            The query string.
            </summary>
        </member>
        <member name="T:AppControlManager.MicrosoftGraph.SignInMethods">
            <summary>
            Different methods for the sign in process
            </summary>
        </member>
        <member name="F:AppControlManager.MicrosoftGraph.ViewModelForMSGraph.AuthenticatedAccounts">
            <summary>
            Collection bound to the ListViews that display the authenticated accounts in every page
            </summary>
        </member>
        <member name="T:AppControlManager.MicrosoftGraph.Windows10CustomConfiguration">
            <summary>
            Define the class structure for the custom policy
            </summary>
        </member>
        <member name="M:AppControlManager.MicrosoftGraph.Windows10CustomConfiguration.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{AppControlManager.MicrosoftGraph.OmaSettingBase64},System.Collections.Generic.List{System.String})">
            <summary>
            Define the class structure for the custom policy
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.Windows10CustomConfiguration.ODataType">
            <summary>
            Represents the OData type.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.Windows10CustomConfiguration.DisplayName">
            <summary>
            The display name of the custom configuration.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.Windows10CustomConfiguration.Description">
            <summary>
            The description of the custom configuration.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.Windows10CustomConfiguration.OmaSettings">
            <summary>
            The OMA settings associated with the configuration.
            </summary>
        </member>
        <member name="P:AppControlManager.MicrosoftGraph.Windows10CustomConfiguration.Platforms">
            <summary>
            The platforms applicable to the configuration.
            </summary>
        </member>
        <member name="T:AppControlManager.Others.AllFileSigners">
            <summary>
            Represents a signed CMS and its certificate chain
            </summary>
            <param name="signerCertificate"></param>
            <param name="certificateChain"></param>
        </member>
        <member name="M:AppControlManager.Others.AllFileSigners.#ctor(System.Security.Cryptography.Pkcs.SignedCms,System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Represents a signed CMS and its certificate chain
            </summary>
            <param name="signerCertificate"></param>
            <param name="certificateChain"></param>
        </member>
        <member name="T:AppControlManager.Others.AppUpdate">
            <summary>
            AppUpdate class is responsible for checking for application updates.
            </summary>
        </member>
        <member name="E:AppControlManager.Others.AppUpdate.UpdateAvailable">
            <summary>
            Event triggered when an update is available.
            Includes details about the availability status and the version.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.AppUpdate.CheckGitHub">
            <summary>
            Downloads the version file from GitHub,
            Checks the online version against the current app version,
            and raises the UpdateAvailable event if an update is found.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.AppUpdate.CheckStore">
            <summary>
            Checks for update based on the Store Context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Others.AppUpdate.CheckAtStartup">
            <summary>
            Runs at startup to perform update check.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.CertificateGenerator.BuildAppControlCertificate(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Generates a self-signed X.509 certificate with specified parameters and saves it to the user's personal store.
            </summary>
            <param name="CommonName">Specifies the name that will be associated with the generated certificate.</param>
            <param name="Password">Sets the password for protecting the private key of the generated certificate.</param>
            <param name="validity">Defines the duration in years for which the certificate will be valid.</param>
            <param name="keySize">Indicates the size of the key used for the certificate, affecting its security level.</param>
            <returns>Returns the generated X509Certificate2 object representing the newly created certificate.</returns>
        </member>
        <member name="M:AppControlManager.Others.CertificateGenerator.StoreCertificateInStore(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Nullable{AppControlManager.Others.CertificateGenerator.CertificateStoreLocation},System.Boolean)">
            <summary>
            Stores a certificate in a specified certificate store location, optionally including only the public key.
            </summary>
            <param name="cert">The certificate to be stored in the designated certificate store.</param>
            <param name="storeLocation">Indicates whether the certificate should be stored for the current user or the local machine.</param>
            <param name="publicKeyOnly">Determines if only the public key of the certificate should be stored.</param>
        </member>
        <member name="M:AppControlManager.Others.CertificateGenerator.DeleteCertificateByCN(System.String)">
            <summary>
            Searches through all the relevant certificate stores for any certificate with a given Subject Common Name
            And deletes all of the detected instances
            </summary>
            <param name="subjectName"></param>
        </member>
        <member name="M:AppControlManager.Others.CertificateGenerator.DeleteCertificateFromAllStores(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Deletes the certificate
            </summary>
            <param name="subjectName"></param>
            <param name="storeLocation"></param>
        </member>
        <member name="M:AppControlManager.Others.CertificateHelper.ComputeMd2(System.ReadOnlySpan{System.Byte})">
            <summary>
            Computes the MD2 hash of the given data using CryptoAPI.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.CertificateHelper.GetTBSCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Calculates the TBS value of a certificate
            </summary>
            <param name="cert"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Others.CertificateHelper.ConvertHexToOID(System.String)">
            <summary>
            Converts a hexadecimal string to an OID
            Used for converting hexadecimal values found in the EKU sections of the App Control policies to their respective OIDs.
            </summary>
            <param name="hex"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:AppControlManager.Others.CertificateType">
            <summary>
            Defines an enumeration for different types of certificates: Root, Intermediate, and Leaf. Each type is associated
            with a unique integer value.
            </summary>
        </member>
        <member name="T:AppControlManager.Others.ChainPackage">
            <summary>
            The full chain package of a signed file, includes all of the signature information
            </summary>
            <param name="certificatechain"></param>
            <param name="signedcms"></param>
            <param name="rootcertificate"></param>
            <param name="intermediatecertificates"></param>
            <param name="leafcertificate"></param>
        </member>
        <member name="M:AppControlManager.Others.ChainPackage.#ctor(System.Security.Cryptography.X509Certificates.X509Chain,System.Security.Cryptography.Pkcs.SignedCms,AppControlManager.Others.ChainElement,System.Collections.Generic.List{AppControlManager.Others.ChainElement},AppControlManager.Others.ChainElement)">
            <summary>
            The full chain package of a signed file, includes all of the signature information
            </summary>
            <param name="certificatechain"></param>
            <param name="signedcms"></param>
            <param name="rootcertificate"></param>
            <param name="intermediatecertificates"></param>
            <param name="leafcertificate"></param>
        </member>
        <member name="T:AppControlManager.Others.CiPolicyInfo">
            <summary>
            Represents a policy with various attributes.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.CiPolicyInfo.#ctor(System.String,System.String,System.String,System.Version,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Represents a policy with various attributes.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.PolicyID">
            <summary>
            Unique identifier for the policy.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.BasePolicyID">
            <summary>
            Identifier for the base policy.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.FriendlyName">
            <summary>
            Human-readable name of the policy.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.Version">
            <summary>
            Version object representing the policy version.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.VersionString">
            <summary>
            Original version string from the policy data.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.IsSystemPolicy">
            <summary>
            Indicates if it's a system policy.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.IsSignedPolicy">
            <summary>
            Indicates if the policy is signed.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.IsOnDisk">
            <summary>
            Indicates if the policy is present on disk.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.IsEnforced">
            <summary>
            Indicates if the policy is enforced.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.IsAuthorized">
            <summary>
            Indicates if the policy is authorized.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.PolicyOptions">
            <summary>
            List of options or settings related to the policy.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.PolicyOptionsDisplay">
            <summary>
            Gets a comma-separated string representation of the policy options.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.IntunePolicyObjectID">
            <summary>
            Intune Configuration policy ID
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.ParentViewModel">
            <summary>
            A reference to the parent view model for accessing compiled binding in XAML.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.CiPolicyInfo.OnlineParentViewModel">
            <summary>
            A reference to the parent view model for accessing compiled binding in XAML.
            For Online policies.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.CiPolicyInfo.ToJson(AppControlManager.Others.CiPolicyInfo)">
            <summary>
            Serializes the given <see cref="T:AppControlManager.Others.CiPolicyInfo"/> instance to a JSON string using source-generated JSON.
            </summary>
            <param name="policy">The policy instance to serialize.</param>
            <returns>A JSON string representation of the policy.</returns>
        </member>
        <member name="M:AppControlManager.Others.CiPolicyInfo.FromJson(System.String)">
            <summary>
            Deserializes a JSON string into a <see cref="T:AppControlManager.Others.CiPolicyInfo"/> instance using source-generated JSON.
            </summary>
            <param name="json">The JSON string to deserialize.</param>
            <returns>A <see cref="T:AppControlManager.Others.CiPolicyInfo"/> instance, or null if deserialization fails.</returns>
        </member>
        <member name="M:AppControlManager.Others.CiPolicyInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            Two <see cref="T:AppControlManager.Others.CiPolicyInfo"/> instances are considered equal if each non-null property is equal.
            String comparisons are done using ordinal ignore case.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:AppControlManager.Others.CiPolicyInfo.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:AppControlManager.Others.CiPolicyInfo.CompareStrings(System.String,System.String)">
            <summary>
            Compares two strings using ordinal ignore case.
            If both strings are null, they are considered equal.
            </summary>
            <param name="s1">First string.</param>
            <param name="s2">Second string.</param>
            <returns><c>true</c> if the strings are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AppControlManager.Others.CiPolicyInfo.CompareStringLists(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Compares two lists of strings for equality.
            Two lists are equal if both are null, or if they have the same count and each corresponding element is equal using ordinal ignore case.
            </summary>
            <param name="list1">First list.</param>
            <param name="list2">Second list.</param>
            <returns><c>true</c> if the lists are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AppControlManager.Others.CiToolHelper.Measure(System.String)">
            <summary>
            Converts a 64-bit unsigned integer into a version type, used for converting the numbers from CiTool.exe output to proper versions.
            </summary>
            <param name="number">The 64-bit unsigned integer as a string.</param>
            <returns>The parsed version</returns>
        </member>
        <member name="M:AppControlManager.Others.CiToolHelper.GetPolicies(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets a list of App Control policies on the system with filtering
            </summary>
            <param name="SystemPolicies">Will include System policies in the output</param>
            <param name="BasePolicies">Will include Base policies in the output</param>
            <param name="SupplementalPolicies">Will include Supplemental policies in the output</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:AppControlManager.Others.CiToolHelper.RemovePolicy(System.String)">
            <summary>
            Removes a deployed App Control policy from the system
            </summary>
            <param name="policyId">The GUID which is the policy ID of the policy to be removed.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:AppControlManager.Others.CiToolHelper.RemovePolicy(System.Collections.Generic.List{System.String})">
            <summary>
            Removes multiple deployed App Control policy from the system
            </summary>
            <param name="policyIds">The GUIDs which are the policy IDs of the policies to be removed.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:AppControlManager.Others.CiToolHelper.UpdatePolicy(System.String)">
            <summary>
            Deploys a Code Integrity policy on the system by accepting the .CIP file path
            </summary>
            <param name="CipPath"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Others.CiToolHelper.RefreshPolicy">
            <summary>
            Refreshes the currently deployed policies on the system
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Others.JsonElementExtensions.GetPropertyOrDefault(System.Text.Json.JsonElement,System.String,System.String)">
            <summary>
            Retrieves the value of a string property from a JSON element. If the property does not exist
            or is not a string, the provided default value is returned.
            </summary>
            <param name="element">The JSON element from which to retrieve the property.</param>
            <param name="propertyName">The name of the property to retrieve.</param>
            <param name="defaultValue">The default value to return if the property does not exist or is not a string.</param>
            <returns>The value of the property as a string if it exists and is of type string; otherwise, returns the default value.</returns>
        </member>
        <member name="M:AppControlManager.Others.JsonElementExtensions.GetPropertyOrDefault(System.Text.Json.JsonElement,System.String,System.Boolean)">
            <summary>
            Retrieves the value of a boolean property from a JSON element. If the property does not exist
            or is not a boolean, the provided default value is returned.
            </summary>
            <param name="element">The JSON element from which to retrieve the property.</param>
            <param name="propertyName">The name of the property to retrieve.</param>
            <param name="defaultValue">The default value to return if the property does not exist or is not a boolean.</param>
            <returns>The value of the property as a boolean if it exists and is of type boolean; otherwise, returns the default value.</returns>
        </member>
        <member name="M:AppControlManager.Others.JsonElementExtensions.GetPolicyOptionsOrDefault(System.Text.Json.JsonElement)">
            <summary>
            Retrieves a list of policy options from a JSON element. If no policy options are found or the
            element is not in the expected format, an empty list is returned.
            </summary>
            <param name="element">The JSON element containing the policy options.</param>
            <returns>A list of policy options as strings. Returns an empty list if no options are found
            or if the element is not formatted correctly.</returns>
        </member>
        <member name="M:AppControlManager.Others.ClipboardManagement.CopyText(System.String)">
            <summary>
            Takes a text and copies it to the OS clipboard.
            </summary>
            <param name="text">The text to be copied.</param>
        </member>
        <member name="F:AppControlManager.Others.DetailsRetrieval.codeIntegrityFlags">
            <summary>
            Define a dictionary to map option flags to their corresponding descriptions
            </summary>
        </member>
        <member name="M:AppControlManager.Others.DetailsRetrieval.Get">
            <summary>
            Gets the system code integrity information
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Others.CodeIntegrityPolicy.EnsureSigningScenario(System.UInt32,System.String)">
            <summary>
            Creates the Signing Scenarios node or each Signing Scenario and their respective Product Signers
            </summary>
            <param name="scenarioValue"></param>
            <param name="scenarioId"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Others.CodeIntegrityPolicy.Save(System.Xml.XmlDocument,System.String)">
            <summary>
            Saves the XML object to a file and removes any unused nodes that would cause errors if left without members
            </summary>
            <param name="XMLObject"></param>
            <param name="XMLFilePath"></param>
        </member>
        <member name="M:AppControlManager.Others.ConfigureISGServices.SetServiceStartType(System.String,AppControlManager.Others.ConfigureISGServices.ServiceStartType)">
            <summary>
            Sets the start mode of a Windows service.
            </summary>
            <param name="serviceName">The short name of the service.</param>
            <param name="startType">Desired start type.</param>
        </member>
        <member name="T:AppControlManager.Others.ConfigureISGServices.ServiceStartType">
            <summary>
            Available service start types.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.ConfigureISGServices.Configure">
            <summary>
            Starts the AppIdTel and sets the AppIDSvc service to auto start
            </summary>
        </member>
        <member name="M:AppControlManager.Others.CryptoAPI.GetNameString(System.IntPtr,System.Int32,System.String,System.Boolean)">
            <summary>
            The main method of the class to get the name string
            </summary>
            <param name="pCertContext"></param>
            <param name="dwType"></param>
            <param name="pvTypePara"></param>
            <param name="isIssuer"></param>
            <returns></returns>
        </member>
        <member name="P:AppControlManager.Others.DeviceGuardJsonContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.DeviceGuardJsonContext.NullableBoolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.DeviceGuardJsonContext.Byte">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.DeviceGuardJsonContext.NullableByte">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.DeviceGuardJsonContext.DeviceGuardInteropClass">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.DeviceGuardJsonContext.ListString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.DeviceGuardJsonContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.DeviceGuardJsonContext.NullableInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.DeviceGuardJsonContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.DeviceGuardJsonContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.DeviceGuardJsonContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.DeviceGuardJsonContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:AppControlManager.Others.DeviceGuardJsonContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:AppControlManager.Others.DeviceGuardJsonContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:AppControlManager.Others.DeviceGuardInfo.GetDeviceGuardStatus">
            <summary>
            Get the Device Guard status information from the Win32_DeviceGuard WMI class
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Others.ErrorWriter.FormatException(System.Exception)">
            <summary>
            When an exception is raised by the app, writes the full details to the log file for review
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:AppControlManager.Others.EventLogUtility">
            <summary>
            Monitors the max-size of a Windows Event Log channel via registry notifications
            and exposes it as a bindable property.
            </summary>
        </member>
        <member name="F:AppControlManager.Others.EventLogUtility.MaxNumberBoxValue">
            <summary>
            Bound to the max value of NumberBoxes in the XAML.
            </summary>
        </member>
        <member name="F:AppControlManager.Others.EventLogUtility._MaxSizeMB">
            <summary>
            Current maximum log size in megabytes (MB).
            </summary>
        </member>
        <member name="M:AppControlManager.Others.EventLogUtility.ReadMaxSizeBytes">
            <summary>
            Reads the 64-bit MaxSize split across two 32-bit values: MaxSize (low) and MaxSizeUpper (high).
            Handles negative Int32 values by wrapping to the correct uint.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.EventLogUtility.ToUInt32Wrapped(System.Object)">
            <summary>
            Safely convert registry raw value (int, long, ulong, uint, byte) to uint,
            wrapping negative signed values to the corresponding unsigned representation.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.EventLogUtility.SetLogSize(System.Double)">
            <summary>
            Increase Code Integrity Operational Event Logs size from the default 1MB to user-defined size.
            Also automatically increases the log size by 1MB if the current free space is less than 1MB and the current maximum log size is less than or equal to 10MB.
            This is to prevent infinitely expanding the max log size automatically.
            Caps user-defined sizes at Int64.MaxValue to avoid overflow.
            </summary>
            <param name="logSize">Size of the Code Integrity Operational Event Log (in MB)</param>
        </member>
        <member name="M:AppControlManager.Others.EventLogUtility.SafeAdd(System.Int64,System.Int64)">
            <summary>
            Adds two Int64 values safely, capping at Int64.MaxValue to prevent overflow.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.ExFileInfo.OriginalFileName">
            <summary>
            Holds the original name of the file. It can be null if no name is provided.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.ExFileInfo.InternalName">
            <summary>
            Represents the internal name of an entity, which can be null. It is a string property that can be accessed and
            modified.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.ExFileInfo.ProductName">
            <summary>
            Represents the name of a product. It can be null, indicating that the product name is not specified.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.ExFileInfo.Version">
            <summary>
            Represents the version of an object, allowing for nullable values. It can be used to track or specify the
            versioning of data.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.ExFileInfo.FileDescription">
            <summary>
            Represents an optional description of a file. It can hold a string value or be null.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.FileAccessCheck.IsFileAccessibleForWrite(System.String)">
            <summary>
            Checks if the file can be opened with both read and write permissions using native API.
            </summary>
            <param name="filePath">The full path to the file.</param>
            <returns>True if the file is accessible for modification; otherwise, false.</returns>
        </member>
        <member name="T:AppControlManager.Others.FileBasedInfoPackage">
            <summary>
            Used by the BuildSignerAndHashObjects method to store and return the output
            </summary>
            <param name="filepublishersigners">Data to create FilePublisher level rules for.</param>
            <param name="publishersigners">Data to create Publisher level rules for.</param>
            <param name="completehashes">Data to create Hash rules for.</param>
            <param name="filePaths">Data to create File path rules for.</param>
            <param name="pfnRules">Data to create PFN (Package Family Name) rules for.</param>
        </member>
        <member name="M:AppControlManager.Others.FileBasedInfoPackage.#ctor(System.Collections.Generic.List{AppControlManager.Others.FilePublisherSignerCreator},System.Collections.Generic.List{AppControlManager.Others.PublisherSignerCreator},System.Collections.Generic.List{AppControlManager.Others.HashCreator},System.Collections.Generic.List{AppControlManager.Others.FilePathCreator},System.Collections.Generic.List{AppControlManager.Others.PFNRuleCreator})">
            <summary>
            Used by the BuildSignerAndHashObjects method to store and return the output
            </summary>
            <param name="filepublishersigners">Data to create FilePublisher level rules for.</param>
            <param name="publishersigners">Data to create Publisher level rules for.</param>
            <param name="completehashes">Data to create Hash rules for.</param>
            <param name="filePaths">Data to create File path rules for.</param>
            <param name="pfnRules">Data to create PFN (Package Family Name) rules for.</param>
        </member>
        <member name="T:AppControlManager.Others.FileCertificateInfoCol">
            <summary>
            A class that represents each certificate in a chain
            Used by the ListView in the View File Certificates page
            </summary>
        </member>
        <member name="T:AppControlManager.Others.FileDialogHelper">
            <summary>
            https://learn.microsoft.com/uwp/api/windows.storage.pickers.filesavepicker?view=winrt-26100
            This class uses unmanaged code, "allowMarshaling" should be "false" for CsWin32 JSON settings.
            Using P/Invoke because when running as Admin, WinAppSDK's file picker doesn't work.
            https://learn.microsoft.com/uwp/api/windows.storage.pickers.filesavepicker?view=winrt-26100#in-a-desktop-app-that-requires-elevation
            </summary>
        </member>
        <member name="M:AppControlManager.Others.FileDialogHelper.ShowFilePickerDialog(System.String)">
            <summary>
            Opens a file picker dialog to select a single file.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Others.FileDialogHelper.ShowMultipleFilePickerDialog(System.String)">
            <summary>
            Opens a file picker dialog to select multiple files.
            </summary>
            <param name="filter">A file filter string in the format "Description|Extension" pairs
            (e.g., "Text Files|*.txt|All Files|*.*").</param>
            <returns>A list of selected file paths or null if the operation is cancelled.</returns>
        </member>
        <member name="M:AppControlManager.Others.FileDialogHelper.ShowDirectoryPickerDialog">
            <summary>
            Opens a folder picker dialog to select a single folder.
            </summary>
            <returns>The selected directory path as a string, or null if the operation is cancelled.</returns>
        </member>
        <member name="M:AppControlManager.Others.FileDialogHelper.ShowMultipleDirectoryPickerDialog">
            <summary>
            Opens a folder picker dialog to select multiple folders.
            </summary>
            <returns>A list of selected directory paths or null if cancelled.</returns>
        </member>
        <member name="T:AppControlManager.Others.FilePublisherSignerCreator">
            <summary>
            Used to create FilePublisher rule for a file.
            </summary>
            <param name="certificateDetails"></param>
            <param name="fileVersion"></param>
            <param name="fileDescription"></param>
            <param name="internalName"></param>
            <param name="originalFileName"></param>
            <param name="packageFamilyName"></param>
            <param name="productName"></param>
            <param name="fileName"></param>
            <param name="authenticodeSHA256"></param>
            <param name="authenticodeSHA1"></param>
            <param name="siSigningScenario"></param>
        </member>
        <member name="M:AppControlManager.Others.FilePublisherSignerCreator.#ctor(System.Collections.Generic.List{AppControlManager.Others.CertificateDetailsCreator},System.Version,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Used to create FilePublisher rule for a file.
            </summary>
            <param name="certificateDetails"></param>
            <param name="fileVersion"></param>
            <param name="fileDescription"></param>
            <param name="internalName"></param>
            <param name="originalFileName"></param>
            <param name="packageFamilyName"></param>
            <param name="productName"></param>
            <param name="fileName"></param>
            <param name="authenticodeSHA256"></param>
            <param name="authenticodeSHA1"></param>
            <param name="siSigningScenario"></param>
        </member>
        <member name="M:AppControlManager.Others.GetAppsList.Get">
            <summary>
            Gets the list of all installed Packaged Apps
            </summary>
            <returns></returns>
        </member>
        <member name="T:AppControlManager.Others.GetExtendedFileAttrib">
            <summary>
            Represents extended file information, including properties like original file name, internal name, product name, and
            version.
            </summary>
        </member>
        <member name="F:AppControlManager.Others.GetExtendedFileAttrib.UnicodeFallbackCode">
            <summary>
            Constants used for encoding fallback and error handling
            </summary>
        </member>
        <member name="F:AppControlManager.Others.GetExtendedFileAttrib.FILE_VER_GET_NEUTRAL">
            <summary>
            Constant representing the neutral file version, set to 2. Used for identifying a specific version in file
            operations.
            </summary>
        </member>
        <member name="F:AppControlManager.Others.GetExtendedFileAttrib.HR_ERROR_RESOURCE_TYPE_NOT_FOUND">
            <summary>
            Represents an error code indicating that a specified resource type could not be found. The value is -2147023083.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.GetExtendedFileAttrib.Get(System.String)">
            <summary>
            Retrieves extended file information, including version, original file name, internal name, file description, and
            product name.
            </summary>
            <param name="filePath">Specifies the path to the file for which extended information is being retrieved.</param>
            <returns>Returns an object containing the extended file information, with properties set to null in case of an error.</returns>
        </member>
        <member name="M:AppControlManager.Others.GetExtendedFileAttrib.TryGetVersion(System.Span{System.Byte},System.Version@)">
            <summary>
            Extracts version information from a byte array and outputs it as a Version object.
            </summary>
            <param name="data">The byte array containing version information to be extracted.</param>
            <param name="version">Outputs the extracted version information as a Version object.</param>
            <returns>Returns true if the version was successfully extracted, otherwise false.</returns>
        </member>
        <member name="M:AppControlManager.Others.GetExtendedFileAttrib.TryGetLocaleAndEncoding(System.Span{System.Byte},System.String@,System.String@)">
            <summary>
            Extracts locale and encoding information from a byte span.
            </summary>
            <param name="data">The byte span containing data from which locale and encoding are extracted.</param>
            <param name="locale">Outputs the locale information derived from the data.</param>
            <param name="encoding">Outputs the encoding information derived from the data.</param>
            <returns>Returns a boolean indicating the success of the extraction process.</returns>
        </member>
        <member name="M:AppControlManager.Others.GetExtendedFileAttrib.GetLocalizedResource(System.Span{System.Byte},System.String,System.String,System.String)">
            <summary>
            Retrieves a localized resource string using specified encoding and locale from a version block.
            </summary>
            <param name="versionBlock">This parameter provides the binary data containing version information.</param>
            <param name="encoding">Specifies the character encoding to be used for interpreting the resource string.</param>
            <param name="locale">Indicates the locale for which the resource string is being requested.</param>
            <param name="resource">Identifies the specific resource string to retrieve from the version information.</param>
            <returns>Returns the localized resource string or null if not found.</returns>
        </member>
        <member name="M:AppControlManager.Others.GetExtendedFileAttrib.CheckAndSetNull(System.String)">
            <summary>
            Check if a string is null or whitespace and return null if it is
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AppControlManager.Others.GetExtendedFileAttrib.FileVersionInfo">
            <summary>
            Structure to hold file version information
            </summary>
        </member>
        <member name="T:AppControlManager.Others.FileUtility.FileInfoComparer">
            <summary>
            Custom HashSet comparer to compare two FileInfo objects based on their FullName (full path of file)
            </summary>
        </member>
        <member name="M:AppControlManager.Others.FileUtility.GetFilesFast(System.IO.DirectoryInfo[],System.IO.FileInfo[],System.String[])">
            <summary>
            A flexible and fast method that can accept directory paths and file paths as input and return a list of FileInfo objects that are compliant with the App Control policy.
            It supports custom extensions to filter by as well.
            </summary>
            <param name="directories">Directories to process.</param>
            <param name="files">Files to process.</param>
            <param name="extensionsToFilterBy">Extensions to filter by. If null or empty, default App Control supported extensions are used.</param>
            <returns>A Tuple containing the IEnumerable and count of the data</returns>
        </member>
        <member name="T:AppControlManager.Others.Opus">
            <summary>
            For retrieving Opus data from signed files
            </summary>
        </member>
        <member name="F:AppControlManager.Others.Opus.SPC_SP_OPUS_INFO_STRUCT">
            <summary>
            More info about this at the end of the code
            </summary>
        </member>
        <member name="F:AppControlManager.Others.Opus.SPC_SP_OPUS_INFO_OBJID">
            <summary>
            for the SpcSpOpusInfo structure
            </summary>
        </member>
        <member name="T:AppControlManager.Others.GlobalVars">
            <summary>
            This class defines constants and other variables used by the entire application
            </summary>
        </member>
        <member name="T:AppControlManager.Others.HashMismatchInCertificateException">
            <summary>
            a class to throw a custom exception when the certificate has HashMismatch
            </summary>
        </member>
        <member name="M:AppControlManager.Others.HashMismatchInCertificateException.#ctor">
            <summary>
            Initializes a new instance of the HashMismatchInCertificateException class. This constructor does not take any
            parameters.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.HashMismatchInCertificateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HashMismatchInCertificateException class with a specified error message.
            </summary>
            <param name="message">The error message that describes the reason for the exception.</param>
        </member>
        <member name="M:AppControlManager.Others.HashMismatchInCertificateException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the HashMismatchInCertificateException class with a message and function name.
            </summary>
            <param name="message">Provides details about the error encountered.</param>
            <param name="functionName">Indicates the name of the function where the error occurred.</param>
        </member>
        <member name="M:AppControlManager.Others.HashMismatchInCertificateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the HashMismatchInCertificateException class with a specified error message and an
            inner exception.
            </summary>
            <param name="message">Provides a description of the error that occurred.</param>
            <param name="innerException">Holds the exception that is the cause of the current exception.</param>
        </member>
        <member name="T:AppControlManager.Others.InfoBarSettings">
            <summary>
            Used to pass ViewModel based properties of an InfoBar element to a class constructor
            in a way that the receiver will be able to modify the original objects.
            </summary>
            <param name="getVisibility"></param>
            <param name="setVisibility"></param>
            <param name="getIsOpen"></param>
            <param name="setIsOpen"></param>
            <param name="getMessage"></param>
            <param name="setMessage"></param>
            <param name="getSeverity"></param>
            <param name="setSeverity"></param>
            <param name="getIsClosable"></param>
            <param name="setIsClosable"></param>
        </member>
        <member name="M:AppControlManager.Others.InfoBarSettings.#ctor(System.Func{Microsoft.UI.Xaml.Visibility},System.Action{Microsoft.UI.Xaml.Visibility},System.Func{System.Boolean},System.Action{System.Boolean},System.Func{System.String},System.Action{System.String},System.Func{Microsoft.UI.Xaml.Controls.InfoBarSeverity},System.Action{Microsoft.UI.Xaml.Controls.InfoBarSeverity},System.Func{System.Boolean},System.Action{System.Boolean})">
            <summary>
            Used to pass ViewModel based properties of an InfoBar element to a class constructor
            in a way that the receiver will be able to modify the original objects.
            </summary>
            <param name="getVisibility"></param>
            <param name="setVisibility"></param>
            <param name="getIsOpen"></param>
            <param name="setIsOpen"></param>
            <param name="getMessage"></param>
            <param name="setMessage"></param>
            <param name="getSeverity"></param>
            <param name="setSeverity"></param>
            <param name="getIsClosable"></param>
            <param name="setIsClosable"></param>
        </member>
        <member name="T:AppControlManager.Others.ListViewHelper">
            <summary>
            This class includes methods that are helpers for the custom ListView implementations in this application.
            </summary>
        </member>
        <member name="T:AppControlManager.Others.ListViewHelper.ListViewsRegistry">
            <summary>
            A list of all of the ListViews in this application
            </summary>
        </member>
        <member name="F:AppControlManager.Others.ListViewHelper.ListViewsCache">
            <summary>
            Stores a reference to all of the ListViews currently available in the visual tree
            </summary>
        </member>
        <member name="F:AppControlManager.Others.ListViewHelper.ListViewsScrollViewerCache">
            <summary>
            Stores a reference to the ScrollViewers inside all of the ListViews currently available in the visual tree
            </summary>
        </member>
        <member name="M:AppControlManager.Others.ListViewHelper.Register(AppControlManager.Others.ListViewHelper.ListViewsRegistry,Microsoft.UI.Xaml.Controls.ListView,Microsoft.UI.Xaml.Controls.ScrollViewer)">
            <summary>
            Registers a ListView and its ScrollViewer in the caches.
            </summary>
            <param name="key"></param>
            <param name="listView"></param>
            <param name="viewer"></param>
        </member>
        <member name="M:AppControlManager.Others.ListViewHelper.Unregister(AppControlManager.Others.ListViewHelper.ListViewsRegistry)">
            <summary>
            Removes the references to a ListView and its ScrollViewer in the caches.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AppControlManager.Others.ListViewHelper.GetListViewFromCache(AppControlManager.Others.ListViewHelper.ListViewsRegistry)">
            <summary>
            Used to retrieve the ListView from the cache.
            </summary>
            <param name="key">the key used for retrieval.</param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Others.ListViewHelper.GetScrollViewerFromCache(AppControlManager.Others.ListViewHelper.ListViewsRegistry)">
            <summary>
            Used to retrieve a ScrollViewer from the cache.
            </summary>
            <param name="key">the key used for retrieval.</param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Others.ListViewHelper.FindScrollViewer(Microsoft.UI.Xaml.DependencyObject)">
            <summary>
            Walks the VisualTree under 'element' and returns the first ScrollViewer it finds.
            </summary>
        </member>
        <member name="F:AppControlManager.Others.ListViewHelper.tb">
            <summary>
            An offscreen TextBlock for measurement
            </summary>
        </member>
        <member name="M:AppControlManager.Others.ListViewHelper.MeasureText(System.String)">
            <summary>
            Measures the text width (in pixels) required to display the given text.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.ListViewHelper.ConvertRowToText(System.Collections.Generic.IList{System.Object})">
            <summary>
            Formats one or more FileIdentity instances into a string.
            Only non-null and, in the case of strings, non-empty properties are included.
            Each instance's output is separated by a delimiter line.
            </summary>
            <param name="fileIdentities">An array of FileIdentity instances to format.</param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Others.ListViewHelper.CopyToClipboard(System.Func{AppControlManager.IntelGathering.FileIdentity,System.String},Microsoft.UI.Xaml.Controls.ListView)">
            <summary>
            Copies a specified property of a selected file identity to the clipboard if it exists.
            </summary>
            <param name="getProperty">A function that retrieves a specific property value from a file identity.</param>
            <param name="lw">A list view component that displays file identities and allows selection.</param>
        </member>
        <member name="M:AppControlManager.Others.ListViewHelper.SelectAll(Microsoft.UI.Xaml.Controls.ListView,System.Collections.IList)">
            <summary>
            Select all of the items in the ListView's ItemsSource
            </summary>
            <param name="lw"></param>
            <param name="source"></param>
        </member>
        <member name="T:AppControlManager.Others.ListViewHelper.SortState">
            <summary>
            Used to store sorting states of columns in ListViews
            </summary>
        </member>
        <member name="M:AppControlManager.Others.ListViewHelper.SortColumn``1(System.Func{AppControlManager.IntelGathering.FileIdentity,``0},System.String,System.Collections.Generic.List{AppControlManager.IntelGathering.FileIdentity},System.Collections.ObjectModel.ObservableCollection{AppControlManager.IntelGathering.FileIdentity},AppControlManager.Others.ListViewHelper.SortState,System.String,AppControlManager.Others.ListViewHelper.ListViewsRegistry)">
            <summary>
            Sorts the ObservableCollection using the given key selector.
            The SortState parameter toggles sort order when the same column is pressed.
            </summary>
            <typeparam name="T">The type returned by the key selector.</typeparam>
            <param name="keySelector">Function to obtain the sort key from the FileIdentity.</param>
            <param name="searchBoxText">The Text used for filtering.</param>
            <param name="originalList">The full list (if no filter is active).</param>
            <param name="observableCollection">The observable collection to update.</param>
            <param name="sortState">An object that holds the current sort state.</param>
            <param name="newKey">The key for the column being sorted (from the button’s Tag).</param>
            <param name="regKey">used to find the ListView in the cache.</param>
        </member>
        <member name="M:AppControlManager.Others.ListViewHelper.ApplyFilters(System.Collections.Generic.IEnumerable{AppControlManager.IntelGathering.FileIdentity},System.Collections.ObjectModel.ObservableCollection{AppControlManager.IntelGathering.FileIdentity},System.String,Microsoft.UI.Xaml.Controls.CalendarDatePicker,AppControlManager.Others.ListViewHelper.ListViewsRegistry)">
            <summary>
            Applies the search (and optional date) filters to the provided data.
            </summary>
            <param name="allFileIdentities">
            The complete list of FileIdentity objects (unfiltered).
            </param>
            <param name="filteredCollection">
            The ObservableCollection that will be populated with the filtered results.
            </param>
            <param name="searchText">
            The search term.
            </param>
            <param name="datePicker">
            An optional CalendarDatePicker for date filtering. If null, no date filtering is applied.
            </param>
            <param name="regKey">used to find the ListView in the cache.</param>
        </member>
        <member name="M:AppControlManager.Others.ListViewHelper.SmoothScrollIntoViewWithIndexCenterVerticallyOnlyAsync(Microsoft.UI.Xaml.Controls.ListViewBase,Microsoft.UI.Xaml.Controls.ListView,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Smooth scrolling the list to bring the specified index into view, centering vertically
            </summary>
            <param name="listViewBase">Represents the base list view that contains the items to be scrolled into view.</param>
            <param name="listView">Specifies the ListView that displays the items and is affected by the scrolling action.</param>
            <param name="index">Indicates the position of the item to be centered vertically in the ListView.</param>
            <param name="disableAnimation">Controls whether the scrolling action should be animated or occur instantly.</param>
            <param name="scrollIfVisible">Determines if the scrolling should occur even if the item is already visible.</param>
            <param name="additionalHorizontalOffset">Allows for an extra horizontal adjustment when positioning the item in view.</param>
            <param name="additionalVerticalOffset">Enables an additional vertical adjustment when centering the item in the view.</param>
            <returns>Returns a Task representing the asynchronous operation of scrolling the item into view.</returns>
        </member>
        <member name="M:AppControlManager.Others.ListViewHelper.ChangeViewAsync(Microsoft.UI.Xaml.Controls.ScrollViewer,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Single},System.Boolean)">
            <summary>
            Changes the view of <see cref="T:Microsoft.UI.Xaml.Controls.ScrollViewer"/> asynchronous.
            </summary>
            <param name="scrollViewer">The scroll viewer.</param>
            <param name="horizontalOffset">The horizontal offset.</param>
            <param name="verticalOffset">The vertical offset.</param>
            <param name="zoomFactor">The zoom factor.</param>
            <param name="disableAnimation">if set to <c>true</c> disable animation.</param>
        </member>
        <member name="M:AppControlManager.Others.Logger.Write(System.String)">
            <summary>
            Write the log to the file
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AppControlManager.Others.MeowParser.GetHashes(System.String)">
            <summary>
            A public static method that returns a HashSet of strings.
            </summary>
            <param name="SecurityCatalogFilePath"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:AppControlManager.Others.NoValidFilesSelectedException">
            <summary>
            a class to throw a custom exception when the no valid files were found for scanning or performing other relevant tasks in the application.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.NoValidFilesSelectedException.#ctor">
            <summary>
            Initializes a new instance of the NoValidFilesSelectedException class. This constructor does not take any
            parameters.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.NoValidFilesSelectedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NoValidFilesSelectedException class with a specified error message.
            </summary>
            <param name="message">The error message that describes the reason for the exception.</param>
        </member>
        <member name="M:AppControlManager.Others.NoValidFilesSelectedException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the NoValidFilesSelectedException class with a message and function name.
            </summary>
            <param name="message">Provides details about the error encountered.</param>
            <param name="functionName">Indicates the name of the function where the error occurred.</param>
        </member>
        <member name="M:AppControlManager.Others.NoValidFilesSelectedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the NoValidFilesSelectedException class with a specified error message and an
            inner exception.
            </summary>
            <param name="message">Provides a description of the error that occurred.</param>
            <param name="innerException">Holds the exception that is the cause of the current exception.</param>
        </member>
        <member name="T:AppControlManager.Others.OpusInfoObj">
            <summary>
            https://learn.microsoft.com/openspecs/office_file_formats/ms-oshared/91755632-4b0d-44ca-89a9-9699afbbd268
            Rust implementation: https://microsoft.github.io/windows-docs-rs/doc/windows/Win32/Security/WinTrust/struct.SPC_SP_OPUS_INFO.html
            </summary>
        </member>
        <member name="F:AppControlManager.Others.OpusInfoObj.MoreInfo">
            <summary>
            not always present
            </summary>
        </member>
        <member name="T:AppControlManager.Others.PageHashCalculator">
            <summary>
            necessary logics for Page hash calculation
            </summary>
        </member>
        <member name="T:AppControlManager.Others.PFNRuleCreator">
            <summary>
            Defines a class for creating rules based on package family name.
            </summary>
            <param name="packageFamilyName">Specifies the name of the package family for which the rule is created.</param>
            <param name="minimumFileVersion">Indicates the minimum file version required for the rule to apply.</param>
            <param name="siSigningScenario">Represents the signing scenario associated with the rule.</param>
        </member>
        <member name="M:AppControlManager.Others.PFNRuleCreator.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Defines a class for creating rules based on package family name.
            </summary>
            <param name="packageFamilyName">Specifies the name of the package family for which the rule is created.</param>
            <param name="minimumFileVersion">Indicates the minimum file version required for the rule to apply.</param>
            <param name="siSigningScenario">Represents the signing scenario associated with the rule.</param>
        </member>
        <member name="M:AppControlManager.Others.PolicyFileSigningStatusDetection.Check(System.String)">
            <summary>
            Check the signing status of an App Control policy file
            </summary>
            <param name="policyXMLPath"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Others.ProcessStarter.RunCommand(System.String,System.String)">
            <summary>
            Executes an executable with arguments
            </summary>
            <param name="command">The name of full path of the executable to run.</param>
            <param name="arguments">Optional arguments.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <returns>The string output of the command</returns>
        </member>
        <member name="T:AppControlManager.Others.PublisherSignerCreator">
            <summary>
            Used to create Publisher signer rule for a file
            </summary>
            <param name="certificateDetails"></param>
            <param name="fileName"></param>
            <param name="authenticodeSHA256"></param>
            <param name="authenticodeSHA1"></param>
            <param name="siSigningScenario"></param>
        </member>
        <member name="M:AppControlManager.Others.PublisherSignerCreator.#ctor(System.Collections.Generic.List{AppControlManager.Others.CertificateDetailsCreator},System.String,System.String,System.String,System.Int32)">
            <summary>
            Used to create Publisher signer rule for a file
            </summary>
            <param name="certificateDetails"></param>
            <param name="fileName"></param>
            <param name="authenticodeSHA256"></param>
            <param name="authenticodeSHA1"></param>
            <param name="siSigningScenario"></param>
        </member>
        <member name="F:AppControlManager.Others.ReLaunch.CLSCTX_LOCAL_SERVER">
            <summary>
            CLSCTX_LOCAL_SERVER (0x4) is used for out-of-process COM objects.
            </summary>
        </member>
        <member name="F:AppControlManager.Others.ReLaunch.clsidApplicationActivationManager">
            <summary>
            The CLSID of the Application Activation Manager.
            </summary>
        </member>
        <member name="F:AppControlManager.Others.ReLaunch.arguments">
            <summary>
            The command-line arguments to pass to the application.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.ReLaunch.Action">
            <summary>
            Relaunches the application with Administrator privileges
            </summary>
            <returns>True if elevation was successful and user accepted the UAC prompt</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Others.CiPolicyHandler.RemoveSupplementalSigners(System.String)">
            <summary>
            Removes the entire SupplementalPolicySigners block
            and any Signer in Signers node that have the same ID as the SignerIds of the SupplementalPolicySigner(s) in <SupplementalPolicySigners>...</SupplementalPolicySigners> node
            from a CI policy XML file
            </summary>
            <param name="path">The path to the CI policy XML file</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Others.RemoveUserModeSS.Remove(System.String)">
            <summary>
            Removes the User-mode signing scenario block completely
            </summary>
            <param name="filePath">The path to the XML file</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:AppControlManager.Others.SecHttpClient">
            <summary>
            This class enforces minimum HTTP version of 2.0 and is future proof since it tries the highest available HTTP version by default
            </summary>
        </member>
        <member name="T:AppControlManager.Others.SignerX">
            <summary>
            Contains information relevant to an App Control policy regarding a signer element. Information that's included in an App Control policy
            </summary>
            <param name="id">Identifies the signer uniquely within the policy.</param>
            <param name="name">Represents the name associated with the signer.</param>
            <param name="certRoot">Indicates the root certificate authority for the signer.</param>
            <param name="certPublisher">Specifies the publisher of the certificate, if applicable.</param>
            <param name="certIssuer">Denotes the issuer of the certificate, if provided.</param>
            <param name="certEKU">Lists the enhanced key usages associated with the certificate.</param>
            <param name="certOemID">Represents the OEM identifier related to the certificate, if any.</param>
            <param name="fileAttribRef">References attributes related to files associated with the signer.</param>
            <param name="fileAttrib">Contains a dictionary of file attributes linked to the signer.</param>
            <param name="signerScope">Defines the scope of the signer within the policy.</param>
            <param name="isWHQL">Indicates whether the signer is Windows Hardware Quality Labs certified.</param>
            <param name="isAllowed">Specifies if the signer is permitted under the policy.</param>
            <param name="hasEKU">Indicates whether the signer has enhanced key usages defined.</param>
        </member>
        <member name="M:AppControlManager.Others.SignerX.#ctor(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}},System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Contains information relevant to an App Control policy regarding a signer element. Information that's included in an App Control policy
            </summary>
            <param name="id">Identifies the signer uniquely within the policy.</param>
            <param name="name">Represents the name associated with the signer.</param>
            <param name="certRoot">Indicates the root certificate authority for the signer.</param>
            <param name="certPublisher">Specifies the publisher of the certificate, if applicable.</param>
            <param name="certIssuer">Denotes the issuer of the certificate, if provided.</param>
            <param name="certEKU">Lists the enhanced key usages associated with the certificate.</param>
            <param name="certOemID">Represents the OEM identifier related to the certificate, if any.</param>
            <param name="fileAttribRef">References attributes related to files associated with the signer.</param>
            <param name="fileAttrib">Contains a dictionary of file attributes linked to the signer.</param>
            <param name="signerScope">Defines the scope of the signer within the policy.</param>
            <param name="isWHQL">Indicates whether the signer is Windows Hardware Quality Labs certified.</param>
            <param name="isAllowed">Specifies if the signer is permitted under the policy.</param>
            <param name="hasEKU">Indicates whether the signer has enhanced key usages defined.</param>
        </member>
        <member name="M:AppControlManager.Others.SignToolHelper.Sign(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Invokes SignTool.exe to sign a Code Integrity Policy file.
            </summary>
            <param name="ciPath"></param>
            <param name="signToolPathFinal"></param>
            <param name="certCN"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Others.SignToolHelper.Download">
            <summary>
            Downloads the latest version of the microsoft.windows.sdk.buildtools NuGet package.
            Extracts the SignTool.exe from it and returns the path to it.
            Copies it to the User Configurations directory.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.SignToolHelper.Verify(System.String)">
            <summary>
            Verifies if the SignTool.exe is of a version greater than one specified in the method
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Others.SignToolHelper.GetArchitecture">
            <summary>
            Returns the architecture of the current OS
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Others.SignToolHelper.GetSignToolPath(System.String)">
            <summary>
            Gets the path to SignTool.exe and verifies it to make sure it's valid
            If the SignTool.exe path is not provided by parameter, it will try to detect it automatically by checking if Windows SDK is installed
            If the SignTool.exe path is not provided by parameter and it could not be detected automatically, it will try to download it from NuGet
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:AppControlManager.Others.SimulationInput">
            <summary>
            Represents input for a simulation, encapsulating file information and associated signer details.
            </summary>
            <param name="filePath">Specifies the file associated with the simulation input.</param>
            <param name="allFileSigners">Contains a list of all signers related to the file.</param>
            <param name="signerInfo">Holds detailed information about the signers involved.</param>
            <param name="ekuOids">Lists the Extended Key Usage Object Identifiers relevant to the simulation.</param>
        </member>
        <member name="M:AppControlManager.Others.SimulationInput.#ctor(System.IO.FileInfo,System.Collections.Generic.List{AppControlManager.Others.ChainPackage},System.Collections.Generic.List{AppControlManager.Others.SignerX},System.Collections.Generic.List{System.String})">
            <summary>
            Represents input for a simulation, encapsulating file information and associated signer details.
            </summary>
            <param name="filePath">Specifies the file associated with the simulation input.</param>
            <param name="allFileSigners">Contains a list of all signers related to the file.</param>
            <param name="signerInfo">Holds detailed information about the signers involved.</param>
            <param name="ekuOids">Lists the Extended Key Usage Object Identifiers relevant to the simulation.</param>
        </member>
        <member name="T:AppControlManager.Others.SimulationOutput">
            <summary>
            Used by AppControl Simulations, the output of the comparer function/method
            This class holds the details of the current file in the App Control Simulation comparer
            </summary>
        </member>
        <member name="M:AppControlManager.Others.SimulationOutput.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Used by AppControl Simulations, the output of the comparer function/method
            This class holds the details of the current file in the App Control Simulation comparer
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.Path">
            <summary>
            The name of the file, which is a truncated version of its path
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.Source">
            <summary>
            Source from the Comparer function is always 'Signer'
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.IsAuthorized">
            <summary>
            Whether the file is authorized or not
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.SignerID">
            <summary>
            Gathered from the GetSignerInfo method
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.SignerName">
            <summary>
            Gathered from the GetSignerInfo method
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.SignerCertRoot">
            <summary>
            Gathered from the GetSignerInfo method
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.SignerCertPublisher">
            <summary>
            Gathered from the GetSignerInfo method
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.SignerScope">
            <summary>
            Gathered from the GetSignerInfo method
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.SignerFileAttributeIDs">
            <summary>
            Gathered from the GetSignerInfo method
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.MatchCriteria">
            <summary>
            The main level based on which the file is authorized
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.SpecificFileNameLevelMatchCriteria">
            <summary>
            Only those eligible for FilePublisher, WHQLFilePublisher, or SignedVersion levels assign this value, otherwise it stays null
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.CertSubjectCN">
            <summary>
            Subject CN of the signer that allows the file
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.CertIssuerCN">
            <summary>
            Issuer CN of the signer that allows the file
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.CertNotAfter">
            <summary>
            NotAfter date of the signer that allows the file
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.CertTBSValue">
            <summary>
            TBS value of the signer that allows the file
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.FilePath">
            <summary>
            Full path of the file
            </summary>
        </member>
        <member name="P:AppControlManager.Others.SimulationOutput.ParentViewModelSimulationVM">
            <summary>
            Reference for the ViewModel's class
            </summary>
        </member>
        <member name="M:AppControlManager.Others.SnapBackGuarantee.Create(System.String)">
            <summary>
            A method that arms the system with a snapback guarantee in case of a reboot during the base policy enforcement process.
            This will help prevent the system from being stuck in audit mode in case of a power outage or a reboot during the base policy enforcement process.
            </summary>
            <param name="path">The path to the EnforcedMode.cip file that will be used to revert the base policy to enforced mode in case of a reboot.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Others.SnapBackGuarantee.Remove">
            <summary>
            Removes the SnapBack guarantee scheduled task and the related .bat file
            </summary>
        </member>
        <member name="M:AppControlManager.Others.StagingArea.NewStagingArea(System.String)">
            <summary>
            Creating a directory as a staging area for a job and returns the path to that directory
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:AppControlManager.Others.SupplementalForSelf.Deploy(System.String,System.String)">
            <summary>
            Deploys the Supplemental Policy that allows the Application to be allowed to run after deployment.
            Each Base policy should have this supplemental policy.
            </summary>
            <param name="StagingArea">Specifies the directory where the policy files will be saved.</param>
            <param name="basePolicyID">Identifies the base policy to which the supplemental policy is associated.</param>
        </member>
        <member name="M:AppControlManager.Others.SupplementalForSelf.DeploySigned(System.String,System.String,System.String,System.String)">
            <summary>
            Signs and Deploys the Supplemental Policy that allows the Application to be allowed to run after deployment
            Each Base policy should have this supplemental policy
            </summary>
            <param name="basePolicyID">Identifies the base policy to which the supplemental policy is associated.</param>
            <param name="CertPath">Specifies the location of the certificate used for signing the policy.</param>
            <param name="SignToolPath">Indicates the path to the tool used for signing the policy.</param>
            <param name="CertCN">Represents the common name of the certificate for signing purposes.</param>
        </member>
        <member name="M:AppControlManager.Others.SupplementalForSelf.IsEligible(AppControlManager.SiPolicy.SiPolicy,System.String)">
            <summary>
            Checks whether an App Control policy is eligible to have the AppControlManager supplemental policy
            </summary>
            <param name="policyObj"></param>
            <param name="policyFile"></param>
            <returns></returns>
        </member>
        <member name="T:AppControlManager.Others.UpdateAvailableEventArgs">
            <summary>
            EventArgs class to provide data for the UpdateAvailable event.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.UpdateAvailableEventArgs.#ctor(System.Boolean,System.Version)">
            <summary>
            EventArgs class to provide data for the UpdateAvailable event.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.UpdateAvailableEventArgs.IsUpdateAvailable">
            <summary>
            Indicates whether an update is available.
            </summary>
        </member>
        <member name="P:AppControlManager.Others.UpdateAvailableEventArgs.AvailableVersion">
            <summary>
            The version of the available update.
            </summary>
        </member>
        <member name="T:AppControlManager.Others.UpdateCheckResponse">
            <summary>
            Represents an object that is the response of an update check for the AppControl Manager app
            </summary>
        </member>
        <member name="M:AppControlManager.Others.UpdateCheckResponse.#ctor(System.Boolean,System.Version)">
            <summary>
            Represents an object that is the response of an update check for the AppControl Manager app
            </summary>
        </member>
        <member name="T:AppControlManager.Others.WLDP_SECURE_SETTING_VALUE_TYPE">
            <summary>
            Defines different types of secure setting values used in WLDP. Types include Boolean, Integer, None, String, and
            Flag.
            </summary>
        </member>
        <member name="T:AppControlManager.Others.UNICODE_STRING">
            <summary>
            Represents a Unicode string with a specified length and a pointer to the string's buffer. It includes fields for the
            string's current length and maximum length.
            </summary>
        </member>
        <member name="T:AppControlManager.Others.WldpQuerySecurityPolicyWrapper">
            <summary>
            Queries the security policy for a specified provider and key, returning the value type and size.
            Initializes a UNICODE_STRING structure from a given string.
            </summary>
        </member>
        <member name="M:AppControlManager.Others.XmlFilePathExtractor.GetFilePaths(System.String)">
            <summary>
            Extracts all the file paths from the Allow rules in an App Control policy
            </summary>
            <param name="xmlFilePath"></param>
            <returns></returns>
        </member>
        <member name="T:AppControlManager.Pages.AllowNewApps">
            <summary>
            Represents a page for managing app permissions with navigation capabilities. It initializes the view model and
            handles navigation events.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewApps.OnNavigatedTo(Microsoft.UI.Xaml.Navigation.NavigationEventArgs)">
            <summary>
            Called when the page is navigated to. Invokes the base navigation logic
            and updates the animated icons' visibility on the main window for the current content frame.
            </summary>
            <param name="e">The navigation event data.</param>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewApps.OnNavigatedFrom(Microsoft.UI.Xaml.Navigation.NavigationEventArgs)">
            <summary>
            Called when the page is navigated away from. Invokes the base navigation logic
            and updates the animated icons' visibility on the main window for the current content frame.
            </summary>
            <param name="e">The navigation event data.</param>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewApps.NavigationView_SelectionChanged(Microsoft.UI.Xaml.Controls.NavigationView,Microsoft.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs)">
            <summary>
            Handles changes in the navigation menu and navigates to different pages based on the selected item's tag.
            </summary>
            <param name="sender">Represents the navigation menu that triggered the selection change event.</param>
            <param name="args">Contains information about the selection change, including the newly selected item.</param>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewApps.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewApps.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewApps.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.AllowNewAppsEventLogsDataGrid">
            <summary>
            Represents a data grid for displaying event logs with functionalities for copying, sorting, filtering, and selecting
            items.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsEventLogsDataGrid.CopyToClipboard_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Click event handler for copy
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsEventLogsDataGrid.CtrlC_Invoked(Microsoft.UI.Xaml.Input.KeyboardAccelerator,Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)">
            <summary>
            CTRL + C shortcuts event handler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsEventLogsDataGrid.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsEventLogsDataGrid.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsEventLogsDataGrid.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.AllowNewAppsLocalFilesDataGrid">
            <summary>
            Represents a page for managing local files.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsLocalFilesDataGrid.CopyToClipboard_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Click event handler for copy
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsLocalFilesDataGrid.CtrlC_Invoked(Microsoft.UI.Xaml.Input.KeyboardAccelerator,Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)">
            <summary>
            CTRL + C shortcuts event handler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsLocalFilesDataGrid.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsLocalFilesDataGrid.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsLocalFilesDataGrid.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.AllowNewAppsStart">
            <summary>
            AllowNewAppsStart is a page that manages the process of allowing new applications through policy management. It
            handles user interactions for selecting policies, scanning directories, and creating supplemental policies.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsStart.ScanLevelComboBox_SelectionChanged(System.Object,Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the selection change event for a ComboBox, updating the scan level based on the selected item.
            </summary>
            <param name="sender">Represents the source of the event, allowing access to the ComboBox that triggered the selection change.</param>
            <param name="e">Contains event data related to the selection change, providing information about the new selection.</param>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsStart.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsStart.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.AllowNewAppsStart.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.BuildNewCertificate">
            <summary>
            BuildNewCertificate is a page for generating a new certificate. It manages user input, validates fields, and handles
            the certificate creation process.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.BuildNewCertificate.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.BuildNewCertificate.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.BuildNewCertificate.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.ConfigurePolicyRuleOptions">
            <summary>
            Configures policy rules and manages UI interactions for policy templates. Initializes components, handles file
            selection, and updates settings dynamically.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.#ctor">
            <summary>
            Initializes the ConfigurePolicyRuleOptions class, sets up navigation caching, binds the data context, and generates
            settings cards.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.LightUp1">
            <summary>
            Local event handlers that are assigned to the sidebar button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.GenerateSettingsCards">
            <summary>
            Method to dynamically create SettingsCards based on the dictionary keys
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.PickPolicyFileButton_Click">
            <summary>
            Event handler for the browse button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.LoadPolicyOptionsFromXML(System.String)">
            <summary>
            When the XML policy file is selected by the user, get its rule options and check/uncheck the check boxes in the UI accordingly
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.ApplyTheChangesButton_Click">
            <summary>
            Event handler for when the Apply button is pressed
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.SetPolicyTemplate_Click">
            <summary>
            Event handler for the Set button click in the PolicyTemplate section
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.ManageButtonStates(System.Boolean)">
            <summary>
            Manages buttons' disablement/enablement
            </summary>
            <param name="Enable"></param>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.GetSelectedPolicyRuleOptions">
            <summary>
            Helper method to get selected policy rule options from the UI checkboxes
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.ClearAllCheckBoxes">
            <summary>
            Uncheck all of the rule options check boxes in the UI
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.PickPolicyFileButton_FlyOut_Clear_Click">
            <summary>
            Event handler for the flyout's clear button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.RefreshRuleOptionsState_Click">
            <summary>
            Event handlers to retrieve latest policy rule option details from the XML file and check/uncheck UI boxes
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ConfigurePolicyRuleOptions.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.CreateDenyPolicy">
            <summary>
            CreateDenyPolicy is a page for creating deny policies for files and folders. It initializes components and manages
            user interactions.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.#ctor">
            <summary>
            Constructor for the CreateDenyPolicy class. Initializes components, sets navigation cache mode, and assigns the
            data context.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.CreateFilesAndFoldersDenyPolicyButton_Click">
            <summary>
            Main button's event handler for files and folder Deny policy creation
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.FilesAndFoldersPolicyDeployToggleButton_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Deploy policy Toggle Button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.FilesAndFoldersBrowseForFilesButton_Click">
            <summary>
            Browse for Files - Button Click
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.FilesAndFoldersBrowseForFoldersButton_Click">
            <summary>
            Browse for Folders - Button Click
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.FilesAndFoldersPolicyNameTextBox_TextChanged(System.Object,Microsoft.UI.Xaml.Controls.TextChangedEventArgs)">
            <summary>
            When the Deny Policy Name Textbox text changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.ScanLevelComboBox_SelectionChanged(System.Object,Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs)">
            <summary>
            To detect when File Scan Level ComboBox level changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.FilesAndFoldersBrowseForFoldersButton_Flyout_Clear_Click">
            <summary>
            Button to clear the list of selected folder paths
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.FilesAndFoldersBrowseForFilesButton_Flyout_Clear_Click">
            <summary>
            Button to clear the list of selected file paths
            </summary>
        </member>
        <member name="F:AppControlManager.Pages.CreateDenyPolicy._FilesAndFoldersSupplementalPolicyPath">
            <summary>
            Path to the Files and Folders Supplemental policy XML file
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.OpenInPolicyEditor_FilesAndFolders">
            <summary>
            Opens a policy editor for files and folders using a specified supplemental policy path.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.PFNRefreshAppsListButton_Click">
            <summary>
            Event handler for the Refresh button to get the apps list
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.PFNRefreshContainer_RefreshRequested(Microsoft.UI.Xaml.Controls.RefreshContainer,Microsoft.UI.Xaml.Controls.RefreshRequestedEventArgs)">
            <summary>
            Event handler for the touch-initiated refresh action
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.PFNSelectAllAppsListButton_Click">
            <summary>
            Event handler to select all apps in the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.PFNRemoveSelectionAppsListButton_Click">
            <summary>
            Event handler to remove all selections of apps in the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.PFNPackagedAppsListView_SelectionChanged">
            <summary>
            Event handler to display the selected apps count on the UI TextBlock
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.PFNAppFilteringTextBox_TextChanged">
            <summary>
            Event handler for when the search box of apps list changes
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.PFNSettingsCard_Expanded">
            <summary>
            Event handler to happen only once when the section is expanded and apps list is loaded
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.CreatePFNDenyPolicyButton_Click">
            <summary>
            Main button's event handler - Create Deny policy based on PFNs
            </summary>
        </member>
        <member name="F:AppControlManager.Pages.CreateDenyPolicy._PFNSupplementalPolicyPath">
            <summary>
            Path to the PFN Supplemental policy XML file
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.OpenInPolicyEditor_PFN">
            <summary>
            Opens a policy editor for PFN using a specified supplemental policy path.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.CreateCustomPatternBasedFileRuleDenyPolicyButton_Click">
            <summary>
            Event handler for the main button - to create Deny pattern based File path policy
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.DenyPolicyCustomPatternBasedFileRuleSettingsCard_Click">
            <summary>
            Event handler to display the content dialog for more info about patterns
            </summary>
        </member>
        <member name="F:AppControlManager.Pages.CreateDenyPolicy._CustomPatternBasedFileRuleSupplementalPolicyPath">
            <summary>
            Path to the CustomPatternBasedFileRule Supplemental policy XML file
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.OpenInPolicyEditor_CustomPatternBasedFileRule">
            <summary>
            Opens a policy editor for CustomPatternBasedFileRule using a specified supplemental policy path.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicy.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.CreateDenyPolicyFilesAndFoldersScanResults">
            <summary>
            Represents a page for creating deny policy scan results, managing navigation state and data context. Handles user
            interactions like copying, filtering, and selecting items.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicyFilesAndFoldersScanResults.#ctor">
            <summary>
            Constructor for the CreateDenyPolicyFilesAndFoldersScanResults class. Initializes components, maintains navigation
            state, and sets the DataContext.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicyFilesAndFoldersScanResults.ListViewFlyoutMenuCopy_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Copies the selected rows to the clipboard in a formatted manner, with each property labeled for clarity.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicyFilesAndFoldersScanResults.CopyToClipboard_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Click event handler for copy
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicyFilesAndFoldersScanResults.SearchBox_TextChanged(System.Object,Microsoft.UI.Xaml.Controls.TextChangedEventArgs)">
            <summary>
            Event handler for the SearchBox text change
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicyFilesAndFoldersScanResults.ApplyFilters">
            <summary>
            Applies the date and search filters to the data grid
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicyFilesAndFoldersScanResults.ClearDataButton_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Event handler for the Clear Data button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicyFilesAndFoldersScanResults.SelectAll_Click">
            <summary>
            Selects all of the displayed rows on the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicyFilesAndFoldersScanResults.DeSelectAll_Click">
            <summary>
            De-selects all of the displayed rows on the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicyFilesAndFoldersScanResults.CtrlC_Invoked(Microsoft.UI.Xaml.Input.KeyboardAccelerator,Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)">
            <summary>
            CTRL + C shortcuts event handler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicyFilesAndFoldersScanResults.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicyFilesAndFoldersScanResults.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateDenyPolicyFilesAndFoldersScanResults.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.CreatePolicy">
            <summary>
            Initializes the CreatePolicy component, disabling log size inputs and maintaining navigation state.
            of various policies.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreatePolicy.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreatePolicy.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreatePolicy.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.CreateSupplementalPolicy">
            <summary>
            Represents a page for creating supplemental policies, managing data display and user interactions.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.#ctor">
            <summary>
            Constructor for the CreateSupplementalPolicy class. Initializes components, sets navigation cache mode, and assigns
            the data context.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.LightUp1">
            <summary>
            Local event handlers that are assigned to the sidebar button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.FilesAndFoldersBrowseForFilesButton_Click">
            <summary>
            Browse for Files - Button Click
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.FilesAndFoldersBrowseForFoldersButton_Click">
            <summary>
            Browse for Folders - Button Click
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.FilesAndFoldersBrowseForBasePolicyButton_Click">
            <summary>
            Browse for Base Policy - Button Click
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.FilesAndFoldersViewFileDetailsSettingsCard_Click">
            <summary>
            Link to the page that shows scanned file details
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.FilesAndFoldersPolicyDeployToggleButton_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Deploy policy Toggle Button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.ScanLevelComboBox_SelectionChanged(System.Object,Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs)">
            <summary>
            To detect when File Scan Level ComboBox level changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.FilesAndFoldersPolicyNameTextBox_TextChanged(System.Object,Microsoft.UI.Xaml.Controls.TextChangedEventArgs)">
            <summary>
            When the Supplemental Policy Name Textbox text changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.FilesAndFoldersBrowseForFilesButton_Flyout_Clear_Click">
            <summary>
            Button to clear the list of selected file paths
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.FilesAndFoldersBrowseForFoldersButton_Flyout_Clear_Click">
            <summary>
            Button to clear the list of selected folder paths
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.CreateFilesAndFoldersSupplementalPolicyButton_Click">
            <summary>
            Main button's event handler for files and folder Supplemental policy creation
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.FilesAndFoldersBrowseForBasePolicyButton_Flyout_Clear_Click">
            <summary>
            Event handler for the clear button for the text box of selected Base policy path
            </summary>
        </member>
        <member name="F:AppControlManager.Pages.CreateSupplementalPolicy._FilesAndFoldersSupplementalPolicyPath">
            <summary>
            Path to the Files and Folders Supplemental policy XML file
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.OpenInPolicyEditor_FilesAndFolders">
            <summary>
            Opens a policy editor for files and folders using a specified supplemental policy path.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.CertificatesPolicyDeployToggleButton_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Deploy button event handler for Certificates-based Supplemental policy
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.CreateCertificatesSupplementalPolicyButton_Click">
            <summary>
            Main Button - Creates the Certificates-based Supplemental policy
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.CertificatesBrowseForBasePolicyButton_Flyout_Clear_Click">
            <summary>
            Event handler for the clear button for the text box of selected Base policy path
            </summary>
        </member>
        <member name="F:AppControlManager.Pages.CreateSupplementalPolicy._CertificatesSupplementalPolicyPath">
            <summary>
            Path to the Certificates Supplemental policy XML file
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.OpenInPolicyEditor_Certificates">
            <summary>
            Opens a policy editor for Certificates using a specified supplemental policy path.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.CreateISGSupplementalPolicyButton_Click">
            <summary>
            Event handler for the main button - to create Supplemental ISG based policy
            </summary>
        </member>
        <member name="F:AppControlManager.Pages.CreateSupplementalPolicy._ISGSupplementalPolicyPath">
            <summary>
            Path to the ISG Supplemental policy XML file
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.OpenInPolicyEditor_ISG">
            <summary>
            Opens a policy editor for ISG using a specified supplemental policy path.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.StrictKernelModeBrowseForBasePolicyButton_Click">
            <summary>
            Browse for Base Policy - Button Click
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.StrictKernelModeBrowseForBasePolicyButton_Flyout_Clear_Click">
            <summary>
            Event handler for the clear button for the text box of selected Base policy path
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.StrictKernelModeCreateButton_Click">
            <summary>
            Event handler for the create button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.DriverAutoDetector">
            <summary>
            Detects the kernel-mode drivers from the system and scans them
            </summary>
        </member>
        <member name="F:AppControlManager.Pages.CreateSupplementalPolicy._StrictKernelModeSupplementalPolicyPath">
            <summary>
            Path to the StrictKernelMode Supplemental policy XML file
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.OpenInPolicyEditor_StrictKernelMode">
            <summary>
            Opens a policy editor for StrictKernelMode using a specified supplemental policy path.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.PFNRefreshAppsListButton_Click">
            <summary>
            Event handler for the Refresh button to get the apps list
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.PFNRefreshContainer_RefreshRequested(Microsoft.UI.Xaml.Controls.RefreshContainer,Microsoft.UI.Xaml.Controls.RefreshRequestedEventArgs)">
            <summary>
            Event handler for the touch-initiated refresh action
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.PFNSelectAllAppsListButton_Click">
            <summary>
            Event handler to select all apps in the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.PFNRemoveSelectionAppsListButton_Click">
            <summary>
            Event handler to remove all selections of apps in the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.PFNPackagedAppsListView_SelectionChanged">
            <summary>
            Event handler to display the selected apps count on the UI TextBlock
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.PFNAppFilteringTextBox_TextChanged">
            <summary>
            Event handler for when the search box of apps list changes
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.PFNSettingsCard_Expanded">
            <summary>
            Event handler to happen only once when the section is expanded and apps list is loaded
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.CreatePFNSupplementalPolicyButton_Click">
            <summary>
            Main button's event handler - Create Supplemental policy based on PFNs
            </summary>
        </member>
        <member name="F:AppControlManager.Pages.CreateSupplementalPolicy._PFNSupplementalPolicyPath">
            <summary>
            Path to the PFN Supplemental policy XML file
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.OpenInPolicyEditor_PFN">
            <summary>
            Opens a policy editor for PFN using a specified supplemental policy path.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.CreateCustomPatternBasedFileRuleSupplementalPolicyButton_Click">
            <summary>
            Event handler for the main button - to create Supplemental pattern based File path policy
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.SupplementalPolicyCustomPatternBasedFileRuleSettingsCard_Click">
            <summary>
            Event handler to display the content dialog for more info about patterns
            </summary>
        </member>
        <member name="F:AppControlManager.Pages.CreateSupplementalPolicy._CustomPatternBasedFileRuleSupplementalPolicyPath">
            <summary>
            Path to the CustomPatternBasedFileRule Supplemental policy XML file
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.OpenInPolicyEditor_CustomPatternBasedFileRule">
            <summary>
            Opens a policy editor for CustomPatternBasedFileRule using a specified supplemental policy path.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicy.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.CreateSupplementalPolicyFilesAndFoldersScanResults">
            <summary>
            Represents a page for creating supplemental policy files and folders scan results, managing data display and user
            interactions.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicyFilesAndFoldersScanResults.#ctor">
            <summary>
            Constructor for the CreateSupplementalPolicyFilesAndFoldersScanResults class. Initializes components, maintains
            navigation state, and sets the DataContext.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicyFilesAndFoldersScanResults.ListViewFlyoutMenuCopy_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Copies the selected rows to the clipboard in a formatted manner, with each property labeled for clarity.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicyFilesAndFoldersScanResults.CopyToClipboard_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Click event handler for copy
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicyFilesAndFoldersScanResults.SearchBox_TextChanged(System.Object,Microsoft.UI.Xaml.Controls.TextChangedEventArgs)">
            <summary>
            Event handler for the SearchBox text change
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicyFilesAndFoldersScanResults.ApplyFilters">
            <summary>
            Applies the date and search filters to the data grid
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicyFilesAndFoldersScanResults.ClearDataButton_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Event handler for the Clear Data button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicyFilesAndFoldersScanResults.SelectAll_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Selects all of the displayed rows on the ListView
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicyFilesAndFoldersScanResults.DeSelectAll_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            De-selects all of the displayed rows on the ListView
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicyFilesAndFoldersScanResults.CtrlC_Invoked(Microsoft.UI.Xaml.Input.KeyboardAccelerator,Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)">
            <summary>
            CTRL + C shortcuts event handler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicyFilesAndFoldersScanResults.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicyFilesAndFoldersScanResults.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CreateSupplementalPolicyFilesAndFoldersScanResults.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.DeploymentPage">
            <summary>
            DeploymentPage manages the deployment of XML and CIP files, including signing and Intune integration. It handles
            user interactions for file selection and deployment status updates.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.UpdateButtonsStates(System.Boolean)">
            <summary>
            When online features are enabled, this method will enable the relevant buttons and performs extra necessary actions
            </summary>
            <param name="on"></param>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.#ctor">
            <summary>
            Initializes a new instance of the DeploymentPage class. Disables the DeploySignedXMLButton if the system is older
            than Windows 11 24H2.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.LightUp1">
            <summary>
            Local event handlers that are assigned to the sidebar button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.DeployUnsignedXMLButton_Click">
            <summary>
            Deploy unsigned XML files button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.DeploySignedXMLButton_Click">
            <summary>
            Deploy Signed XML files button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.DeployCIPButton_Click">
            <summary>
            Deploy CIP files button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.BrowseForXMLPolicyFilesButton_Click">
            <summary>
            Event handler for browse button - Unsigned XML files
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.BrowseForCIPBinaryFilesButton_Click">
            <summary>
            Event handler for Browser button - CIP files
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.BrowseForCIPBinaryFilesButton_Flyout_Clear_Click">
            <summary>
            Clear button for the CIP files deployment button flyout
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.BrowseForXMLPolicyFilesButton_Flyout_Clear_Click">
            <summary>
            Clear button for the unsigned files deployment button flyout
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.BrowseForSignedXMLPolicyFilesButton_Flyout_Clear_Click">
            <summary>
            Clear button for the Signed files deployment button flyout
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.BrowseForSignedXMLPolicyFilesButton_Click">
            <summary>
            Event handler for browse button - Signed XML files
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.RefreshIntuneGroupsButton_Click">
            <summary>
            Handles the click event for the Refresh Intune Groups button. It fetches groups from Microsoft Graph and updates
            the ListView with group names.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.DeployToIntunePrivate(System.String,System.String,System.String)">
            <summary>
            Deploys a specified file to Intune using a given policy ID and optionally an XML file for additional settings.
            </summary>
            <param name="file">Specifies the file to be uploaded to Intune.</param>
            <param name="policyID">Identifies the policy under which the file will be deployed.</param>
            <param name="xmlFile">Provides an optional XML file that may contain additional configuration settings.</param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.BrowseForXMLPolicesButton_Click">
            <summary>
            Event handler for the button to convert XML files to CIP binary files
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.ConvertXMLToCIPButton_Click">
            <summary>
            Handles the click event for converting XML files to CIP format.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.BrowseForXMLPolicesButton_Flyout_Clear_Click">
            <summary>
            Event handler to clear the list of XML files that are only converted to CIP files
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.SignOnlyNoDeploySettingsCard_Click">
            <summary>
            Event handler for the settings card to toggle the button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.SignOnlyNoDeployToggleSwitch_Toggled">
            <summary>
            Event handler for the toggle button that determines whether policies should be signed + deployed or signed only
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.SetProperty``1(``0,``0,System.Action{``0},System.String)">
            <summary>
            Sets the property and raises the PropertyChanged event if the value has changed.
            This also prevents infinite loops where a property raises OnPropertyChanged which could trigger an update in the UI, and the UI might call set again, leading to an infinite loop.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <param name="setter"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.DeploymentPage.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.EventLogsPolicyCreation">
            <summary>
            Handles the creation and management of event logs policies, including scanning logs, filtering, and clipboard
            operations.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.#ctor">
            <summary>
            Initializes the EventLogsPolicyCreation component, sets navigation cache mode, and binds the DataContext to the
            ViewModel. Also adds a DateChanged event handler.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.ListViewFlyoutMenuCopy_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Copies the selected rows to the clipboard in a formatted manner, with each property labeled for clarity.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.CopyToClipboard_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Click event handler for copy
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.FilterByDateCalendarPicker_DateChanged(Microsoft.UI.Xaml.Controls.CalendarDatePicker,Microsoft.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs)">
            <summary>
            Event handler for the CalendarDatePicker date changed event
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.ApplyFilters">
            <summary>
            Applies the date and search filters to the data grid
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.ScanLogs_Click">
            <summary>
            Event handler for the ScanLogs click
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.SelectCodeIntegrityEVTXFiles_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Event handler for the select Code Integrity EVTX file path button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.SelectAppLockerEVTXFiles_Click">
            <summary>
            Event handler for the select AppLocker EVTX file path button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.SelectedAppLockerEVTXFilesFlyout_Clear_Click">
            <summary>
            Clears the selected AppLocker EVTX file paths
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.ClearDataButton_Click">
            <summary>
            Event handler for the Clear Data button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.SelectAll_Click">
            <summary>
            Selects all of the displayed rows on the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.DeSelectAll_Click">
            <summary>
            De-selects all of the displayed rows on the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.ListViewFlyoutMenuDelete_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Deletes the selected row from the results
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.UpdateTotalLogs(System.Nullable{System.Boolean})">
            <summary>
            Updates the total logs count displayed on the UI
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.AddToPolicyButton_Click">
            <summary>
            The button that browses for XML file the logs will be added to
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.BasePolicyFileButton_Click">
            <summary>
            The button to browse for the XML file the supplemental policy that will be created will belong to
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.BaseGUIDSubmitButton_Click">
            <summary>
            The button to submit a base policy GUID that will be used to set the base policy ID
            in the Supplemental policy file that will be created.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.CreatePolicyButton_Click">
            <summary>
            When the main button responsible for creating policy is pressed
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.ScanLevelComboBox_SelectionChanged(System.Object,Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs)">
            <summary>
            Scan level selection event handler for ComboBox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.SegmentedControl_SelectionChanged(System.Object,Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs)">
            <summary>
            Event handler for for the segmented button's selection change
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.CtrlC_Invoked(Microsoft.UI.Xaml.Input.KeyboardAccelerator,Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)">
            <summary>
            CTRL + C shortcuts event handler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="F:AppControlManager.Pages.EventLogsPolicyCreation.finalSupplementalPolicyPath">
            <summary>
            Path of the Supplemental policy that is created or the policy that user selected to add the logs to.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.OpenInPolicyEditor">
            <summary>
            Event handler to open the supplemental policy in the Policy Editor
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.EventLogsPolicyCreation.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.GetCIHashes">
            <summary>
            Handles the file selection and computes various cryptographic hashes for the selected file. Displays the results in
            the UI.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GetCIHashes.#ctor">
            <summary>
            Initializes the component and sets the navigation cache mode to required for the GetCIHashes class.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GetCIHashes.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GetCIHashes.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GetCIHashes.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.GetSecurePolicySettings">
            <summary>
            Initializes the page component and sets the navigation cache mode to required. Handles the Fetch button click event
            to retrieve and display secure policy settings.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GetSecurePolicySettings.#ctor">
            <summary>
            Initializes the component and sets the navigation cache mode to required, ensuring the page maintains its state
            during navigation.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GetSecurePolicySettings.InvokeButton_Click">
            <summary>
            Event handler for the Fetch button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GetSecurePolicySettings.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GetSecurePolicySettings.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GetSecurePolicySettings.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.GitHubDocumentation">
            <summary>
            Initializes the GitHubDocumentation component, sets the WebView2 background color, and manages navigation events.
            Maintains page state.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GitHubDocumentation.#ctor">
            <summary>
            Initializes the GitHubDocumentation component, sets the background color of the WebView2, and manages navigation
            events. Maintains page state during navigation.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GitHubDocumentation.BackButton_Click">
            <summary>
            Event handler for Back button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GitHubDocumentation.ForwardButton_Click">
            <summary>
            Event handler for Forward button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GitHubDocumentation.ReloadButton_Click">
            <summary>
            Event handler for Reload button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GitHubDocumentation.HomeButton_Click">
            <summary>
            Event handler for Home button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GitHubDocumentation.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GitHubDocumentation.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.GitHubDocumentation.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.Logs">
            <summary>
            The Logs class manages log files, allowing users to view and filter log content. It initializes with navigation
            cache disabled.
            </summary>
        </member>
        <member name="F:AppControlManager.Pages.Logs._allLogLines">
            <summary>
            Holds all lines from the currently loaded log file.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Logs.#ctor">
            <summary>
            Initializes the Logs component and sets the navigation cache mode to disabled. This ensures the page reloads when
            visited.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Logs.OnNavigatedTo(Microsoft.UI.Xaml.Navigation.NavigationEventArgs)">
            <summary>
            Called when the page is navigated to. Invokes the base navigation logic
            and updates the animated icons' visibility on the main window for the current content frame.
            </summary>
            <param name="e">The navigation event data.</param>
        </member>
        <member name="M:AppControlManager.Pages.Logs.LoadLogFiles">
            <summary>
            Loads log file names from the logs directory into the ComboBox.
            Only files matching the name pattern are included.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Logs.LogFileComboBox_SelectionChanged(System.Object,Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs)">
            <summary>
            Loads the selected log file’s content.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Logs.DisplayLogContentAsync(System.String)">
            <summary>
            Reads the log file content asynchronously using a FileStream with FileShare.ReadWrite.
            This allows reading even while the file is in use by the logger.
            The file content is then split into lines and the ItemsRepeater updated.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Logs.UpdateLogDisplay">
            <summary>
            Updates the ItemsRepeater with the current log lines.
            If a search term is entered, only lines containing that term (case-insensitive) are displayed.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Logs.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Logs.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Logs.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.LogLine">
            <summary>
            Represents one log line.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.LogLine.#ctor(System.String)">
            <summary>
            Represents one log line.
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.MDEAHPolicyCreation">
            <summary>
            MDEAHPolicyCreation is a page for managing MDE Advanced Hunting policies, including scanning logs, filtering data,
            and creating policies.
            </summary>
        </member>
        <member name="E:AppControlManager.Pages.MDEAHPolicyCreation.PropertyChanged">
            <summary>
            An event that is triggered when a property value changes, allowing subscribers to be notified of updates.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.#ctor">
            <summary>
            Initializes the MDEAHPolicyCreation component, sets default selections, maintains navigation state, and adds a date
            change event handler.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.ListViewFlyoutMenuCopy_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Copies the selected rows to the clipboard in a formatted manner, with each property labeled for clarity.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.CopyToClipboard_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Click event handler for copy
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.FilterByDateCalendarPicker_DateChanged(Microsoft.UI.Xaml.Controls.CalendarDatePicker,Microsoft.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs)">
            <summary>
            Event handler for the CalendarDatePicker date changed event
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.SearchBox_TextChanged(System.Object,Microsoft.UI.Xaml.Controls.TextChangedEventArgs)">
            <summary>
            Event handler for the SearchBox text change
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.ApplyFilters">
            <summary>
            Applies the date and search filters to the data grid
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.ScanLogs_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Event handler for the ScanLogs click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.BrowseForLogs_Click">
            <summary>
            Event handler for the select Code Integrity EVTX file path button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.ClearDataButton_Click">
            <summary>
            Event handler for the Clear Data button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.SelectAll_Click">
            <summary>
            Selects all of the displayed rows on the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.DeSelectAll_Click">
            <summary>
            De-selects all of the displayed rows on the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.ListViewFlyoutMenuDelete_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Deletes the selected row from the results
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.UpdateTotalLogs(System.Nullable{System.Boolean})">
            <summary>
            Updates the total logs count displayed on the UI
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.AddToPolicyButton_Click">
            <summary>
            The button that browses for XML file the logs will be added to
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.BasePolicyFileButton_Click">
            <summary>
            The button to browse for the XML file the supplemental policy that will be created will belong to
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.BaseGUIDSubmitButton_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            The button to submit a base policy GUID that will be used to set the base policy ID in the Supplemental policy file that will be created.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.CreatePolicyButton_Click">
            <summary>
            When the main button responsible for creating policy is pressed
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.ScanLevelComboBox_SelectionChanged(System.Object,Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs)">
            <summary>
            Scan level selection event handler for ComboBox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.RetrieveTheLogsButton_Click">
            <summary>
            Event handler for the button that retrieves the logs
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.SegmentedControl_SelectionChanged">
            <summary>
            Event handler for for the segmented button's selection change
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.CopyButton_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Handles the Copy button click.
            Copies the associated query text to the clipboard and plays an animation
            that changes the button's text from "Copy" to "Copied" and then back.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.CtrlC_Invoked(Microsoft.UI.Xaml.Input.KeyboardAccelerator,Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)">
            <summary>
            CTRL + C shortcuts event handler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="F:AppControlManager.Pages.MDEAHPolicyCreation.finalSupplementalPolicyPath">
            <summary>
            Path of the Supplemental policy that is created or the policy that user selected to add the logs to.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.OpenInPolicyEditor">
            <summary>
            Event handler to open the supplemental policy in the Policy Editor
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MDEAHPolicyCreation.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.MergePolicies">
            <summary>
            Represents a page for managing merge policies with a view model for data binding. It handles user interactions for
            selecting files and displaying flyouts.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MergePolicies.#ctor">
            <summary>
            Initializes a new instance of the MergePolicies class. Sets up the navigation cache mode and binds the data context
            to the ViewModel.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MergePolicies.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MergePolicies.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MergePolicies.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.MicrosoftDocumentation">
            <summary>
            Represents a page for Microsoft documentation with navigation controls. It manages WebView2 state and handles back,
            forward, reload, and home actions.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MicrosoftDocumentation.#ctor">
            <summary>
            Initializes the MicrosoftDocumentation component, sets the background color of WebView2 to transparent, and handles
            navigation events.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MicrosoftDocumentation.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MicrosoftDocumentation.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.MicrosoftDocumentation.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.PolicyEditor">
            <summary>
            The PolicyEditor class manages the UI for editing policies.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.PolicyEditor.#ctor">
            <summary>
            Initializes a new instance of the PolicyEditor class.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.PolicyEditor.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.PolicyEditor.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.PolicyEditor.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Settings.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Settings.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Settings.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.Simulation">
            <summary>
            Represents a simulation page that initializes components, manages file paths, and handles user interactions for
            simulations.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Simulation.#ctor">
            <summary>
            Initializes a new instance of the Simulation class. Sets up the component, navigation cache mode, data context, and
            initializes file and folder path arrays.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Simulation.ConvertRowToText(AppControlManager.Others.SimulationOutput)">
            <summary>
            Converts the properties of a SimulationOutput row into a labeled, formatted string for copying to clipboard.
            </summary>
            <param name="row">The selected SimulationOutput row from the ListView.</param>
            <returns>A formatted string of the row's properties with labels.</returns>
        </member>
        <member name="M:AppControlManager.Pages.Simulation.ListViewFlyoutMenuCopy_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Copies the selected rows to the clipboard in a formatted manner, with each property labeled for clarity.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:AppControlManager.Pages.Simulation.CopyToClipboard(System.Func{AppControlManager.Others.SimulationOutput,System.String})">
            <summary>
            Helper method to copy a specified property to clipboard without reflection
            </summary>
            <param name="getProperty">Function that retrieves the desired property value as a string</param>
        </member>
        <member name="M:AppControlManager.Pages.Simulation.BeginSimulationButton_Click">
            <summary>
            Event handler for the Begin Simulation button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Simulation.SelectXmlFileButton_Click">
            <summary>
            Event handler for the Select XML File button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Simulation.SelectFilesButton_Click">
            <summary>
            Event handler for the Select Files button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Simulation.SelectFoldersButton_Click">
            <summary>
            Event handler for the Select Folders button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Simulation.CatRootPathsButton_Click">
            <summary>
            Event handler for the Cat Root Paths button
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Simulation.CtrlC_Invoked(Microsoft.UI.Xaml.Input.KeyboardAccelerator,Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)">
            <summary>
            CTRL + C shortcuts event handler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.Pages.Simulation.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Simulation.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.Simulation.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.StrictKernelPolicyScanResults">
            <summary>
            Represents a page for displaying strict kernel policy scan results with functionalities for copying, sorting,
            filtering, and managing data.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.StrictKernelPolicyScanResults.#ctor">
            <summary>
            Initializes a new instance of the StrictKernelPolicyScanResults class, setting up navigation caching and data
            context for the view model.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.StrictKernelPolicyScanResults.ListViewFlyoutMenuCopy_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Copies the selected rows to the clipboard in a formatted manner, with each property labeled for clarity.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:AppControlManager.Pages.StrictKernelPolicyScanResults.CopyToClipboard_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Click event handler for copy
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.StrictKernelPolicyScanResults.SearchBox_TextChanged(System.Object,Microsoft.UI.Xaml.Controls.TextChangedEventArgs)">
            <summary>
            Event handler for the SearchBox text change
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.StrictKernelPolicyScanResults.ApplyFilters">
            <summary>
            Applies the date and search filters to the data grid
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.StrictKernelPolicyScanResults.ClearDataButton_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Event handler for the Clear Data button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.StrictKernelPolicyScanResults.SelectAll_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Selects all of the displayed rows on the ListView
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.StrictKernelPolicyScanResults.DeSelectAll_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            De-selects all of the displayed rows on the ListView
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.StrictKernelPolicyScanResults.ListViewFlyoutMenuDelete_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Deletes the selected row from the results
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.Pages.StrictKernelPolicyScanResults.CtrlC_Invoked(Microsoft.UI.Xaml.Input.KeyboardAccelerator,Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)">
            <summary>
            CTRL + C shortcuts event handler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.Pages.StrictKernelPolicyScanResults.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.StrictKernelPolicyScanResults.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.StrictKernelPolicyScanResults.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.CodeIntegrityInfo">
            <summary>
            Initializes the CodeIntegrityInfo class and sets the navigation cache mode. Retrieves and displays code integrity
            information.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CodeIntegrityInfo.#ctor">
            <summary>
            Initializes a new instance of the CodeIntegrityInfo class.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CodeIntegrityInfo.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CodeIntegrityInfo.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.CodeIntegrityInfo.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.SystemInformation">
            <summary>
            SystemInformation page
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.SystemInformation.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.SystemInformation.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.SystemInformation.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.ViewCurrentPolicies">
            <summary>
            Represents a page for viewing current policies with data binding and navigation state management. It includes event
            handlers for menu and list interactions.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ViewCurrentPolicies.MenuFlyout_Closing(Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase,Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs)">
            <summary>
            Event handler to prevent the MenuFlyout to automatically close immediately after selecting a checkbox or any button in it
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.Pages.ViewCurrentPolicies.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ViewCurrentPolicies.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ViewCurrentPolicies.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ViewOnlinePolicies.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ViewOnlinePolicies.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ViewOnlinePolicies.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.UpdatePage">
            <summary>
            UpdatePage manages the update process for the AppControl Manager, including checking for updates, downloading
            packages, and signing them.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.UpdatePage.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.UpdatePage.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.UpdatePage.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.UpdatePageCustomMSIXPath">
            <summary>
            Handles the selection and confirmation of a custom package file path for updates. Updates UI elements based on user
            interactions.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.UpdatePageCustomMSIXPath.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.UpdatePageCustomMSIXPath.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.UpdatePageCustomMSIXPath.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.ValidatePolicy">
            <summary>
            Validates an XML policy file selected by the user and displays the result in an info bar. It handles errors and
            updates UI elements accordingly.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ValidatePolicy.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ValidatePolicy.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ValidatePolicy.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.Pages.ViewFileCertificates">
            <summary>
            Represents a page for viewing file certificates, managing their display, and facilitating clipboard
            operations.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ViewFileCertificates.#ctor">
            <summary>
            Constructor for the ViewFileCertificates class. Initializes components, sets navigation cache mode, and assigns the
            data context.
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ViewFileCertificates.ListViewFlyoutMenuCopy_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Copies the selected rows to the clipboard in a formatted manner, with each property labeled for clarity.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:AppControlManager.Pages.ViewFileCertificates.CopyToClipboard(System.Func{AppControlManager.Others.FileCertificateInfoCol,System.String})">
            <summary>
            Helper method to copy a specified property to clipboard without reflection
            </summary>
            <param name="getProperty">Function that retrieves the desired property value as a string</param>
        </member>
        <member name="M:AppControlManager.Pages.ViewFileCertificates.Fetch(System.String)">
            <summary>
            The main method that performs data collection task
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.Pages.ViewFileCertificates.CtrlC_Invoked(Microsoft.UI.Xaml.Input.KeyboardAccelerator,Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)">
            <summary>
            CTRL + C shortcuts event handler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AppControlManager.Pages.ViewFileCertificates.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ViewFileCertificates.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:AppControlManager.Pages.ViewFileCertificates.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:AppControlManager.PolicyEditor.FileBasedRulesForListView">
            <summary>
            Data model for the File Based Rules list view.
            </summary>
            <param name="id"></param>
            <param name="friendlyName"></param>
            <param name="fileName"></param>
            <param name="internalName"></param>
            <param name="fileDescription"></param>
            <param name="productName"></param>
            <param name="packageFamilyName"></param>
            <param name="packageVersion"></param>
            <param name="minimumFileVersion"></param>
            <param name="maximumFileVersion"></param>
            <param name="hash"></param>
            <param name="appIDs"></param>
            <param name="filePath"></param>
            <param name="type"></param>
            <param name="sourceType"></param>
            <param name="source"></param>
            <param name="parentViewModel"></param>
        </member>
        <member name="M:AppControlManager.PolicyEditor.FileBasedRulesForListView.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,AppControlManager.PolicyEditor.FileBasedRuleType,System.Object,AppControlManager.ViewModels.PolicyEditorVM)">
            <summary>
            Data model for the File Based Rules list view.
            </summary>
            <param name="id"></param>
            <param name="friendlyName"></param>
            <param name="fileName"></param>
            <param name="internalName"></param>
            <param name="fileDescription"></param>
            <param name="productName"></param>
            <param name="packageFamilyName"></param>
            <param name="packageVersion"></param>
            <param name="minimumFileVersion"></param>
            <param name="maximumFileVersion"></param>
            <param name="hash"></param>
            <param name="appIDs"></param>
            <param name="filePath"></param>
            <param name="type"></param>
            <param name="sourceType"></param>
            <param name="source"></param>
            <param name="parentViewModel"></param>
        </member>
        <member name="T:AppControlManager.PolicyEditor.FileBasedRuleType">
            <summary>
            Levels used by the Policy Editor
            </summary>
        </member>
        <member name="T:AppControlManager.PolicyEditor.SignatureBasedRulesForListView">
            <summary>
            Data model for the Signature Based Rules list view.
            </summary>
            <param name="certRoot">Specifies the root certificate used for validation.</param>
            <param name="certEKU">Indicates the extended key usage for the certificate.</param>
            <param name="certIssuer">Identifies the issuer of the certificate.</param>
            <param name="certPublisher">Denotes the publisher associated with the certificate.</param>
            <param name="certOemID">Represents the OEM identifier linked to the certificate.</param>
            <param name="name">Holds the name associated with the signature-based rule.</param>
            <param name="id">Contains a unique identifier for the signature-based rule.</param>
            <param name="sourceType">Defines the type of source for the signature-based rule.</param>
            <param name="source">Stores the actual source object related to the rule.</param>
            <param name="parentViewModel">References the parent view model for accessing variables in the Policy Editor.</param>
        </member>
        <member name="M:AppControlManager.PolicyEditor.SignatureBasedRulesForListView.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,AppControlManager.PolicyEditor.SignatureBasedRuleType,System.Object,AppControlManager.ViewModels.PolicyEditorVM)">
            <summary>
            Data model for the Signature Based Rules list view.
            </summary>
            <param name="certRoot">Specifies the root certificate used for validation.</param>
            <param name="certEKU">Indicates the extended key usage for the certificate.</param>
            <param name="certIssuer">Identifies the issuer of the certificate.</param>
            <param name="certPublisher">Denotes the publisher associated with the certificate.</param>
            <param name="certOemID">Represents the OEM identifier linked to the certificate.</param>
            <param name="name">Holds the name associated with the signature-based rule.</param>
            <param name="id">Contains a unique identifier for the signature-based rule.</param>
            <param name="sourceType">Defines the type of source for the signature-based rule.</param>
            <param name="source">Stores the actual source object related to the rule.</param>
            <param name="parentViewModel">References the parent view model for accessing variables in the Policy Editor.</param>
        </member>
        <member name="T:AppControlManager.PolicyEditor.SignatureBasedRuleType">
            <summary>
            Levels used by the Policy Editor
            </summary>
        </member>
        <member name="M:AppControlManager.SimulationMethods.Arbitrator.Compare(AppControlManager.Others.SimulationInput)">
            <summary>
            The method that compares the signer information from the App Control policy XML file with the certificate details of the signed file
            </summary>
            <param name="simulationInput">The SimulationInput object that contains the necessary information for the simulation</param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.SimulationMethods.GetCertificateDetails.Get(System.Collections.Generic.List{AppControlManager.Others.AllFileSigners})">
             <summary>
             A method to detect Root, Intermediate and Leaf certificates
             It returns a compound object that contains 2 nested objects for Intermediate and Leaf certificates
            
             Old method of recognizing the certificate type:
             If the file's subject common name is equal to the certificate's subject common name, then it's the leaf certificate - If a certificate's subject common name is equal to its issuer common name, then it's a root certificate - otherwise it's an intermediate certificate
             CertType    = ($SubjectCN -eq $IssuerCN) ? 'Root' : (($SubjectCN -eq $FileSubjectCN) ? 'Leaf' : 'Intermediate')
            
             </summary>
             <param name="completeSignatureResult"></param>
             <returns></returns>
        </member>
        <member name="M:AppControlManager.SimulationMethods.GetFileHashes.Get(System.Xml.XmlDocument)">
            <summary>
            Takes an App Control XML policy and returns all of the Hashes in the Hash rules.
            The method is intentionally not made to handle Allow all rules since checking for their existence happens in the main cmdlet.
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.SimulationMethods.GetSignerInfo.Get(System.Xml.XmlDocument)">
            <summary>
            Takes an XML policy content as input and returns an array of Signer objects
            The output contains as much info as possible about each signer
            </summary>
            <param name="xmlContent"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.SiPolicyIntel.AddSigningDetails.Add(System.String,System.String)">
            <summary>
            Adds the details of a certificate to an App Control policy in order to prepare it for signing.
            Regardless of how many chains a certificate contains, only the leaf certificate will be used.
            It will also remove the unsigned policy rule option.
            </summary>
            <param name="xmlPolicyFile"></param>
            <param name="certificateFile"></param>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.AllowRule">
            <summary>
            For levels: Hash, FileName, FilePath, PFN
            </summary>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.AllowRuleComparer">
             <summary>
             Provides custom equality comparison for <see cref="T:AppControlManager.SiPolicyIntel.AllowRule"/> objects.
             Two AllowRule objects are considered equal if they have the same SigningScenario and at least one
             of the following property-based matching rules holds true:
            
             Rule 1: Both Allow elements have non-empty PackageFamilyName values that are equal (case-insensitive).
             Rule 2: Both Allow elements have non-null Hash values that are equal (using <see cref="M:AppControlManager.SiPolicyIntel.BytesArrayComparer.AreByteArraysEqual(System.Byte[],System.Byte[])"/>).
             Rule 3: Both Allow elements have non-empty FilePath values that are equal (case-insensitive).
             Special Rule: Both Allow elements have a FileName value equal to "*" (wildcard, case-insensitive).
             Rule 4: If both Allow elements specify MinimumFileVersion or both specify MaximumFileVersion,
                     then at least one of the name-related properties (InternalName, FileDescription, ProductName, or FileName)
                     must match (case-insensitive).
            
             In addition, if one element has a MinimumFileVersion and the other has a MaximumFileVersion, they are not considered equal.
             </summary>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.DenyRuleComparer">
            <summary>
            Compares two DenyRule objects for equality based on various properties. Generates a hash code for a DenyRule using
            multiple attributes.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicyIntel.FileAttribDeDuplication.EnsureUniqueFileAttributes(System.Collections.Generic.IEnumerable{System.Object}@,System.Collections.Generic.List{AppControlManager.SiPolicy.Signer},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.AllowedSigner},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.DeniedSigner},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.AllowedSigner},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.DeniedSigner})">
             <summary>
             When 2 FilePublisher or WHQLFilePublisher level signers reference the same FileAttrib
             And they are in different Signing Scenarios and/or one of them allows and the other denies, the FileAttribs that they point to through FileAttribRefs must remain.
             However, if the signers belong to the same SigningScenario and/or they both allow or deny, both signers "can" reference the same FileAttrib.
             De-duplication is not necessary here but if it is to be done, each signer must have its context.
             Context: Whether signer is allowing or denying, or if it's kernel-mode or user-mode.
            
             So 1 file attribute is enough for a single file to refer to all of its signers that are in the same signing scenario and authorization section.
             The only time when 2 file attributes for the same file (with same details) need to exist is when the same file is referenced in different signing scenarios and/or authorization sections, and for each signing scenario/authorization section there needs to be a different fileAttribute.
             </summary>
             <param name="fileRulesNode"></param>
             <param name="signers"></param>
             <param name="userModeAllowedSigners"></param>
             <param name="userModeDeniedSigners"></param>
             <param name="kernelModeAllowedSigners"></param>
             <param name="kernelModeDeniedSigners"></param>
        </member>
        <member name="M:AppControlManager.SiPolicyIntel.FileAttribDeDuplication.AreFileAttribsEqual(AppControlManager.SiPolicy.FileAttrib,AppControlManager.SiPolicy.FileAttrib)">
            <summary>
            Compares two FileAttrib objects based on custom duplicate detection logic.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.SiPolicyIntel.FileAttribDeDuplication.ProcessDuplicateGroup(System.Collections.Generic.List{AppControlManager.SiPolicy.FileAttrib},System.Collections.Generic.Dictionary{System.String,AppControlManager.SiPolicy.Signer},System.Collections.Generic.Dictionary{System.String,AppControlManager.SiPolicy.Signer},System.Collections.Generic.Dictionary{System.String,AppControlManager.SiPolicy.Signer},System.Collections.Generic.Dictionary{System.String,AppControlManager.SiPolicy.Signer},System.Collections.Generic.HashSet{System.String})">
            <summary>
            For a group of duplicate FileAttribs, this method deduplicates them within the same signer dictionary.
            It updates FileAttribRefs by swapping the RuleID from the duplicate to the one kept.
            Only duplicates that are referenced exclusively from a single dictionary (usage key without a comma) are deduplicated.
            </summary>
            <param name="group"></param>
            <param name="allowedSignerUMCIDictionary"></param>
            <param name="deniedSignerUMCIDictionary"></param>
            <param name="allowedSignerKMCIDictionary"></param>
            <param name="deniedSignerKMCIDictionary"></param>
            <param name="fileAttribIdsToRemove"></param>
        </member>
        <member name="M:AppControlManager.SiPolicyIntel.FileAttribDeDuplication.CompareVersions(System.String,System.String)">
            <summary>
            Compares two version strings using the System.Version class.
            Returns -1 if v1 is lower than v2, 1 if v1 is higher than v2, or 0 if they are equal or unparsable.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.FilePublisherSignerRuleComparer">
             <summary>
             Provides custom equality comparison for <see cref="T:AppControlManager.SiPolicyIntel.FilePublisherSignerRule"/> objects.
             Two FilePublisherSignerRule objects are considered equal if:
             - Their SigningScenario and Auth properties match.
             - Depending on the signer properties, either Rule 1 or Rule 2 conditions are met:
               Rule 1: Signer.Name, Signer.CertRoot.Value, and Signer.CertPublisher.Value are equal.
               Rule 2: Signer.Name and Signer.CertRoot.Value are equal.
            
             When a match is found, the FileAttribElements of the new rule are merged into the existing rule.
             </summary>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.FileRuleRule">
            <summary>
            For File Path rules only in the "FileRules" node
            </summary>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.FileRuleRuleComparer">
             <summary>
             Provides custom equality comparison for <see cref="T:AppControlManager.SiPolicyIntel.FileRuleRule"/> objects.
             Two FileRuleRule objects are considered equal if:
            
             1. Their <see cref="P:AppControlManager.SiPolicyIntel.FileRuleRule.SigningScenario"/> values match.
             2. Their underlying <see cref="P:AppControlManager.SiPolicyIntel.FileRuleRule.FileRuleElement"/> objects match based on:
                - Rule 1: If both have a non-empty <see cref="P:AppControlManager.SiPolicy.FileRule.PackageFamilyName"/> and these values are equal (case-insensitive).
                - Rule 2: If both have non-null <see cref="P:AppControlManager.SiPolicy.FileRule.Hash"/> values that are equal according to <see cref="M:AppControlManager.SiPolicyIntel.BytesArrayComparer.AreByteArraysEqual(System.Byte[],System.Byte[])"/>.
                - Rule 3: If both have a non-empty <see cref="P:AppControlManager.SiPolicy.FileRule.FilePath"/> and these values are equal (case-insensitive).
                - Special Rule: If both have <see cref="P:AppControlManager.SiPolicy.FileRule.FileName"/> equal to "*" (case-insensitive).
                - Rule 4: If both have a non-empty <see cref="P:AppControlManager.SiPolicy.FileRule.MinimumFileVersion"/> or <see cref="P:AppControlManager.SiPolicy.FileRule.MaximumFileVersion"/>,
                          then at least one of the following name-related properties must match (case-insensitive):
                          <see cref="P:AppControlManager.SiPolicy.FileRule.InternalName"/>, <see cref="P:AppControlManager.SiPolicy.FileRule.FileDescription"/>, <see cref="P:AppControlManager.SiPolicy.FileRule.ProductName"/>, or <see cref="P:AppControlManager.SiPolicy.FileRule.FileName"/>.
            
             Additionally, the <see cref="P:AppControlManager.SiPolicy.FileRule.Type"/> property is compared. Even if all the other properties match,
             differing <see cref="P:AppControlManager.SiPolicy.FileRule.Type"/> values result in the objects being considered different.
             </summary>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.PublisherSignerRuleComparer">
            <summary>
            Provides custom equality comparison for <see cref="T:AppControlManager.SiPolicyIntel.SignerRule"/> objects.
            Two SignerRule objects are considered equal if:
            - Their SigningScenario and Auth properties are equal.
            - Either:
              Rule 1: Their Signer elements have matching Name, CertRoot.Value, and CertPublisher.Value, or
              Rule 2: Their Signer elements have matching Name and CertRoot.Value.
            </summary>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.SignerCollection">
            <summary>
            This is the output of the method that collects all types of signers from SiPolicies
            </summary>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.SignerRule">
            <summary>
            For Levels: Publisher, LeafCertificate, PcaCertificate, RootCertificate,
            </summary>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.SSType">
            <summary>
            Defines the signing Scenario the SiPolicy elements belong to
            </summary>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.SupplementalPolicySignerRuleComparer">
            <summary>
            Provides comparison logic for SupplementalPolicySignerRule objects based on their SignerElement.
            This comparer supports two matching rules to determine equality.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicyIntel.SupplementalPolicySignerRuleComparer.Equals(AppControlManager.SiPolicyIntel.SupplementalPolicySignerRule,AppControlManager.SiPolicyIntel.SupplementalPolicySignerRule)">
            <summary>
            Determines whether two SupplementalPolicySignerRule objects are equal based on their SignerElement.
            </summary>
            <param name="x">First SupplementalPolicySignerRule object.</param>
            <param name="y">Second SupplementalPolicySignerRule object.</param>
            <returns>True if the objects are considered equal, otherwise false.</returns>
        </member>
        <member name="M:AppControlManager.SiPolicyIntel.SupplementalPolicySignerRuleComparer.GetHashCode(AppControlManager.SiPolicyIntel.SupplementalPolicySignerRule)">
            <summary>
            Generates a hash code for a SupplementalPolicySignerRule based on its SignerElement.
            </summary>
            <param name="obj">The SupplementalPolicySignerRule object.</param>
            <returns>A hash code for the object.</returns>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.UpdatePolicySignerRule">
            <summary>
            Represents a rule for updating a policy signer with a required signer element and an update policy signer.
            </summary>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.UpdatePolicySignerRuleComparer">
            <summary>
            Provides comparison logic for UpdatePolicySignerRule objects based on their SignerElement.
            This comparer supports two matching rules to determine equality.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicyIntel.UpdatePolicySignerRuleComparer.Equals(AppControlManager.SiPolicyIntel.UpdatePolicySignerRule,AppControlManager.SiPolicyIntel.UpdatePolicySignerRule)">
            <summary>
            Determines whether two UpdatePolicySignerRule objects are equal based on their SignerElement.
            </summary>
            <param name="x">First UpdatePolicySignerRule object.</param>
            <param name="y">Second UpdatePolicySignerRule object.</param>
            <returns>True if the objects are considered equal, otherwise false.</returns>
        </member>
        <member name="M:AppControlManager.SiPolicyIntel.UpdatePolicySignerRuleComparer.GetHashCode(AppControlManager.SiPolicyIntel.UpdatePolicySignerRule)">
            <summary>
            Generates a hash code for an UpdatePolicySignerRule based on its SignerElement.
            </summary>
            <param name="obj">The UpdatePolicySignerRule object.</param>
            <returns>A hash code for the object.</returns>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.WHQLFilePublisherSignerRuleComparer">
             <summary>
             Provides custom equality comparison for <see cref="T:AppControlManager.SiPolicyIntel.WHQLFilePublisher"/> objects.
             Two WHQLFilePublisher objects are considered equal if:
             - Their SigningScenario and Auth properties match.
             - Their Signer elements match based on either:
               Rule 1: Name, CertRoot.Value, and CertPublisher.Value match and their EKU lists are equivalent, or
               Rule 2: Name and CertRoot.Value match and their EKU lists are equivalent.
            
             When a match is detected, the FileAttribElements from the duplicate rule are merged into the existing rule.
             </summary>
        </member>
        <member name="M:AppControlManager.SiPolicyIntel.WHQLFilePublisherSignerRuleComparer.MergeFileAttribElements(AppControlManager.SiPolicyIntel.WHQLFilePublisher,AppControlManager.SiPolicyIntel.WHQLFilePublisher)">
            <summary>
            Merge FileAttribElements of the ignored rule into the existing one
            </summary>
            <param name="existing"></param>
            <param name="newRule"></param>
        </member>
        <member name="T:AppControlManager.SiPolicyIntel.WHQLPublisherSignerRuleComparer">
            <summary>
            Provides custom equality comparison for <see cref="T:AppControlManager.SiPolicyIntel.WHQLPublisher"/> objects.
            Two WHQLPublisher objects are considered equal if:
            - Their SigningScenario and Auth properties match.
            - Their signer elements match based on either:
              Rule 1: Name, CertRoot.Value, and CertPublisher.Value match and their EKU lists are equivalent, or
              Rule 2: Name and CertRoot.Value match and their EKU lists are equivalent.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicyIntel.WHQLPublisherSignerRuleComparer.GetHashCode(AppControlManager.SiPolicyIntel.WHQLPublisher)">
            <summary>
            Generates a hash code for a WHQLPublisher object.
            </summary>
        </member>
        <member name="T:AppControlManager.SiPolicy.AppManifest">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AppManifest.SettingDefinition">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AppManifest.Id">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.SettingDefinition">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SettingDefinition.Name">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SettingDefinition.Type">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SettingDefinition.IgnoreAuditPolicies">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.SettingType">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.SettingType.Bool">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.SettingType.StringList">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.SettingType.StringSet">
            <remarks/>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.MacroRegex">
            <remarks>
            Pattern:<br/>
            <code>\\$\\(([^()]+)\\)</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled | RegexOptions.IgnorePatternWhitespace | RegexOptions.CultureInvariant</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "$(".<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [^()] atomically at least once.<br/>
            ○ Match ')'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.WriteOptionalStringValue(System.String)">
            <summary>
            Writes a string value to the binary writer, with a trailing zero terminator.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.WritePaddedCountedBytes(System.Byte[])">
            <summary>
            Writes a counted array of bytes, padded to next 4-byte boundary.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.ConvertFileRuleToBinary(System.Collections.Generic.Dictionary{System.String,System.UInt32}@,System.Object,System.UInt32)">
            <summary>
            Writes a file rule as binary (for main file rules block).
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.ParseStringMacros(System.String,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Writes a string or macro value (for AppIDs) to the binary writer.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.WriteAppIdsAndMaxFileVersion(System.Collections.Generic.Dictionary{System.String,System.String}@,System.Object)">
            <summary>
            Writes AppIDs and MaximumFileVersion for file rules (AppIDs block).
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.WriteFileMetadata(System.Object)">
            <summary>
            Writes InternalName, FileDescription, ProductName for file rules.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.WritePackageInfo(System.Object)">
            <summary>
            Writes PackageFamilyName and PackageVersion for file rules.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.WriteFilePath(System.Object)">
            <summary>
            Writes FilePath for file rules.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.ConvertSignerToBinary(AppControlManager.SiPolicy.Signer,System.Collections.Generic.Dictionary{System.String,System.UInt32},System.Collections.Generic.Dictionary{System.String,System.UInt32},System.Object[])">
            <summary>
            Serializes a Signer into binary format.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.ConvertScenarioToBinary(AppControlManager.SiPolicy.SigningScenario,System.Collections.Generic.Dictionary{System.String,System.UInt32})">
            <summary>
            Serializes a SigningScenario to binary.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.ConvertAllowedSignersToBinary(AppControlManager.SiPolicy.AllowedSigners,System.Collections.Generic.Dictionary{System.String,System.UInt32},System.Collections.Generic.Dictionary{System.String,System.UInt32},System.Object[])">
            <summary>
            Serializes AllowedSigners to binary.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.ConvertDeniedSignersToBinary(AppControlManager.SiPolicy.DeniedSigners,System.Collections.Generic.Dictionary{System.String,System.UInt32},System.Collections.Generic.Dictionary{System.String,System.UInt32},System.Object[])">
            <summary>
            Serializes DeniedSigners to binary.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.ConvertSecureSettingsToBinary(AppControlManager.SiPolicy.Setting[])">
            <summary>
            Serializes secure settings to binary.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.ConvertRequiredFileRulesToBinary(AppControlManager.SiPolicy.FileRulesRef,System.Collections.Generic.Dictionary{System.String,System.UInt32})">
            <summary>
            Serializes required file rules to binary.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.WriteStringSetAppSetting(AppControlManager.SiPolicy.AppSetting)">
            <summary>
            Writes app settings as binary.
            </summary>
            <param name="setting"></param>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsForward.WriteAppSettings(AppControlManager.SiPolicy.AppSettingRegion)">
            <summary>
            Writes application settings region to binary.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsReverse.ConvertBinaryToXmlFile(System.String)">
            <summary>
            Entry point to convert a binary .cip file into its XML representation.
            Reads, parses, and serializes the policy object.
            </summary>
            <param name="binaryFilePath">Input CIP file path</param>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsReverse.ParseSiPolicy(System.IO.BinaryReader)">
            <summary>
            Parses the binary .cip file content to reconstruct the SiPolicy C# object.
            Handles all versioned blocks and structure.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsReverse.ParseSigner(System.IO.BinaryReader,System.String[],System.String[])">
            <summary>
            Parse a Signer structure from binary, including EKU and file attribute references.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsReverse.ParseAllowedSigners(System.IO.BinaryReader,System.String[],System.String[])">
            <summary>
            Parse an AllowedSigners structure from binary.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsReverse.ParseDeniedSigners(System.IO.BinaryReader,System.String[],System.String[])">
            <summary>
            Parse a DeniedSigners structure from binary.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsReverse.ParseFileRulesRef(System.IO.BinaryReader,System.String[])">
            <summary>
            Parse a FileRulesRef structure from binary.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsReverse.ParseAppSettings(System.IO.BinaryReader)">
            <summary>
            Parse the AppSettings region from the binary policy.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsReverse.ReadStringValue(System.IO.BinaryReader)">
            <summary>
            Reads a length-prefixed and 4-byte aligned Unicode string from the binary reader.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsReverse.ReadCountedAlignedBytes(System.IO.BinaryReader)">
            <summary>
            Reads a length-prefixed and 4-byte aligned byte array from the binary reader.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.BinaryOpsReverse.NumberToStringVersionFixed(System.UInt64)">
            <summary>
            Converts a 64-bit version number to a 4-part dot-separated version string.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.CustomAppManifestLogics.DeserializeAppManifest(System.String,System.IO.MemoryStream)">
            <summary>
            Deserializes an Application Manifest from either a file path or a MemoryStream into an AppManifest object.
            </summary>
            <param name="filePath">The path to the XML file containing the Application Manifest.</param>
            <param name="stream">The MemoryStream containing the Application Manifest XML.</param>
            <returns>An AppManifest object populated with data from the provided XML.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when neither a valid file path nor a stream is provided, or if the XML does not conform to the schema.</exception>
        </member>
        <member name="M:AppControlManager.SiPolicy.CustomAppManifestLogics.CreateXmlFromAppManifest(AppControlManager.SiPolicy.AppManifest)">
            <summary>
            Serializes an AppManifest object into an XML document.
            </summary>
            <param name="manifest">The AppManifest object to serialize.</param>
            <returns>An XmlDocument representing the Application Manifest.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the manifest or its required properties are null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the manifest contains invalid data per the schema.</exception>
        </member>
        <member name="M:AppControlManager.SiPolicy.CustomDeserialization.DeserializeSiPolicy(System.String,System.Xml.XmlDocument)">
            <summary>
            Deserializes a security policy from either a file path or an XML document into a SiPolicy object.
            </summary>
            <param name="filePath">Specifies the location of the XML file to load the policy from.</param>
            <param name="Xml">Provides an XML document to deserialize the policy if the file path is not used.</param>
            <returns>Returns a SiPolicy object populated with data from the provided XML.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when neither a valid file path nor an XML document is provided for deserialization.</exception>
        </member>
        <member name="M:AppControlManager.SiPolicy.CustomDeserialization.ValidateVersionRange(System.String,System.String,System.String)">
            <summary>
            If both <paramref name="minimumVersion"/> and <paramref name="maximumVersion"/> are non-null
            and non-empty, parses them and ensures minimum ≤ maximum.  Otherwise, returns immediately.
            </summary>
            <param name="minimumVersion">The lower bound version string (nullable).</param>
            <param name="maximumVersion">The upper bound version string (nullable).</param>
            <param name="id">An identifier to include in any exception message.</param>
            <exception cref="T:System.ArgumentException">
                Thrown if either version string cannot be parsed when both are provided.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if the parsed minimum version is greater than the parsed maximum version.
            </exception>
        </member>
        <member name="M:AppControlManager.SiPolicy.CustomSerialization.CreateXmlFromSiPolicy(AppControlManager.SiPolicy.SiPolicy)">
            <summary>
            Generates an XML document from a given security policy object, encapsulating various attributes and elements.
            </summary>
            <param name="policy">The security policy object provides the necessary data to populate the XML structure.</param>
            <returns>An XmlDocument representing the structured XML of the security policy.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when required elements or attributes cannot be appended to the XML document.</exception>
        </member>
        <member name="M:AppControlManager.SiPolicy.CustomSerialization.AppendTextElement(System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Helper method, its return value must be checked by the caller and handled accordingly
            </summary>
            <param name="doc"></param>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.SiPolicy.CustomSerialization.AppendAttributeElement(System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.String,System.String)">
            <summary>
            Helper method, its return value must be checked by the caller and handled accordingly
            </summary>
            <param name="doc"></param>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.SiPolicy.Helper.CompareSettingObjects(System.Object,System.Object)">
            <summary>
            Compare two settings for ordering (Provider, Key, ValueName).
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.Helper.CompareByteArrays(System.Byte[],System.Byte[])">
            <summary>
            Compare two byte arrays lexicographically, then by length.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.Helper.CompareFileRuleObjects(System.Object,System.Object)">
            <summary>
            Compare two file rule objects for ordering.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.Helper.AdaptGenericFileRule(AppControlManager.SiPolicy.FileRule)">
            <summary>
            Converts a generic FileRule object into a typed file rule (Allow, Deny, FileAttrib).
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.Helper.CreateDefaultPolicySettingForAppIdTagging">
            <summary>
            Returns a Setting object for the default policy for AppId Tagging.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.Helper.MapAppIdTagsToSecureSettings(AppControlManager.SiPolicy.AppIDTags)">
            <summary>
            Converts AppIDTags into a list of secure Settings.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.Helper.ProjectSignerToCiSigner(AppControlManager.SiPolicy.Signer)">
            <summary>
            Converts a Signer object to a CiSigner object.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.Helper.ConvertStringVersionToUInt64(System.String)">
            <summary>
            Converts a version string of up to four "."-separated numeric segments
            into a single 64-bit integer by packing each segment into 16 bits.
            Returns 0 if <paramref name="version"/> is null.
            Throws InvalidOperationException if there are more than four segments,
            or FormatException/OverflowException if any segment is not a valid UInt16.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.Helper.CalculateScenarioValueArray(AppControlManager.SiPolicy.SiPolicy,System.UInt32[]@)">
            <summary>
            Populates scenarioIndex2Value with the Value field of each scenario in siPolicy.SigningScenarios.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.Helper.ComputeOptionFlags(AppControlManager.SiPolicy.SiPolicy)">
            <summary>
            Computes the policy option flags from the rules in the policy.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.Helper.AppendSettingFromRule(System.Collections.Generic.List{AppControlManager.SiPolicy.Setting},AppControlManager.SiPolicy.SiPolicy)">
            <summary>
            Adds settings which are mapped from rules in the policy to the provided SettingsList.
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.Helper.RetrieveApplicationManifest(System.Net.Http.HttpClient,System.Uri)">
            <summary>
            Loads and parses an application manifest from a URI (file or web).
            </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.Management.Initialize(System.String,System.Xml.XmlDocument)">
             <summary>
             This class uses the auto-generated code from the XSD schema to initialize the SiPolicy object
             By accepting a string path to a valid XML file
             Native AOT/Trimming compatible
            
             Generated by the following command:
             . "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64\xsd.exe" "C:\Windows\schemas\CodeIntegrity\cipolicy.xsd" /classes /namespace:AppControlManager.SiPolicy /language:CS
             </summary>
             <param name="xmlFilePath"></param>
             <param name="XmlObj"></param>
             <returns></returns>
             <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.SiPolicy.Management.ConvertXMLToBinary(System.String,System.Xml.XmlDocument,System.String)">
            <summary>
            Converts a Code Integrity policy to CIP binary file.
            </summary>
            <param name="xmlFilePath"></param>
            <param name="XmlObj"></param>
            <param name="BinPath"></param>
        </member>
        <member name="M:AppControlManager.SiPolicy.Management.SavePolicyToFile(AppControlManager.SiPolicy.SiPolicy,System.String)">
            <summary>
            Saves the SiPolicy object to a XML file.
            Uses custom hand made serialization logic that is compatible with Native AOT compilation
            </summary>
            <param name="policy"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:AppControlManager.SiPolicy.Factory.CollectAllowRules(System.Collections.Generic.List{AppControlManager.SiPolicy.SiPolicy})">
            <summary>
            This is a context-aware method that collects all "Allow" elements or Allow rules in the policy from FileRules node/section.
            It de-duplicates them using a custom HashSet.
            </summary>
            <param name="siPolicies"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.SiPolicy.Factory.CollectDenyRules(System.Collections.Generic.List{AppControlManager.SiPolicy.SiPolicy})">
            <summary>
            This is a context-aware method that collects all "Deny" elements or Deny rules in the policy from FileRules node/section.
            It de-duplicates them using a custom HashSet.
            </summary>
            <param name="siPolicies"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.SiPolicy.Factory.CollectFileRules(System.Collections.Generic.List{AppControlManager.SiPolicy.SiPolicy})">
            <summary>
            This is a context-aware method that collects all "FileRule" elements or FileRule rules in the policy from FileRules node/section.
            It de-duplicates them using a custom HashSet.
            </summary>
            <param name="siPolicies"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.SiPolicy.Factory.CollectSignerRules(System.Collections.Generic.List{AppControlManager.SiPolicy.SiPolicy})">
            <summary>
            This is a context-aware method that collects all "Signer" elements or Signer rules in the policy from Signers node/section.
            Each signer is complete and has all of the elements that can be used in the policy file independently.
            </summary>
            <param name="siPolicies"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.SiPolicy.Factory.AddSignerRule(AppControlManager.SiPolicy.Signer,AppControlManager.SiPolicy.SigningScenario,AppControlManager.SiPolicyIntel.Authorization,AppControlManager.SiPolicy.AllowedSigner,AppControlManager.SiPolicy.DeniedSigner,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,AppControlManager.SiPolicy.FileAttrib},System.Collections.Generic.HashSet{AppControlManager.SiPolicyIntel.FilePublisherSignerRule},System.Collections.Generic.HashSet{AppControlManager.SiPolicyIntel.SignerRule},System.Collections.Generic.HashSet{AppControlManager.SiPolicyIntel.WHQLPublisher},System.Collections.Generic.HashSet{AppControlManager.SiPolicyIntel.WHQLFilePublisher},System.Collections.Generic.Dictionary{System.String,AppControlManager.SiPolicy.EKU})">
            <summary>
            Helper method that categorizes each signer
            </summary>
            <param name="signer"></param>
            <param name="signingScenario"></param>
            <param name="auth"></param>
            <param name="allowedSigner"></param>
            <param name="deniedSigner"></param>
            <param name="ciSignerSet"></param>
            <param name="fileAttribDictionary"></param>
            <param name="filePublisherSigners"></param>
            <param name="signerRules"></param>
            <param name="WHQLPublishers"></param>
            <param name="WHQLFilePublishers"></param>
            <param name="ekuDictionary"></param>
        </member>
        <member name="M:AppControlManager.SiPolicy.Factory.ProcessSupplementalPolicySigners(System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,AppControlManager.SiPolicy.Signer},System.Collections.Generic.HashSet{AppControlManager.SiPolicyIntel.SupplementalPolicySignerRule})">
            <summary>
            Processes SupplementalPolicySigners
            </summary>
            <param name="supplementalPolicySignerIDs"></param>
            <param name="Signers"></param>
            <param name="supplementalPolicySignersSet"></param>
        </member>
        <member name="M:AppControlManager.SiPolicy.Factory.ProcessUpdatePolicySigners(System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,AppControlManager.SiPolicy.Signer},System.Collections.Generic.HashSet{AppControlManager.SiPolicyIntel.UpdatePolicySignerRule})">
            <summary>
            Processes UpdatePolicySigners
            </summary>
            <param name="updatePolicySignerIDs"></param>
            <param name="Signers"></param>
            <param name="updatePolicySignersSet"></param>
        </member>
        <member name="T:AppControlManager.SiPolicy.Merger">
             <summary>
             --- EXTRA information regarding the overall merge operation and what needs to happen ---
            
             The FilePublisher and Publisher Signers in an XML file must be based on their TBS, Name, and/or CertPublisher values.
             For each FilePublisher signer, if two signers are found with the same TBS, Name, and CertPublisher, only one of them shall be kept, and their FileAttribRefs shall be merged.
             For each Publisher signer, if two signers are found with the same TBS, Name, and/or CertPublisher, only one of them shall be kept.
            
             Distinction shall be made between FilePublisher and Publisher signers: If two signers have the same TBS, Name, and/or CertPublisher but only one of them has FileAttribRefs, then they are not the same.
             A signer can only be associated with a single SigningScenario at a time. So if a Signer needs to be allowed for both user and kernel mode, it should be mentioned twice, with different IDs.
             So there are 4 different Signer types to consider.
            
            
             Each "Allow" node in "FileRules" nodes is associated only with one Signing scenario at a time. Same goes for "Deny" nodes.
            
             In the "EKUs" node there must be unique EKUs only based on their value. If 2 Signers need to reference the same EKU value, they must use same EKU's ID in their CertEKU section.
            
             </summary>
        </member>
        <member name="M:AppControlManager.SiPolicy.Merger.Merge(System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            This is the Main method that is responsible for merging 2 XML files.
            The result will be saved in the first XL file and there will be no duplicate data.
            The first XML file's data that are non-arrays will be maintained.
            Only the data that are arrays will be merged.
            No date is lost in the merge process.
            </summary>
            <param name="mainXmlFilePath"></param>
            <param name="otherXmlFilePaths"></param>
        </member>
        <member name="M:AppControlManager.SiPolicy.Merger.PolicyDeserializer(System.Collections.Generic.List{AppControlManager.SiPolicy.SiPolicy},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.EKU}@,System.Collections.Generic.IEnumerable{System.Object}@,System.Collections.Generic.List{AppControlManager.SiPolicy.Signer}@,System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.CiSigner}@,System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.AllowedSigner}@,System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.DeniedSigner}@,System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.AllowedSigner}@,System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.DeniedSigner}@,System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.SupplementalPolicySigner}@,System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.UpdatePolicySigner}@,System.Collections.Generic.HashSet{AppControlManager.SiPolicyIntel.FileRuleRule}@,System.Collections.Generic.HashSet{AppControlManager.SiPolicyIntel.DenyRule}@,System.Collections.Generic.HashSet{AppControlManager.SiPolicyIntel.AllowRule}@,AppControlManager.SiPolicyIntel.SignerCollection@,System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.FileRuleRef}@,System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.FileRuleRef}@)">
            <summary>
            Accepts mainXML and allPolicies, and accepts many other collections, fills them with data.
            It can be used for a single SiPolicy as well, just supply the same object for both parameters.
            </summary>
            <param name="allPolicies">Input data</param>
            <param name="ekusToUse">Output data</param>
            <param name="fileRulesNode">Output data</param>
            <param name="signers">Output data</param>
            <param name="ciSigners">Output data</param>
            <param name="userModeAllowedSigners">Output data</param>
            <param name="userModeDeniedSigners">Output data</param>
            <param name="kernelModeAllowedSigners">Output data</param>
            <param name="kernelModeDeniedSigners">Output data</param>
            <param name="supplementalPolicySignersCol">Output data</param>
            <param name="updatePolicySignersCol">Output data</param>
            <param name="fileRules">Output data</param>
            <param name="denyRules">Output data</param>
            <param name="allowRules">Output data</param>
            <param name="signerCollection">Output data</param>
            <param name="kernelModeFileRulesRefs">Output data</param>
            <param name="userModeFileRulesRefs">Output data</param>
        </member>
        <member name="M:AppControlManager.SiPolicy.Merger.PolicyGenerator(System.String,AppControlManager.SiPolicy.SiPolicy,System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.EKU},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.List{AppControlManager.SiPolicy.Signer},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.CiSigner},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.AllowedSigner},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.DeniedSigner},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.AllowedSigner},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.DeniedSigner},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.SupplementalPolicySigner},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.UpdatePolicySigner},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.FileRuleRef},System.Collections.Generic.IEnumerable{AppControlManager.SiPolicy.FileRuleRef})">
            <summary>
            Creates an App Control policy from the deserialized data
            </summary>
            <param name="mainXmlFilePath">The file path where the generated policy will be saved</param>
            <param name="mainXML">The deserialized SiPolicy object of the main policy</param>
            <param name="ekusToUse">EKUs collection of data used to generate the policy</param>
            <param name="fileRulesNode"></param>
            <param name="signers"></param>
            <param name="ciSigners"></param>
            <param name="userModeAllowedSigners"></param>
            <param name="userModeDeniedSigners"></param>
            <param name="kernelModeAllowedSigners"></param>
            <param name="kernelModeDeniedSigners"></param>
            <param name="supplementalPolicySignersCol"></param>
            <param name="updatePolicySignersCol"></param>
            <param name="kernelModeFileRulesRefs"></param>
            <param name="userModeFileRulesRefs"></param>
        </member>
        <member name="M:AppControlManager.SiPolicy.Merger.EnsureUniqueEKUs(System.String)">
            <summary>
            Helper method to de-duplicate EKUs
            </summary>
            <param name="xmlFilePath"></param>
        </member>
        <member name="M:AppControlManager.SiPolicy.Merger.IsSignerRule1Match(AppControlManager.SiPolicy.Signer,AppControlManager.SiPolicy.Signer)">
            <summary>
            Rule 1: Name, CertRoot.Value, CertPublisher.Value must match
            </summary>
            <param name="signerX"></param>
            <param name="signerY"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.SiPolicy.Merger.IsSignerRule2Match(AppControlManager.SiPolicy.Signer,AppControlManager.SiPolicy.Signer)">
            <summary>
            Rule 2: Name and CertRoot.Value must match
            </summary>
            <param name="signerX"></param>
            <param name="signerY"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.SiPolicy.Merger.DoEKUsMatch(System.Collections.Generic.List{AppControlManager.SiPolicy.EKU},System.Collections.Generic.List{AppControlManager.SiPolicy.EKU})">
            <summary>
            Rule 3: Compare EKU lists based on Value only (ignore IDs)
            </summary>
            <param name="ekusX">EKU list for first signer</param>
            <param name="ekusY">EKU list for second signer</param>
            <returns>True if EKU values match</returns>
        </member>
        <member name="M:AppControlManager.SiPolicy.Merger.CompareCommonRuleProperties(System.Nullable{AppControlManager.SiPolicyIntel.SSType},System.Nullable{AppControlManager.SiPolicyIntel.SSType},System.Nullable{AppControlManager.SiPolicy.RuleTypeType},System.Nullable{AppControlManager.SiPolicy.RuleTypeType},System.String,System.String,System.Byte[],System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Compares the common properties of two rule objects.
            For properties that aren't applicable in a given rule type, pass null.
            </summary>
            <param name="signingScenarioX"></param>
            <param name="signingScenarioY"></param>
            <param name="ruleTypeX"></param>
            <param name="ruleTypeY"></param>
            <param name="packageFamilyNameX"></param>
            <param name="packageFamilyNameY"></param>
            <param name="hashX"></param>
            <param name="hashY"></param>
            <param name="filePathX"></param>
            <param name="filePathY"></param>
            <param name="fileNameX"></param>
            <param name="fileNameY"></param>
            <param name="minimumFileVersionX"></param>
            <param name="minimumFileVersionY"></param>
            <param name="maximumFileVersionX"></param>
            <param name="maximumFileVersionY"></param>
            <param name="internalNameX"></param>
            <param name="internalNameY"></param>
            <param name="fileDescriptionX"></param>
            <param name="fileDescriptionY"></param>
            <param name="productNameX"></param>
            <param name="productNameY"></param>
            <returns>True if the rules are considered equal according to the common logic; otherwise false.</returns>
        </member>
        <member name="M:AppControlManager.SiPolicy.Merger.BothAreWhitespaceOrEqual(System.String,System.String)">
            <summary>
            Helper method to check if two strings are both whitespace or exactly equal
            ✅ " " and " " → Equal
            ✅ "text" and "text" → Equal
            ❌ "text" and " text " → Not Equal
            ❌ null and " " → Not Equal
            ❌ null and null → Not Equal
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:AppControlManager.SiPolicy.Macros">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Macros.Macro">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.MacrosMacro">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.MacrosMacro.Id">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.MacrosMacro.Value">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.AppSetting">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AppSetting.Value">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AppSetting.Name">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.AppRoot">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AppRoot.Setting">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AppRoot.Manifest">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.AppSettingRegion">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AppSettingRegion.App">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.RuleType">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.RuleType.Item">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.OptionType">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledUMCI">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledBootMenuProtection">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledIntelligentSecurityGraphAuthorization">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledInvalidateEAsonReboot">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.RequiredWHQL">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledDeveloperModeDynamicCodeTrust">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledAllowSupplementalPolicies">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.DisabledRuntimeFilePathRuleProtection">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledRevokedExpiredAsUnsigned">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledAuditMode">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.DisabledFlightSigning">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledInheritDefaultPolicy">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledUnsignedSystemIntegrityPolicy">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledDynamicCodeSecurity">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.RequiredEVSigners">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledBootAuditOnFailure">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledAdvancedBootOptionsMenu">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.DisabledScriptEnforcement">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.RequiredEnforceStoreApplications">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledSecureSettingPolicy">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledManagedInstaller">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledUpdatePolicyNoReboot">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.EnabledConditionalWindowsLockdownPolicy">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.OptionType.DisabledDefaultWindowsCertificateRemapping">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.SettingValueType">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SettingValueType.Item">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.Setting">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Setting.Value">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Setting.Provider">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Setting.Key">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Setting.ValueName">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.Settings">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Settings.Items">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.CertEKU">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.CertEKU.ID">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.CertOemID">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.CertOemID.Value">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.CertPublisher">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.CertPublisher.Value">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.CertIssuer">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.CertIssuer.Value">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.CertRoot">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.CertRoot.Type">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.CertRoot.Value">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.CertEnumType">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.CertEnumType.TBS">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.CertEnumType.Wellknown">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.ProductSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.ProductSigners.AllowedSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.ProductSigners.DeniedSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.ProductSigners.FileRulesRef">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.AllowedSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AllowedSigners.AllowedSigner">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AllowedSigners.Workaround">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.AllowedSigner">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AllowedSigner.ExceptDenyRule">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AllowedSigner.SignerId">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.ExceptDenyRule">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.ExceptDenyRule.DenyRuleID">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.DeniedSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.DeniedSigners.DeniedSigner">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.DeniedSigners.Workaround">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.DeniedSigner">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.DeniedSigner.ExceptAllowRule">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.DeniedSigner.SignerId">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.ExceptAllowRule">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.ExceptAllowRule.AllowRuleID">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.FileRulesRef">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRulesRef.FileRuleRef">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRulesRef.Workaround">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.FileRuleRef">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRuleRef.RuleID">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.TestSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.TestSigners.AllowedSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.TestSigners.DeniedSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.TestSigners.FileRulesRef">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.TestSigningSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.TestSigningSigners.AllowedSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.TestSigningSigners.DeniedSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.TestSigningSigners.FileRulesRef">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.AppIDTag">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AppIDTag.Key">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AppIDTag.Value">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.AppIDTags">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AppIDTags.AppIDTag">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AppIDTags.EnforceDLL">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.AppIDTags.EnforceDLLSpecified">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.FileAttribRef">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttribRef.RuleID">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.EKUs">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.EKUs.Items">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.EKU">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.EKU.ID">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.EKU.Value">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.EKU.FriendlyName">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.FileRules">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRules.Items">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.Allow">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Allow.ID">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Allow.FriendlyName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Allow.FileName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Allow.InternalName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Allow.FileDescription">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Allow.ProductName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Allow.PackageFamilyName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Allow.PackageVersion">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Allow.MinimumFileVersion">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Allow.MaximumFileVersion">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Allow.Hash">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Allow.AppIDs">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Allow.FilePath">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.Deny">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Deny.ID">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Deny.FriendlyName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Deny.FileName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Deny.InternalName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Deny.FileDescription">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Deny.ProductName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Deny.PackageFamilyName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Deny.PackageVersion">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Deny.MinimumFileVersion">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Deny.MaximumFileVersion">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Deny.Hash">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Deny.AppIDs">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Deny.FilePath">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.FileAttrib">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttrib.ID">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttrib.FriendlyName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttrib.FileName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttrib.InternalName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttrib.FileDescription">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttrib.ProductName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttrib.PackageFamilyName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttrib.PackageVersion">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttrib.MinimumFileVersion">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttrib.MaximumFileVersion">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttrib.Hash">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttrib.AppIDs">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileAttrib.FilePath">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.FileRule">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.ID">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.FriendlyName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.FileName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.InternalName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.FileDescription">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.ProductName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.PackageFamilyName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.PackageVersion">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.MinimumFileVersion">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.MaximumFileVersion">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.Hash">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.AppIDs">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.FilePath">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.FileRule.Type">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.RuleTypeType">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.RuleTypeType.Match">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.RuleTypeType.Exclude">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.RuleTypeType.Attribute">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.UpdatePolicySigner">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.UpdatePolicySigner.SignerId">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.UpdatePolicySigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.UpdatePolicySigners.Items">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.SupplementalPolicySigner">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SupplementalPolicySigner.SignerId">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.SupplementalPolicySigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SupplementalPolicySigners.Items">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.CiSigner">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.CiSigner.SignerId">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.CiSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.CiSigners.Items">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.Signers">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Signers.Items">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.Signer">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Signer.CertRoot">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Signer.CertEKU">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Signer.CertIssuer">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Signer.CertPublisher">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Signer.CertOemID">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Signer.FileAttribRef">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Signer.Name">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Signer.ID">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Signer.SignTimeAfter">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.Signer.SignTimeAfterSpecified">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.SigningScenarios">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SigningScenarios.Items">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.SigningScenario">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SigningScenario.ProductSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SigningScenario.TestSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SigningScenario.TestSigningSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SigningScenario.AppIDTags">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SigningScenario.ID">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SigningScenario.FriendlyName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SigningScenario.Value">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SigningScenario.InheritedScenarios">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SigningScenario.MinimumHashAlgorithm">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SigningScenario.MinimumHashAlgorithmSpecified">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.SiPolicy">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.VersionEx">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.PolicyTypeID">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.PlatformID">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.PolicyID">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.BasePolicyID">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.Rules">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.EKUs">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.FileRules">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.Signers">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.SigningScenarios">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.UpdatePolicySigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.CiSigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.HvciOptions">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.HvciOptionsSpecified">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.Settings">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.Macros">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.SupplementalPolicySigners">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.AppSettings">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.FriendlyName">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.PolicyType">
            <remarks/>
        </member>
        <member name="P:AppControlManager.SiPolicy.SiPolicy.PolicyTypeSpecified">
            <remarks/>
        </member>
        <member name="T:AppControlManager.SiPolicy.PolicyType">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.PolicyType.BasePolicy">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.PolicyType.SupplementalPolicy">
            <remarks/>
        </member>
        <member name="F:AppControlManager.SiPolicy.PolicyType.AppIDTaggingPolicy">
            <remarks/>
        </member>
        <member name="T:AppControlManager.Taskbar.Badge">
            <summary>
            Manages the badging system.
            https://learn.microsoft.com/windows/apps/design/shell/tiles-and-notifications/badges
            </summary>
        </member>
        <member name="M:AppControlManager.Taskbar.Badge.ClearBadge">
            <summary>
            Clears any badge on the taskbar icon.
            </summary>
        </member>
        <member name="T:AppControlManager.Taskbar.ITaskbarList3">
            <summary>
            Defining the COM interface, since we're manually wrapping we don't need [GeneratedComInterface]
            </summary>
        </member>
        <member name="M:AppControlManager.Taskbar.ITaskbarList3.HrInit">
            <summary>
            Initializes the taskbar list.
            </summary>
        </member>
        <member name="M:AppControlManager.Taskbar.ITaskbarList3.SetProgressValue(System.IntPtr,System.UInt64,System.UInt64)">
            <summary>
            Sets the progress value on the taskbar for a specified window handle.
            </summary>
            <param name="hwnd">the handle (HWND) to the window whose taskbar icon should display progress.</param>
            <param name="completed">the current progress value.</param>
            <param name="total">the total or maximum progress value.</param>
            <returns></returns>
        </member>
        <member name="T:AppControlManager.Taskbar.JumpListMgr">
            <summary>
            https://learn.microsoft.com/uwp/api/windows.ui.startscreen.jumplistitem
            </summary>
        </member>
        <member name="T:AppControlManager.Taskbar.TaskbarListWrapper">
            <summary>
            A manual COM wrapper for ITaskbarList3.
            This class wraps the native COM pointer and invokes methods via the COM vtable.
            </summary>
            <param name="pCom"></param>
        </member>
        <member name="M:AppControlManager.Taskbar.TaskbarListWrapper.#ctor(System.Void*)">
            <summary>
            A manual COM wrapper for ITaskbarList3.
            This class wraps the native COM pointer and invokes methods via the COM vtable.
            </summary>
            <param name="pCom"></param>
        </member>
        <member name="F:AppControlManager.Taskbar.TaskbarListWrapper._pCom">
            <summary>
            Pointer to the native COM object, allowing interaction with COM components. It is used for managing native
            resources.
            </summary>
        </member>
        <member name="F:AppControlManager.Taskbar.TaskbarListWrapper._vtbl">
            <summary>
            Holds a pointer to the COM object's virtual function table (vtable). This enables calling native methods associated
            with the COM object.
            </summary>
        </member>
        <member name="M:AppControlManager.Taskbar.TaskbarListWrapper.AppControlManager#Taskbar#ITaskbarList3#HrInit">
            <summary>
            Initializes the taskbar list by calling the HrInit method from the vtable (located at vtable slot index 3).
            </summary>
            <returns>Returns an integer indicating the success or failure of the initialization.</returns>
        </member>
        <member name="M:AppControlManager.Taskbar.TaskbarListWrapper.AppControlManager#Taskbar#ITaskbarList3#SetProgressValue(System.IntPtr,System.UInt64,System.UInt64)">
            <summary>
            Calls the SetProgressValue method (located at vtable slot index 9) to update the taskbar progress.
            </summary>
            <param name="hwnd">Specifies the handle to the window for which the progress is being updated.</param>
            <param name="completed">Indicates the amount of work that has been completed.</param>
            <param name="total">Represents the total amount of work to be done.</param>
            <returns>Returns an integer value indicating the result of the operation.</returns>
        </member>
        <member name="M:AppControlManager.Taskbar.TaskbarListWrapper.System#IDisposable#Dispose">
            <summary>
            Releases the native COM pointer by calling Release on the vtable.
            </summary>
        </member>
        <member name="T:AppControlManager.Taskbar.TaskBarProgress">
            <summary>
            A static class that provides methods to create and update taskbar progress.
            This class encapsulates the process of creating the COM object and updating its progress value.
            </summary>
        </member>
        <member name="F:AppControlManager.Taskbar.TaskBarProgress.CLSCTX_INPROC_SERVER">
            <summary>
            Represents the flag for an in-process server in COM (Component Object Model) programming. It indicates that the
            server runs in the same process as the client.
            </summary>
        </member>
        <member name="F:AppControlManager.Taskbar.TaskBarProgress.CLSID_TaskbarList">
            <summary>
            Represents the CLSID for the TaskbarList COM object, used for interacting with the Windows taskbar.
            </summary>
        </member>
        <member name="F:AppControlManager.Taskbar.TaskBarProgress._updateLock">
            <summary>
            A static object used to synchronize access to the UpdateTaskbarProgress method.
            </summary>
        </member>
        <member name="M:AppControlManager.Taskbar.TaskBarProgress.CreateTaskbarList">
            <summary>
            Creates an instance of ITaskbarList3 wrapped in our manual COM wrapper.
            </summary>
            <returns>an object that implements ITaskbarList3, which lets us set the taskbar progress.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.Taskbar.TaskBarProgress.UpdateTaskbarProgress(System.IntPtr,System.UInt64,System.UInt64)">
            <summary>
            Updates the taskbar progress for a specified window using completion and total values.
            </summary>
            <param name="hwnd">The handle of the window for which the taskbar progress is being updated.</param>
            <param name="completed">Represents the amount of work completed towards the total task.</param>
            <param name="total">Indicates the total amount of work to be completed.</param>
        </member>
        <member name="P:AppControlManager.ViewModels.AllowNewAppsVM.selectedXMLFilePath">
            <summary>
            The user selected XML base policy path.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.AllowNewAppsVM.selectedSupplementalPolicyName">
            <summary>
            The user selected Supplemental policy name.
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.AllowNewAppsVM.selectedDirectoriesToScan">
            <summary>
            The user selected directories to scan
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.AllowNewAppsVM.fileIdentities">
            <summary>
            Custom HashSet to store the output of both local files and event logs scans
            If the same file is detected in event logs And local file scans, the one with IsECCSigned property set to true will be kept
            So that the respective methods will make Hash based rule for that file since AppControl doesn't support ECC Signed files yet
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.AllowNewAppsVM._IsSignedPolicy">
            <summary>
            Will determine whether the user selected XML policy file is signed or unsigned
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.AllowNewAppsVM.SupplementalPolicyNameTextBoxIsEnabled">
            <summary>
            Gets or sets a value indicating whether the supplemental policy name text box is enabled.
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.AllowNewAppsVM.scanLevel">
            <summary>
            The user selected scan level
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.AllowNewAppsVM.LogsScanStartTime">
            <summary>
            Only the logs generated after this time will be shown
            It will be set when user moves from Step1 to Step2
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.AllowNewAppsVM._BasePolicyObject">
            <summary>
            The base policy XML objectified
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.AllowNewAppsVM.finalSupplementalPolicyPath">
            <summary>
            Path of the Supplemental policy that is created
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.AllowNewAppsVM.EventLogsMenuItemState">
            <summary>
            Holds the state of the Event Logs menu item, indicating whether it is enabled or disabled.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.AllowNewAppsVM.LocalFilesMenuItemState">
            <summary>
            Stores the state of the local files menu item as a boolean value. Indicates whether the local files menu item is
            enabled or disabled.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.AllowNewAppsVM.LocalFilesCountInfoBadgeValue">
            <summary>
            Stores the count of local files for display in an info badge. Used to track and indicate the number of local files.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.AllowNewAppsVM.LocalFilesCountInfoBadgeOpacity">
            <summary>
            Stores the opacity level for the local files count info badge. It is a double value representing transparency.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.AllowNewAppsVM.EventLogsCountInfoBadgeValue">
            <summary>
            Stores the count of event logs for the info badge. Used to track the number of events for display purposes.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.AllowNewAppsVM.EventLogsCountInfoBadgeOpacity">
            <summary>
            Stores the opacity level for the event logs count info badge. It is a double value representing transparency.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.AllowNewAppsVM.DeployPolicy">
            <summary>
            Toggle button to determine whether the new Supplemental policy should be deployed on the system after creation or not.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.AllowNewAppsVM.DeployPolicyState">
            <summary>
            The Enabled/Disabled state of the DeployPolicy button.
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.AllowNewAppsVM.linearGradientBrush">
            <summary>
            Gradient color used for the active border.
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.AllowNewAppsVM.ThemeShadow">
            <summary>
            Create a ThemeShadow used to highlight the active section/border.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.CalculateColumnWidthEventLogs">
            <summary>
            Calculates the maximum required width for each column (including header text)
            and assigns the value (with a little extra padding) to the corresponding property.
            It should always run once ALL the data have been added to the ObservableCollection that is the ItemsSource of the ListView
            And only after this method, the ItemsSource must be assigned to the ListView.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.CalculateColumnWidthLocalFiles">
            <summary>
            Calculates the maximum required width for each column (including header text)
            and assigns the value (with a little extra padding) to the corresponding property.
            It should always run once ALL the data have been added to the ObservableCollection that is the ItemsSource of the ListView
            And only after this method, the ItemsSource must be assigned to the ListView.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.ClearLocalFilesDataButton_Click">
            <summary>
            Event handler for the Clear Data button
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.UpdateTotalFiles(System.Nullable{System.Boolean})">
            <summary>
            Updates the total logs count displayed on the UI
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.ClearEventLogsDataButton_Click">
            <summary>
            Event handler for the Clear Data button
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.UpdateTotalLogs(System.Nullable{System.Boolean})">
            <summary>
            Updates the total logs count displayed on the UI
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.OpenInPolicyEditor">
            <summary>
            Event handler to open the supplemental policy in the Policy Editor
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.BrowseForXMLPolicyButton_Flyout_Clear_Click(System.Object,Microsoft.UI.Xaml.RoutedEventArgs)">
            <summary>
            Event handler for the clear button in the base policy path selection button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.CreatePolicyButton_Click">
            <summary>
            Event handler for the Create Policy button - Step 3
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.BrowseForXMLPolicyButton_Click">
            <summary>
            Handles the click event for a button to browse and select an XML policy file.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the selected file path is not a valid XML file.</exception>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.BrowseForFoldersButton_Click">
            <summary>
            Handles the click event for a button to browse and select multiple folders. Selected folders are added to a
            collection and displayed in the UI.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.ClearSelectedDirectoriesButton_Click">
            <summary>
            Clears the text box and the list of selected directories when the button is clicked.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.ListViewFlyoutMenuCopy_Click_LocalFiles">
            <summary>
            Copies the selected rows to the clipboard in a formatted manner, with each property labeled for clarity.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.ApplyFiltersLocalFiles">
            <summary>
            Applies the date and search filters to the data grid
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.SelectAll_Click_LocalFiles">
            <summary>
            Selects all of the displayed rows on the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.DeSelectAll_Click_LocalFiles">
            <summary>
            De-selects all of the displayed rows on the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.ListViewFlyoutMenuDelete_Click_LocalFiles">
            <summary>
            Deletes the selected row from the results
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.ApplyFiltersEventLogs">
            <summary>
            Applies the date and search filters to the data grid
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.ListViewFlyoutMenuCopy_Click_EventLogs">
            <summary>
            Copies the selected rows to the clipboard in a formatted manner, with each property labeled for clarity.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.SelectAll_Click_EventLogs">
            <summary>
            Selects all of the displayed rows on the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.DeSelectAll_Click_EventLogs">
            <summary>
            De-selects all of the displayed rows on the ListView
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.ListViewFlyoutMenuDelete_Click_EventLogs">
            <summary>
            Deletes the selected row from the results
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.LightUp1">
            <summary>
            Local event handler that are assigned to the sidebar button.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.GoToStep2Button_Click">
            <summary>
            Step 1 validation
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.GoToStep3Button_Click">
            <summary>
            Step 2 validation
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.AllowNewAppsVM.ResetStepsButton_Click">
            <summary>
            Steps Reset
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.BuildNewCertificateVM.generatedCertThumbPrint">
            <summary>
            To save the generated certificate's thumb print
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.BuildNewCertificateVM.ProgressRingVisibility">
            <summary>
            Gets or sets the visibility state of the progress ring.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.BuildNewCertificateVM.CopyInfoBarToClipboardButtonVisibility">
            <summary>
            Gets or sets the visibility of the "Copy to Clipboard" button in the information bar.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.BuildNewCertificateVM.ElementsAreEnabled">
            <summary>
            Enables/Disables the UI elements during an ongoing operation.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.BuildNewCertificateVM.BuildCertificateButton_Click">
            <summary>
            Event handler for the main build button
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.BuildNewCertificateVM.CopyInfoBarToClipboardButton_Click">
            <summary>
            Copies the thumbprint of the generated certificate to the clipboard.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CodeIntegrityInfoVM.GetPolicyStatus(System.Nullable{System.Int32})">
            <summary>
            Local method to convert numbers to their actual string values
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.ViewModels.CodeIntegrityInfoVM.RetrieveCodeIntegrityInfo_Click">
            <summary>
            Event handler for the retrieve code integrity information button
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.ConfigurePolicyRuleOptionsVM.SelectedFilePath">
            <summary>
            To store the selected policy path
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreateDenyPolicyVM.CalculateColumnWidths">
            <summary>
            Calculates the maximum required width for each column (including header text)
            and assigns the value (with a little extra padding) to the corresponding property.
            It should always run once ALL the data have been added to the ObservableCollection that is the ItemsSource of the ListView
            And only after this method, the ItemsSource must be assigned to the ListView.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreateDenyPolicyVM.UpdateTotalFiles(System.Nullable{System.Boolean})">
            <summary>
            Updates the total logs count displayed on the UI
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreatePolicyVM.AllowMicrosoftCreate_Click">
            <summary>
            Event handler for creating/deploying AllowMicrosoft policy
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreatePolicyVM.OpenInPolicyEditor_AllowMicrosoft">
            <summary>
            Event handler to open the created Allow Microsoft policy in the Policy Editor
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreatePolicyVM.DefaultWindowsCreate_Click">
            <summary>
            Event handler for creating/deploying DefaultWindows policy
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreatePolicyVM.OpenInPolicyEditor_DefaultWindows">
            <summary>
            Event handler to open the created Default Windows policy in the Policy Editor
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreatePolicyVM.SignedAndReputableCreate_Click">
            <summary>
            Event handler for creating/deploying SignedAndReputable policy
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreatePolicyVM.OpenInPolicyEditor_SignedAndReputable">
            <summary>
            Event handler to open the created Signed and Reputable policy in the Policy Editor
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreatePolicyVM.RecommendedDriverBlockRulesCreate_Click">
            <summary>
            Event handler for creating/deploying Microsoft recommended driver block rules policy
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreatePolicyVM.RecommendedDriverBlockRulesScheduledAutoUpdate_Click">
            <summary>
            Event handler for Auto Update button
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreatePolicyVM.OpenInPolicyEditor_RecommendedDriverBlockRules">
            <summary>
            Event handler to open the created Microsoft Recommended driver block rules policy in the Policy Editor
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreatePolicyVM.RecommendedUserModeBlockRulesCreate_Click">
            <summary>
            Event handler for creating/deploying Microsoft recommended user-mode block rules policy
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreatePolicyVM.StrictKernelModePolicyCreateButton_Click">
            <summary>
            Event handler to prepare the system for Strict Kernel-mode policy
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreatePolicyVM.OpenInPolicyEditor_StrictKernelModePolicy">
            <summary>
            Event handler to open the created Strict Kernel-mode policy in the Policy Editor
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreateSupplementalPolicyVM.CalculateColumnWidths">
            <summary>
            Calculates the maximum required width for each column (including header text)
            and assigns the value (with a little extra padding) to the corresponding property.
            It should always run once ALL the data have been added to the ObservableCollection that is the ItemsSource of the ListView
            And only after this method, the ItemsSource must be assigned to the ListView.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.CreateSupplementalPolicyVM.FilesAndFoldersBrowseForBasePolicyIsEnabled">
            <summary>
            Controls enabled/disabled states of the elements that allow browsing for base policy file path
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.CreateSupplementalPolicyVM.FilesAndFoldersScanResults">
            <summary>
            Used to store the scan results and as the source for the results ListViews
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreateSupplementalPolicyVM.UpdateTotalFilesFilesAndFolders(System.Nullable{System.Boolean})">
            <summary>
            Updates the total logs count displayed on the UI
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.CreateSupplementalPolicyVM.CertificatesBrowseForBasePolicyIsEnabled">
            <summary>
            Controls enabled/disabled states of the elements that allow browsing for base policy file path
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.CreateSupplementalPolicyVM.ISGBrowseForBasePolicyIsEnabled">
            <summary>
            Controls enabled/disabled states of the elements that allow browsing for base policy file path
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.CreateSupplementalPolicyVM.StrictKernelModeBrowseForBasePolicyIsEnabled">
            <summary>
            Controls enabled/disabled states of the elements that allow browsing for base policy file path
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreateSupplementalPolicyVM.CalculateColumnWidthsStrictKernelMode">
            <summary>
            Calculates the maximum required width for each column (including header text)
            and assigns the value (with a little extra padding) to the corresponding property.
            It should always run once ALL the data have been added to the ObservableCollection that is the ItemsSource of the ListView
            And only after this method, the ItemsSource must be assigned to the ListView.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreateSupplementalPolicyVM.UpdateTotalFilesStrictKernelMode(System.Nullable{System.Boolean})">
            <summary>
            Updates the total logs count displayed on the UI
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.CreateSupplementalPolicyVM.PFNBrowseForBasePolicyIsEnabled">
            <summary>
            Controls enabled/disabled states of the elements that allow browsing for base policy file path
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.CreateSupplementalPolicyVM.CustomPatternBasedFileRuleBrowseForBasePolicyIsEnabled">
            <summary>
            Controls enabled/disabled states of the elements that allow browsing for base policy file path
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.CreateSupplementalPolicyVM.PolicyFileToMergeWith">
            <summary>
            The path to the policy file that user selected to add the new rules to.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.CreateSupplementalPolicyVM.PolicyFileToMergeWithPickerButtonIsEnabled">
            <summary>
            Whether the button that allows for picking a policy file to add the rules to is enabled or disabled.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.CreateSupplementalPolicyVM.BasePolicyElementsVisibility">
            <summary>
            Controls the visibility of all of the elements related to browsing for base policy file.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.CreateSupplementalPolicyVM.OperationModeComboBoxSelectedIndex">
            <summary>
            The mode of operation for the Supplemental creation page.
            Set to 0 (Creating New Policies) by default.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.CreateSupplementalPolicyVM.ClearPolicyFileToMergeWith">
            <summary>
            Clears the PolicyFileToMergeWith
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.DeploymentVM.GroupNamesCollection">
            <summary>
            Bound to the UI ListView and holds the Intune group Names/IDs
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.EventLogsPolicyCreationVM.CalculateColumnWidths">
            <summary>
            Calculates the maximum required width for each column (including header text)
            and assigns the value (with a little extra padding) to the corresponding property.
            It should always run once ALL the data have been added to the ObservableCollection that is the ItemsSource of the ListView
            And only after this method, the ItemsSource must be assigned to the ListView.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.GetCIHashesVM.PickFile_Click">
            <summary>
            Event handler for the browse button
            </summary>
        </member>
        <member name="T:AppControlManager.ViewModels.MainWindowVM">
            <summary>
            ViewModel for the MainWindow
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.SidebarBasePolicyPathTextBoxText">
            <summary>
            The text in the SidebarPolicyPathTextBox
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.MainWindowVM.UnelevatedPages">
            <summary>
            Pages that are allowed to run when running without Administrator privileges
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.MainWindowVM.breadCrumbMappingsV2">
            <summary>
            Every page in the application must be defined in this dictionary.
            It is used by the BreadCrumbBar.
            Sub-pages must use the same value as their main page in the dictionary.
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.MainWindowVM.NavigationPageToItemContentMap">
            <summary>
            Dictionary of all the main pages in the app, used for the main navigation.
            Keys are the Navigation Item tags (non-localized) and values are the page types.
            Sub-pages should only be added if they don't rely on/access the the instance of any page that might not be initialized.
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.MainWindowVM.NavigationPageToItemContentMapForSearch">
            <summary>
            Dictionary of all the main pages in the app, used for the search bar.
            Keys are page contents which are localized and values are page types.
            </summary>
        </member>
        <member name="T:AppControlManager.ViewModels.MainWindowVM.BackDropComboBoxItems">
            <summary>
            Values for back drop combo box in the settings page
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.BackDropOptions">
            <summary>
            ItemsSource of the ComboBox in the Settings page
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.MainWindowVM.#ctor">
            <summary>
            Constructor initializes the ViewModel and subscribes to various events, sets initial values of some variables.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.BackDropComboBoxSelectedIndex">
            <summary>
            Sets the initial value of the back drop. if it's null, Mica Alt will be used.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.SystemBackDropStyle">
            <summary>
            Defines a private property for the system backdrop style, initialized with a MicaBackdrop of kind BaseAlt.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.InfoBadgeOpacity">
            <summary>
            Backing field for InfoBadgeOpacity, which controls the visibility of the InfoBadge in the UI.
            https://learn.microsoft.com/windows/apps/design/controls/info-badge
            Opacity level of the InfoBadge icon in the UI. When set to 1, the badge is visible.
            When set to 0, the badge is hidden.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.OpenConfigDirectoryButtonState">
            <summary>
            The state of the OpenConfigDirectoryButton button which is on the Sidebar
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.SidebarPaneIsOpen">
            <summary>
            Whether the sidebar pane is open or closed
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.AutomaticAssignmentSidebarToggleSwitchToggledState">
            <summary>
            Indicates whether the automatic assignment sidebar toggle switch is in a toggled state. It stores a boolean value.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.BorderTranslation">
            <summary>
             Adjust the elevation of the border to achieve the shadow effect
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.MainNavigationIsPaneOpen">
            <summary>
            Whether the main NavigationView's pane is open or closed
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.TitleColumnWidth">
            <summary>
            The width of the TitleColumn in the main window's custom title bar
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.CreatePolicyIcon">
            <summary>
            Icon for the Create Policy navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.CreateSupplementalPolicyIcon">
            <summary>
            Icon for the Create Supplemental Policy navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.CreateDenyPolicyIcon">
            <summary>
            Icon for the Create Deny Policy navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.BuildNewCertificateIcon">
            <summary>
            Icon for the Build New Certificate navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.ViewFileCertificatesIcon">
            <summary>
            Icon for the View File Certificates navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.CreatePolicyFromEventLogsIcon">
            <summary>
            Icon for the Create Policy from Event Logs navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.CreatePolicyFromMDEAHIcon">
            <summary>
            Icon for the MDE Advanced Hunting navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.AllowNewAppsIcon">
            <summary>
            Icon for the Allow New Apps navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.PolicyEditorIcon">
            <summary>
            Icon for the Policy Editor navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.SimulationIcon">
            <summary>
            Icon for the Simulation navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.SystemInformationIcon">
            <summary>
            Icon for the System Information navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.GetCodeIntegrityHashesIcon">
            <summary>
            Icon for the Get Code Integrity Hashes navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.GetSecurePolicySettingsIcon">
            <summary>
            Icon for the Get Secure Policy Settings navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.ConfigurePolicyRuleOptionsIcon">
            <summary>
            Icon for the Configure Policy Rule Options navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.MergePoliciesIcon">
            <summary>
            Icon for the Merge Policies navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.DeploymentIcon">
            <summary>
            Icon for the Deployment navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.ValidatePoliciesIcon">
            <summary>
            Icon for the Validate Policies navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.GitHubDocsIcon">
            <summary>
            Icon for the GitHub Documentation navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.MSFTDocsIcon">
            <summary>
            Icon for the Microsoft Documentation navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.LogsIcon">
            <summary>
            Icon for the Logs navigation item.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.MainWindowVM.UpdateIcon">
            <summary>
            Icon for the Update navigation item in the footer.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.MainWindowVM.SidebarButton_Click">
            <summary>
            Event handler for the main Sidebar button click
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.MainWindowVM.OnUpdateAvailable(System.Object,AppControlManager.Others.UpdateAvailableEventArgs)">
            <summary>
            Event handler triggered when the UpdateAvailable event is raised, indicating an update is available.
            Updates InfoBadgeOpacity to show the InfoBadge in the UI if an update is available.
            </summary>
            <param name="sender">Sender of the event, in this case, AppUpdate class.</param>
            <param name="e">Boolean indicating whether an update is available.</param>
        </member>
        <member name="M:AppControlManager.ViewModels.MainWindowVM.OpenConfigDirectoryButton_Click">
            <summary>
            Event handler for the Sidebar button to open the user config directory
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.MainWindowVM.AutomaticAssignmentSidebarToggleSwitch_Toggled">
            <summary>
            Event handler for the sidebar toggle button for auto assignment
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.MainWindowVM.AutomaticAssignmentSidebarSettingsCard_Click">
            <summary>
            Event handler for sidebar settings cards for auto assignment
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.MainWindowVM.AssignToSidebar(System.String)">
            <summary>
            Method used by other methods that create base policies so they can assign the path to the sidebar after creation
            If the toggle switch for automatic assignment is on
            </summary>
            <param name="unsignedPolicyPath"></param>
        </member>
        <member name="M:AppControlManager.ViewModels.MainWindowVM.HamburgerMenuButton_Click">
            <summary>
            Event handler for the hamburger/main menu button click
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.MainWindowVM.OnIconsStylesChanged(System.String)">
            <summary>
            Event handler for the global Icons Style change event
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:AppControlManager.ViewModels.MainWindowVM.UpdateSystemBackDrop">
            <summary>
            Event handler for the Background ComboBox selection change event in the Settings page.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.MDEAHPolicyCreationVM.CalculateColumnWidths">
            <summary>
            Calculates the maximum required width for each column (including header text)
            and assigns the value (with a little extra padding) to the corresponding property.
            It should always run once ALL the data have been added to the ObservableCollection that is the ItemsSource of the ListView
            And only after this method, the ItemsSource must be assigned to the ListView.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.MergePoliciesVM.MergeButton_Click">
            <summary>
            Event handler for the main Merge button
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.MergePoliciesVM.MainPolicyBrowseButton_Click">
            <summary>
            Handles the click event for the Main Policy Browse button. Opens a file picker dialog to select an XML file and
            stores the path.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.MergePoliciesVM.OtherPoliciesBrowseButton_Click">
            <summary>
            Handles the click event for the Other Policies browse button. It opens a file picker dialog to select multiple XML
            files and adds unique selections to a display string.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.MergePoliciesVM.MainPolicy_Flyout_ClearButton">
            <summary>
            Clears the text box for the main selected policy
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.MergePoliciesVM.OtherPolicies_Flyout_ClearButton">
            <summary>
            Clears the textbox for other selected policies
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.CalculateFileBasedListViewColumnWidths">
            <summary>
            For File Based rules
            Calculates the maximum required width for each column (including header text)
            and assigns the value (with a little extra padding) to the corresponding property.
            It should always run once ALL the data have been added to the ObservableCollection that is the ItemsSource of the ListView
            And only after this method, the ItemsSource must be assigned to the ListView.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.CalculateSignatureBasedListViewColumnWidths">
            <summary>
            For Signature Based rules
            Calculates the maximum required width for each column (including header text)
            and assigns the value (with a little extra padding) to the corresponding property.
            It should always run once ALL the data have been added to the ObservableCollection that is the ItemsSource of the ListView
            And only after this method, the ItemsSource must be assigned to the ListView.
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.PolicyEditorVM.fileType">
            <summary>
            The file type based on extension.
            0 -> CIP
            1 -> XML
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.ProcessData">
            <summary>
            Extracts the data from the user selected policy XML file and puts them in the UI elements such as the ListViews
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.RemoveFileRuleFromCollection(AppControlManager.PolicyEditor.FileBasedRulesForListView)">
            <summary>
            To remove an item from the File rules based ListView
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.RemoveSignatureRuleFromCollection(AppControlManager.PolicyEditor.SignatureBasedRulesForListView)">
            <summary>
            To remove an item from the Signature based rules ListView
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.BrowseForPolicyButton_Click">
            <summary>
            Event handler for browse for policy button
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.ClearButton_Click">
            <summary>
            Event handler for the Clear selected policy button
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.UpdateFileBasedCollectionsCount">
            <summary>
            To set the count of File-based rules ListView collection in the TabView's header in real time
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.UpdateSignatureBasedCollectionsCount">
            <summary>
            To set the count of Signature-based rules ListView collection in the TabView's header in real time
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.ChangeTextSelectionsState">
            <summary>
            Event handler for the UI toggle button to enable/disable text selection in the ListViews
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.SaveChanges">
            <summary>
            Saves the changes made to the policy file.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.ClearData">
            <summary>
            Event handler for the button that clears the data
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.SearchBox_TextChanged">
            <summary>
            Performs search in both collections of the ListView.
            Implementing it in the ViewModel via x:Bind would not work properly.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.OpenInPolicyEditor(System.String)">
            <summary>
            Used by various methods internally to open a created/modified policy in the Policy Editor
            </summary>
            <param name="policyFile">the path to the policy file to open in the Policy Editor</param>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.FileBasedRulesListView_DeleteItems">
            <summary>
            Event handler for deleting selected items from the FileBasedRulesListView's Items Source
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.PolicyEditorVM.SignatureBasedRulesListView_DeleteItems">
            <summary>
            Event handler for deleting selected items from the SignatureBasedRulesListView's Items Source
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.SettingsVM.BrowseForCISchemaPath">
            <summary>
            Opens a file picker for Code Integrity Schema path.
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.SettingsVM.VersionTextBlockText">
            <summary>
            Set the version in the settings card to the current app version
            </summary>
        </member>
        <member name="F:AppControlManager.ViewModels.SettingsVM.CopyRightSettingsExpanderDescription">
            <summary>
            Set the year for the copyright section
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.SettingsVM.FetchLatestCertificateCNsPrivate">
            <summary>
            Get all of the common names of the certificates in the user/my certificate stores
            And add them to the observable collection that is the source of the AutoSuggestBox
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.SettingsVM.FetchLatestCertificateCNs">
            <summary>
            For the Refresh button that retrieves the latest certificate CNs
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.SettingsVM.CertificateCommonNameAutoSuggestBox_GotFocus">
            <summary>
            Handles the GotFocus event for the Certificate Common Name auto-suggest box. It opens the suggestion list when the
            box gains focus. Without this, the suggestion list would not open when the box is clicked, user would have to type something first.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.SettingsVM.CertificateCNAutoSuggestBox_TextChanged">
            <summary>
            Event handler for AutoSuggestBox
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.SimulationVM.CalculateColumnWidths">
            <summary>
            Calculates the maximum required width for each column (including header text)
            and assigns the value (with a little extra padding) to the corresponding property.
            It should always run once ALL the data have been added to the ObservableCollection that is the ItemsSource of the ListView
            And only after this method, the ItemsSource must be assigned to the ListView.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.SimulationVM.SearchBox_TextChanged">
            <summary>
            Event handler for the SearchBox text change
            </summary>
        </member>
        <member name="T:AppControlManager.ViewModels.SimulationVM.SimulationSortColumn">
            <summary>
            Enum listing all available sort columns.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.SimulationVM.Sort(AppControlManager.ViewModels.SimulationVM.SimulationSortColumn)">
            <summary>
            Common sort method that toggles sort order on consecutive clicks and resets order on column change.
            </summary>
            <param name="newSortColumn">The column to sort by.</param>
        </member>
        <member name="M:AppControlManager.ViewModels.SimulationVM.ExportToCsv">
            <summary>
            Exports the list of SimulationOutput objects to a CSV file.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.SimulationVM.WrapValue(System.String)">
            <summary>
            Wraps a value in double quotes, replacing nulls with empty strings and escaping inner quotes.
            </summary>
            <param name="value">The value to wrap.</param>
            <returns>A string with the value wrapped in double quotes.</returns>
        </member>
        <member name="M:AppControlManager.ViewModels.UpdateVM.AppPFNRegex">
            <remarks>
            Pattern:<br/>
            <code>__sadt7br7jpt02</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "__".<br/>
            ○ Match a character in the set [Ss].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Dd].<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match '7'.<br/>
            ○ Match a character in the set [Bb].<br/>
            ○ Match a character in the set [Rr].<br/>
            ○ Match '7'.<br/>
            ○ Match a character in the set [Jj].<br/>
            ○ Match a character in the set [Pp].<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match the string "02".<br/>
            </code>
            </remarks>
        </member>
        <member name="F:AppControlManager.ViewModels.UpdateVM.CertCommonName">
            <summary>
            Common name of the on-device generated certificate used to sign the AppControl Manager MSIXBundle package
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.UpdateVM.CheckForUpdateButtonIsEnabled">
            <summary>
            To determine whether to use the user-supplied package or continue with downloading the package from GitHub.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.UpdateVM.UpdateButtonContent">
            <summary>
            Content of the main update button
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.UpdateVM.InstallLocalPackageConfirmation">
            <summary>
            To determine whether to use the user-supplied package or continue with downloading the package from GitHub.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.UpdateVM.LocalPackageFilePath">
            <summary>
            The custom package path that the user supplied.
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.UpdateVM.InstallLocalPackageConfirmationIsEnabled">
            <summary>
            Whether the section that provides confirmation ability is enabled or disabled
            </summary>
        </member>
        <member name="P:AppControlManager.ViewModels.UpdateVM.UseHardenedInstallationProcess">
            <summary>
            Whether the installation process must use hardened procedures.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.UpdateVM.CheckForUpdate_Click">
            <summary>
            Navigate to the extra sub-page
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.UpdateVM.CheckForUpdateButton_Click">
            <summary>
            Event handler for check for update button
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.UpdateVM.BrowseForCustomMSIXPathButton_Click">
            <summary>
            Opens a file picker to select a MSIX/MSIXBundle package file.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.UpdateVM.LaunchRating">
            <summary>
            Launches the Microsoft Store mini page of the app where user can review and rate.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ValidatePolicyVM.ValidateXML">
            <summary>
            Validates an App Control XML policy file by allowing the user to select a file and checking its validity.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewCurrentPoliciesVM.CalculateColumnWidths">
            <summary>
            Calculates the maximum required width for each column (including header text)
            and assigns the value (with a little extra padding) to the corresponding property.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewCurrentPoliciesVM.RetrievePolicies">
            <summary>
            Retrieve the policies from the system
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewCurrentPoliciesVM.SwapPolicyComboBox_SelectionChanged">
            <summary>
            Event handler for when the Swap Policy ComboBox's selection changes
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewCurrentPoliciesVM.RemovePolicy_Click">
            <summary>
            Event handler for the RemovePolicyButton click
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewCurrentPoliciesVM.VerifyRemovalEligibility(System.String)">
            <summary>
            If returns true, the signed policy can be removed
            </summary>
            <param name="policyID"></param>
            <returns></returns>
        </member>
        <member name="T:AppControlManager.ViewModels.ViewCurrentPoliciesVM.SortColumnEnum">
            <summary>
            Defines the available columns for sorting.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewCurrentPoliciesVM.Sort(AppControlManager.ViewModels.ViewCurrentPoliciesVM.SortColumnEnum)">
            <summary>
            This method is invoked by each header button when clicked.
            </summary>
            <param name="newSortColumn">The column that needs to be sorted.</param>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewCurrentPoliciesVM.SearchBox_TextChanged">
            <summary>
            Event handler for the search box text change
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewCurrentPoliciesVM.DeployedPolicies_SelectionChanged">
            <summary>
            Event handler for when a policy is selected from the ListView. It will contain the selected policy.
            When the Refresh button is pressed, this event is fired again, but due to clearing the existing data in the refresh event handler, ListView's SelectedItem property will be null,
            so we detect it here and return from the method without assigning null to the selectedPolicy class instance.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewCurrentPoliciesVM.ConvertRowToText(AppControlManager.Others.CiPolicyInfo)">
            <summary>
            Converts the properties of a CiPolicyInfo row into a labeled, formatted string for copying to clipboard.
            </summary>
            <param name="row">The selected CiPolicyInfo row from the ListView.</param>
            <returns>A formatted string of the row's properties with labels.</returns>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewCurrentPoliciesVM.ListViewFlyoutMenuCopy_Click">
            <summary>
            Copies the selected rows to the clipboard in a formatted manner, with each property labeled for clarity.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewCurrentPoliciesVM.CopyToClipboard(System.Func{AppControlManager.Others.CiPolicyInfo,System.String})">
            <summary>
            Helper method to copy a specified property to clipboard.
            </summary>
            <param name="getProperty">Function that retrieves the desired property value as a string</param>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewFileCertificatesVM.CalculateColumnWidths">
            <summary>
            Calculates the maximum required width for each column (including header text)
            and assigns the value (with a little extra padding) to the corresponding property.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewFileCertificatesVM.SearchBox_TextChanged">
            <summary>
            Event handler for the search box
            </summary>
        </member>
        <member name="T:AppControlManager.ViewModels.ViewFileCertificatesVM.CertificateSortColumn">
            <summary>
            Enum representing the sort columns for certificate items.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewFileCertificatesVM.Sort(AppControlManager.ViewModels.ViewFileCertificatesVM.CertificateSortColumn)">
            <summary>
            Common sort method that determines sort column and toggles direction.
            </summary>
            <param name="newSortColumn">The column to sort by.</param>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewFileCertificatesVM.ConvertRowToText(AppControlManager.Others.FileCertificateInfoCol)">
            <summary>
            Converts the properties of a FileCertificateInfoCol row into a labeled, formatted string for copying to clipboard.
            </summary>
            <param name="row">The selected FileCertificateInfoCol row from the ListView.</param>
            <returns>A formatted string of the row's properties with labels.</returns>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewFileCertificatesVM.FetchForCIP(System.String)">
            <summary>
            Get the certificates of the .CIP files
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewFileCertificatesVM.FetchForCER(System.String)">
            <summary>
            Fetch for the .cer files
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:AppControlManager.ViewModels.ViewModelBase">
            <summary>
            All of the ViewModel classes must inherit from this class
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewModelBase.SP``1(``0@,``0,System.String)">
            <summary>
            Sets the field to <paramref name="newValue"/> if it differs from its current contents,
            raises PropertyChanged, and returns true if a change occurred.
            This also prevents infinite loops where a property raises OnPropertyChanged which could trigger an update in the UI,
            and the UI might call set again, leading to an infinite loop.
            </summary>
            <param name="field">The existing value.</param>
            <param name="newValue">The new value.</param>
            <param name="propertyName"></param>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewModelBase.SetProperty``1(``0,``0,System.Action{``0},System.String)">
            <summary>
            Sets the property and raises the PropertyChanged event if the value has changed.
            This also prevents infinite loops where a property raises OnPropertyChanged which could trigger an update in the UI, and the UI might call set again, leading to an infinite loop.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <param name="setter"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="F:AppControlManager.ViewModels.ViewOnlinePoliciesVM._ViewModelMSGraph">
            <summary>
            To store the view model of the MS Graph that is retrieved from the constructor
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewOnlinePoliciesVM.#ctor(AppControlManager.MicrosoftGraph.ViewModelForMSGraph)">
            <summary>
            Automatically provided via constructor injection by the DI container during build.
            </summary>
            <param name="GraphVM">The view model instance used to manage data and state related to Microsoft Graph.</param>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewOnlinePoliciesVM.CalculateColumnWidths">
            <summary>
            Calculates the maximum required width for each column (including header text)
            and assigns the value (with a little extra padding) to the corresponding property.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewOnlinePoliciesVM.GetOnlinePolicies">
            <summary>
            Retrieves the online Intune policies
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewOnlinePoliciesVM.ManageButtonsStates(System.Boolean)">
            <summary>
            Enable or Disable button states
            </summary>
            <param name="on">True will enable and False will disable UI buttons when an operation is ongoing</param>
        </member>
        <member name="T:AppControlManager.ViewModels.ViewOnlinePoliciesVM.SortColumnEnum">
            <summary>
            Enum representing the sort columns for this view.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewOnlinePoliciesVM.Sort(AppControlManager.ViewModels.ViewOnlinePoliciesVM.SortColumnEnum)">
            <summary>
            Common sort method using a column enum.
            </summary>
            <param name="newSortColumn">The column to sort by.</param>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewOnlinePoliciesVM.SearchBox_TextChanged">
            <summary>
            Event handler for the search box text change
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewOnlinePoliciesVM.RemovePolicy_Click">
            <summary>
            Event handler for the RemovePolicyButton click
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewOnlinePoliciesVM.ConvertRowToText(AppControlManager.Others.CiPolicyInfo)">
            <summary>
            Converts the properties of a CiPolicyInfo row into a labeled, formatted string for copying to clipboard.
            </summary>
            <param name="row">The selected CiPolicyInfo row from the ListView.</param>
            <returns>A formatted string of the row's properties with labels.</returns>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewOnlinePoliciesVM.ListViewFlyoutMenuCopy_Click">
            <summary>
            Copies the selected rows to the clipboard in a formatted manner, with each property labeled for clarity.
            </summary>
        </member>
        <member name="M:AppControlManager.ViewModels.ViewOnlinePoliciesVM.CopyToClipboard(System.Func{AppControlManager.Others.CiPolicyInfo,System.String})">
            <summary>
            Helper method to copy a specified property to clipboard without reflection
            </summary>
            <param name="getProperty">Function that retrieves the desired property value as a string</param>
        </member>
        <member name="T:AppControlManager.WindowComponents.Crumb">
            <summary>
            https://learn.microsoft.com/windows/apps/design/controls/breadcrumbbar#itemssource
            Represents an item in the BreadCrumBar's ItemsSource collection
            </summary>
            <param name="label"></param>
            <param name="page"></param>
        </member>
        <member name="M:AppControlManager.WindowComponents.Crumb.#ctor(System.String,System.Type)">
            <summary>
            https://learn.microsoft.com/windows/apps/design/controls/breadcrumbbar#itemssource
            Represents an item in the BreadCrumBar's ItemsSource collection
            </summary>
            <param name="label"></param>
            <param name="page"></param>
        </member>
        <member name="T:AppControlManager.WindowComponents.IAnimatedIconsManager">
            <summary>
            This interface tags certain pages that interact with the Sidebar.
            </summary>
        </member>
        <member name="M:AppControlManager.WindowComponents.NavigationService.Initialize(Microsoft.UI.Xaml.Controls.Frame,Microsoft.UI.Xaml.Controls.NavigationView)">
            <summary>
            Called once (from MainWindow) to supply the necessary elements.
            </summary>
        </member>
        <member name="M:AppControlManager.WindowComponents.NavigationService.AffectPagesAnimatedIconsVisibilitiesEx(System.Boolean)">
            <summary>
            Event handler to change visibility of the AnimatedIcons on the currently visible page in the frame
            It is called by the Sidebar's Browse/Clear buttons' event handlers
            </summary>
            <param name="on"></param>
        </member>
        <member name="M:AppControlManager.WindowComponents.NavigationService.AffectPagesAnimatedIconsVisibilities(Microsoft.UI.Xaml.Controls.Frame)">
            <summary>
            This method is called via the methods responsible for Navigations.
            </summary>
        </member>
        <member name="M:AppControlManager.WindowComponents.NavigationService.Navigate(System.Type,System.String)">
            <summary>
            Main navigation method that is used by the search bar, direct clicks on the main navigation items
            And by other methods throughout the app in order to navigate to sub-pages
            </summary>
            <param name="navPageType"></param>
            <param name="navItemTag"></param>
        </member>
        <member name="M:AppControlManager.WindowComponents.NavigationService.SidebarBasePolicyBrowseButton_Click">
            <summary>
            Event handler for the sidebar base policy browse button
            </summary>
        </member>
        <member name="M:AppControlManager.WindowComponents.NavigationService.SidebarBasePolicyClearButton_Click">
            <summary>
            Event handler for the clear button in the sidebar for unsigned policy path
            </summary>
        </member>
        <member name="T:AppControlManager.WindowComponents.PageTitleMap">
            <summary>
            Used for the BreadCrumBar's data to define valid navigational paths in the app
            </summary>
        </member>
        <member name="M:AppControlManager.XMLOps.CheckForAllowAll.Check(System.String)">
            <summary>
            Takes a XML file path and checks whether it has an allow all rule
            </summary>
            <param name="xmlFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:AppControlManager.XMLOps.CheckForAllowAll.MyRegex">
            <remarks>
            Pattern:<br/>
            <code>&lt;Allow ID="ID_ALLOW_.*" FriendlyName=".*" FileName="\\*".*/&gt;</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "&lt;Allow ID=\"ID_ALLOW_".<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match the string "\" FriendlyName=\"".<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match the string "\" FileName=\"*\"".<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match the string "/&gt;".<br/>
            </code>
            </remarks>
        </member>
        <member name="F:AppControlManager.XMLOps.CloseEmptyXmlNodesSemantic.baseNodeNames">
            <summary>
            Closes all empty XML nodes and removes empty nodes that are neither base nodes nor 'ProductSigners' nodes
            According to the CI Schema
            </summary>
        </member>
        <member name="M:AppControlManager.XMLOps.CloseEmptyXmlNodesSemantic.CloseEmptyNodesRecursively(System.Xml.XmlElement,System.String[])">
            <summary>
            Helper method to recursively close empty XML nodes
            </summary>
            <param name="xmlNode"></param>
            <param name="baseNodeNames"></param>
        </member>
        <member name="M:AppControlManager.XMLOps.PolicyEditor.EditGuids(System.String,System.String)">
            <summary>
            Swaps the PolicyID and BasePolicyID GUIDs in an App Control for Business policy XML file for Base policies.
            </summary>
            <param name="policyIdInput"></param>
            <param name="policyFilePathInput"></param>
        </member>
        <member name="M:AppControlManager.XMLOps.Master.Initiate(AppControlManager.Others.FileBasedInfoPackage,System.String,AppControlManager.SiPolicyIntel.Authorization,System.String)">
            <summary>
            Uses the scan data to generate an App Control policy and makes sure the data are unique
            </summary>
            <param name="incomingData">Contains information about file publisher signers, publisher signers, complete hashes, file paths, and PFN rules.</param>
            <param name="xmlFilePath">Specifies the path to the XML file where the merged policy rules will be saved.</param>
            <param name="authorization">Determines whether to allow or deny the specified rules during the merging process.</param>
            <param name="stagingArea">Indicates the location where temporary files can be stored during the merging operation.</param>
        </member>
        <member name="M:AppControlManager.XMLOps.NewCertificateSignerRules.CreateAllow(System.String,System.Collections.Generic.List{AppControlManager.Others.CertificateSignerCreator})">
            <summary>
            Creates new Signer rules for Certificates, in the XML file
            The level is Pca/Root/Leaf certificate, meaning there is no certificate publisher mentioned
            Only Certificate TBS and its name is used.
            </summary>
            <param name="xmlFilePath"></param>
            <param name="signerData"></param>
        </member>
        <member name="M:AppControlManager.XMLOps.NewFilePathRules.CreateAllow(System.String,System.Collections.Generic.List{AppControlManager.Others.FilePathCreator})">
            <summary>
            Create a new Allow FilePath rule (including Wildcards) in the XML file
            Rules will only be created for User-Mode files as Kernel-mode drivers do not support FilePath rules
            </summary>
            <param name="xmlFilePath"></param>
            <param name="data"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.XMLOps.NewFilePathRules.CreateDeny(System.String,System.Collections.Generic.List{AppControlManager.Others.FilePathCreator})">
            <summary>
            Creates a new Deny FilePath rule (including Wildcards) in the XML file
            </summary>
            <param name="xmlFilePath"></param>
            <param name="data"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.XMLOps.NewFilePublisherLevelRules.CreateAllow(System.String,System.Collections.Generic.List{AppControlManager.Others.FilePublisherSignerCreator})">
            <summary>
            Creates new Allow FilePublisher level rules in an XML file
            Each rules includes the FileAttribs, Signers, AllowedSigners, and CiSigners(depending on kernel/user mode)
            </summary>
            <param name="xmlFilePath"></param>
            <param name="filePublisherSigners"> The FilePublisherSigners to be used for creating the rules, they are the output of the BuildSignerAndHashObjects Method </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.XMLOps.NewFilePublisherLevelRules.CreateDeny(System.String,System.Collections.Generic.List{AppControlManager.Others.FilePublisherSignerCreator})">
            <summary>
            Creates new Deny FilePublisher level rules in an XML file
            Each rules includes the FileAttribs, Signers, DeniedSigners, and CiSigners(depending on kernel/user mode)
            </summary>
            <param name="xmlFilePath"></param>
            <param name="filePublisherSigners"> The FilePublisherSigners to be used for creating the rules, they are the output of the BuildSignerAndHashObjects Method </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.XMLOps.NewHashLevelRules.CreateAllow(System.String,System.Collections.Generic.List{AppControlManager.Others.HashCreator})">
            <summary>
            Creates new Allow Hash level rules in an XML file
            For each hash data, it creates 2 Hash rules, one for Authenticode SHA2-256 and one for SHA1 hash
            It also adds the FileRulesRef for each hash to the ProductSigners node of the correct signing scenario(Kernel/User mode)
            </summary>
            <param name="xmlFilePath"></param>
            <param name="hashes"> The Hashes to be used for creating the rules, they are the output of the BuildSignerAndHashObjects Method </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.XMLOps.NewHashLevelRules.CreateDeny(System.String,System.Collections.Generic.List{AppControlManager.Others.HashCreator})">
            <summary>
            Creates new Deny Hash level rules in an XML file
            For each hash data, it creates 2 Hash rules, one for Authenticode SHA2-256 and one for SHA1 hash
            It also adds the FileRulesRef for each hash to the ProductSigners node of the correct signing scenario(Kernel/User mode)
            </summary>
            <param name="xmlFilePath"></param>
            <param name="hashes"> The Hashes to be used for creating the rules, they are the output of the BuildSignerAndHashObjects Method </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.XMLOps.NewPFNLevelRules.CreateAllow(System.String,System.Collections.Generic.List{AppControlManager.Others.PFNRuleCreator})">
            <summary>
            Creates PFN rules and adds them to an App Control policy XML file
            </summary>
            <param name="xmlFilePath"></param>
            <param name="PFNData"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.XMLOps.NewPFNLevelRules.CreateDeny(System.String,System.Collections.Generic.List{AppControlManager.Others.PFNRuleCreator})">
            <summary>
            Creates PFN rules and adds them to an App Control policy XML file
            </summary>
            <param name="xmlFilePath"></param>
            <param name="PFNData"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.XMLOps.NewPublisherLevelRules.CreateAllow(System.String,System.Collections.Generic.List{AppControlManager.Others.PublisherSignerCreator})">
            <summary>
            Creates new Allow Publisher level rules in an XML file
            Each rules includes the Signers, AllowedSigners, and CiSigners(depending on kernel/user mode)
            </summary>
            <param name="xmlFilePath">The path to the XML file to be modified</param>
            <param name="publisherSigners">The PublisherSigners to be used for creating the rules, they are the output of the BuildSignerAndHashObjects Method</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.XMLOps.NewPublisherLevelRules.CreateDeny(System.String,System.Collections.Generic.List{AppControlManager.Others.PublisherSignerCreator})">
            <summary>
            Creates new Deny Publisher level rules in an XML file
            Each rules includes the Signers, DeniedSigners, and CiSigners(depending on kernel/user mode)
            </summary>
            <param name="xmlFilePath">The path to the XML file to be modified</param>
            <param name="publisherSigners">The PublisherSigners to be used for creating the rules, they are the output of the BuildSignerAndHashObjects Method</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.XMLOps.SetCiPolicyInfo.Set(System.String,System.Nullable{System.Boolean},System.String,System.String,System.String)">
            <summary>
            Configures an XML Code Integrity policy by modifying its details.
            When it comes to PolicyID, the only time it is modified is through random GUID generation.
            The BasePolicyID, however, can be modified by supplying an XML file, providing the GUID directory, or through GUID random generation.
            If the policy doesn't have a "Settings" node with a "Setting" node inside it for PolicyName, it will be created. This is regardless of whether the policyName parameter was provided or not.
            </summary>
            <param name="filePath">Path to the XML policy file to modify.</param>
            <param name="resetPolicyID">
            Will assign a random GUID for the PolicyID and BasePolicyID of the selected XML file.
            If this parameter is specified along with basePolicyID, first both PolicyID and BasePolicyID will reset and then basePolicyID will be applied to the policy.
            </param>
            <param name="policyName">The policy name to set for the selected XML policy file.</param>
            <param name="basePolicyID">
            The BasePolicyID to set for the selected XML policy file.
            It doesn't need to have curly brackets; they will be added automatically by the method.
            This is the same as the -SupplementsBasePolicyID parameter of the Set-CIPolicyIdInfo cmdlet.
            It will change the type of the policy to a Supplemental Policy type.
            </param>
            <param name="basePolicyToSupplementPath">
            The path to an XML file. The PolicyID of the file will be extracted and applied to the BasePolicyID of the XML file selected in the filePath parameter.
            </param>
            <returns>
            Returns the final policy ID of the XML policy. It will have curly brackets.
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.XMLOps.SetCiPolicyInfo.Set(System.String,System.Version,System.String)">
            <summary>
            An overload of the Set method, responsible for setting the version number, policyID and BasePolicyID in the policy
            </summary>
            <param name="filePath"></param>
            <param name="version"></param>
            <param name="ID">This will be used as the BasePolicyID and PolicyID of the policy</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AppControlManager.XMLOps.SetCiPolicyInfo.ValidatePolicyID(System.String)">
            <summary>
            A method that accepts a string and tests if it is valid to be a Policy ID or Base Policy ID
            </summary>
            <param name="id">the string to verify. Having Curly brackets isn't necessary as the method will add them automatically.</param>
            <returns>Returns a tuple with 2 items.
            First item is a bool indicating the string is valid.
            The 2nd item includes the string that can be used in the policy.</returns>
        </member>
        <member name="M:AppControlManager.XMLOps.SignerAndHashBuilder.BuildSignerAndHashObjects(System.Collections.Generic.List{AppControlManager.IntelGathering.FileIdentity},System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String},AppControlManager.IntelGathering.ScanLevels,System.Boolean,System.Collections.Generic.List{System.String})">
             <summary>
             Creates Signer and Hash objects from the input data
            
             Types created for Signed Data: FilePublisher, Publisher
             Types created for Unsigned Data: Hash
            
             Behavior when the level is set to "Auto" or "FilePublisher":
             FilePublisher Signers are created for files that have the necessary details for a FilePublisher rule
             Publisher Signers are created for files that don't have the necessary details for a FilePublisher rule
             Hashes are created for the unsigned data
            
             Behavior when the level is set to "Publisher":
             PublisherSigners are created for all of the Signed files
             Hashes are created for all of the unsigned files
            
             Behavior when the level is set to "Hash":
             Hashes are created for all of the files, whether they are signed or unsigned
            
             The output is a single object with nested properties for the Signed data and Hashes
            
             Both Publisher and FilePublisher signers first check if the file has both Issuer and Publisher TBS hashes, if they are present then both of them will be used to create the Signer.
             If the file is missing the Issuer TBS hash, then the Publisher certificate will be used for both Publisher and Issuer details (TBS and Name)
             This will essentially create the Signers based on LeafCertificate Level.
            
             The New-NewFilePublisherLevelRules class and NewPublisherLevelRules class both are able to create rules based on different signer App Control levels.
            
             The other way around, where Publisher TBS hash is missing but Issuer TBS is present, would create a PCACertificate level Signer, but that is not implemented yet.
             Its use case is not clear yet and there haven't been any files with that condition yet. <summary>
             </summary>
             <param name="data">The Data to be processed. These are the logs selected by the user and contain both signed and unsigned data.</param>
             <param name="level">Auto, FilePublisher, Publisher, Hash</param>
             <param name="publisherToHash">It will pass any publisher rules to the hash array. E.g when sandboxing-like behavior using Macros and AppIDs are used.</param>
             <param name="folderPaths"></param>
             <param name="customFileRulePatterns"></param>
             <param name="packageFamilyNames"></param>
             </summary>
             <returns></returns>
        </member>
        <member name="M:AppControlManager.XMLOps.UpdateHvciOptions.Update(System.String)">
            <summary>
            Sets the HVCI option to Strict or (2) in a policy XML file
            </summary>
            <param name="filePath"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:AppControlManager.Program">
            <summary>
            Program class
            </summary>
        </member>
        <member name="T:AppControlManager.AppControl_Manager_XamlTypeInfo.XamlMetaDataProvider">
            <summary>
            Main class for providing metadata for the app or library
            </summary>
        </member>
        <member name="M:AppControlManager.AppControl_Manager_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:AppControlManager.AppControl_Manager_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:AppControlManager.AppControl_Manager_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "OLE32.dll".
            </content>
            <content>
            Contains extern methods from "SHELL32.dll".
            </content>
            <content>
            Contains extern methods from "KERNEL32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.CoCreateInstance``1(System.Guid@,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.CLSCTX,``0*@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.CoCreateInstance(System.Guid*,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.CLSCTX,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.CoCreateInstance(System.Guid@,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.CLSCTX,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.CoCreateInstance(System.Guid*,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.CLSCTX,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.CoCreateInstance(System.Guid*,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.CLSCTX,System.Guid*,System.Void**)">
            <summary>Creates a single uninitialized object of the class associated with a specified CLSID.</summary>
            <param name="rclsid">The CLSID associated with the data and code that will be used to create the object.</param>
            <param name="pUnkOuter">If <b>NULL</b>, indicates that the object is not being created as part of an aggregate. If non-<b>NULL</b>, pointer to the aggregate object's <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a> interface (the controlling <b>IUnknown</b>).</param>
            <param name="dwClsContext">Context in which the code that manages the newly created object will run. The values are taken from the enumeration <a href="https://docs.microsoft.com/windows/desktop/api/wtypesbase/ne-wtypesbase-clsctx">CLSCTX</a>.</param>
            <param name="riid">A reference to the identifier of the interface to be used to communicate with the object.</param>
            <param name="ppv">Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppv</i> contains the requested interface pointer. Upon failure, *<i>ppv</i> contains <b>NULL</b>.</param>
            <returns>
            <para>This function can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The <b>CoCreateInstance</b> function provides a convenient shortcut by connecting to the class object associated with the specified CLSID, creating a default-initialized instance, and releasing the class object. As such, it encapsulates the following functionality:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/combaseapi/nf-combaseapi-cocreateinstance#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SHCreateItemFromParsingName(System.String,Windows.Win32.System.Com.IBindCtx*,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.SHCreateItemFromParsingName(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.IBindCtx*,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.SHCreateItemFromParsingName(Windows.Win32.Foundation.PCWSTR,Windows.Win32.System.Com.IBindCtx*,System.Guid*,System.Void**)">
            <summary>Creates and initializes a Shell item object from a parsing name.</summary>
            <param name="pszPath">
            <para>Type: <b>PCWSTR</b> A pointer to a display name.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-shcreateitemfromparsingname#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pbc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a>*</b> Optional. A pointer to a bind context used to pass parameters as inputs and outputs to the parsing function. These passed parameters are often specific to the data source and are documented by the data source owners. For example, the file system data source accepts the name being parsed (as a <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-win32_find_dataa">WIN32_FIND_DATA</a> structure), using the <a href="https://docs.microsoft.com/windows/desktop/shell/str-constants">STR_FILE_SYS_BIND_DATA</a> bind context parameter.</para>
            <para><a href="https://docs.microsoft.com/windows/desktop/shell/str-constants">STR_PARSE_PREFER_FOLDER_BROWSING</a> can be passed to indicate that URLs are parsed using the file system data source when possible. Construct a bind context object using <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-createbindctx">CreateBindCtx</a> and populate the values using <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-registerobjectparam">IBindCtx::RegisterObjectParam</a>. See <b>Bind Context String Keys</b> for a complete list of these. See the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/dd940368(v=vs.85)">Parsing With Parameters Sample</a> for an example of the use of this parameter.</para>
            <para>If no data is being passed to or received from the parsing function, this value can be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-shcreateitemfromparsingname#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="riid">
            <para>Type: <b>REFIID</b> A reference to the IID of the interface to retrieve through <i>ppv</i>, typically <b>IID_IShellItem</b> or <b>IID_IShellItem2</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-shcreateitemfromparsingname#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppv">
            <para>Type: <b>void**</b> When this method returns successfully, contains the interface pointer requested in <i>riid</i>. This is typically <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> or <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem2">IShellItem2</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-shcreateitemfromparsingname#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>We recommend that you use the <b>IID_PPV_ARGS</b> macro, defined in Objbase.h, to package the <i>riid</i> and <i>ppv</i> parameters. This macro provides the correct <b>IID</b> based on the interface pointed to by the value in <i>ppv</i>, which eliminates the possibility of a coding error in <i>riid</i> that could lead to unexpected results.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CloseHandle(Windows.Win32.Foundation.HANDLE)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</para>
            </returns>
            <remarks>
            <para>The <b>CloseHandle</b> function closes handles to the following objects: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/handleapi/nf-handleapi-closehandle#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="P:Windows.Win32.IComIID.Guid">
            <summary>The IID guid for this interface.</summary>
            <remarks>The <see cref="P:Windows.Win32.IComIID.Guid" /> reference that is returned comes from a permanent memory address, and is therefore safe to convert to a pointer and pass around or hold long-term.</remarks>
        </member>
        <member name="T:Windows.Win32.IVTable">
            <summary>
            Non generic interface that allows constraining against a COM wrapper type directly. COM structs should
            implement <see cref="T:Windows.Win32.IVTable`2"/>.
            </summary>
        </member>
        <member name="M:Windows.Win32.System_Com_IStream_Extensions.Stat(Windows.Win32.System.Com.IStream.Interface,Windows.Win32.System.Com.STATSTG@,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IStream.Interface.Stat(Windows.Win32.System.Com.STATSTG*,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IPersist_Extensions.GetClassID(Windows.Win32.System.Com.IPersist.Interface,System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IPersist.Interface.GetClassID(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IPersistStream_Extensions.GetClassID(Windows.Win32.System.Com.IPersistStream.Interface,System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IPersistStream.Interface.GetClassID(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IPersistStream_Extensions.GetSizeMax(Windows.Win32.System.Com.IPersistStream.Interface,System.UInt64@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IPersistStream.Interface.GetSizeMax(System.UInt64*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IMoniker_Extensions.GetClassID(Windows.Win32.System.Com.IMoniker.Interface,System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.Interface.GetClassID(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IMoniker_Extensions.GetSizeMax(Windows.Win32.System.Com.IMoniker.Interface,System.UInt64@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.Interface.GetSizeMax(System.UInt64*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IMoniker_Extensions.BindToObject(Windows.Win32.System.Com.IMoniker.Interface,Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.Interface.BindToObject(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IMoniker_Extensions.BindToStorage(Windows.Win32.System.Com.IMoniker.Interface,Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.Interface.BindToStorage(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IMoniker_Extensions.Hash(Windows.Win32.System.Com.IMoniker.Interface,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.Interface.Hash(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IMoniker_Extensions.GetTimeOfLastChange(Windows.Win32.System.Com.IMoniker.Interface,Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.Interface.GetTimeOfLastChange(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Runtime.InteropServices.ComTypes.FILETIME*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IMoniker_Extensions.GetDisplayName(Windows.Win32.System.Com.IMoniker.Interface,Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,Windows.Win32.Foundation.PWSTR@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.Interface.GetDisplayName(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,Windows.Win32.Foundation.PWSTR*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IMoniker_Extensions.ParseDisplayName(Windows.Win32.System.Com.IMoniker.Interface,Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,Windows.Win32.Foundation.PWSTR,System.UInt32@,Windows.Win32.System.Com.IMoniker**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.Interface.ParseDisplayName(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,Windows.Win32.Foundation.PWSTR,System.UInt32*,Windows.Win32.System.Com.IMoniker**)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IMoniker_Extensions.IsSystemMoniker(Windows.Win32.System.Com.IMoniker.Interface,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.Interface.IsSystemMoniker(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IRunningObjectTable_Extensions.Register(Windows.Win32.System.Com.IRunningObjectTable.Interface,Windows.Win32.System.Com.ROT_FLAGS,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.IMoniker*,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IRunningObjectTable.Interface.Register(Windows.Win32.System.Com.ROT_FLAGS,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.IMoniker*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IRunningObjectTable_Extensions.NoteChangeTime(Windows.Win32.System.Com.IRunningObjectTable.Interface,System.UInt32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IRunningObjectTable.Interface.NoteChangeTime(System.UInt32,System.Runtime.InteropServices.ComTypes.FILETIME*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IRunningObjectTable_Extensions.GetTimeOfLastChange(Windows.Win32.System.Com.IRunningObjectTable.Interface,Windows.Win32.System.Com.IMoniker*,System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IRunningObjectTable.Interface.GetTimeOfLastChange(Windows.Win32.System.Com.IMoniker*,System.Runtime.InteropServices.ComTypes.FILETIME*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IEnumString_Extensions.Next(Windows.Win32.System.Com.IEnumString.Interface,System.Span{Windows.Win32.Foundation.PWSTR},System.UInt32*)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IEnumString.Interface.Next(System.UInt32,Windows.Win32.Foundation.PWSTR*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IBindCtx_Extensions.SetBindOptions(Windows.Win32.System.Com.IBindCtx.Interface,Windows.Win32.System.Com.BIND_OPTS@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IBindCtx.Interface.SetBindOptions(Windows.Win32.System.Com.BIND_OPTS*)"/>
        </member>
        <member name="M:Windows.Win32.System_Com_IBindCtx_Extensions.GetBindOptions(Windows.Win32.System.Com.IBindCtx.Interface,Windows.Win32.System.Com.BIND_OPTS@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IBindCtx.Interface.GetBindOptions(Windows.Win32.System.Com.BIND_OPTS*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IShellItem_Extensions.BindToHandler(Windows.Win32.UI.Shell.IShellItem.Interface,Windows.Win32.System.Com.IBindCtx*,System.Guid@,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItem.Interface.BindToHandler(Windows.Win32.System.Com.IBindCtx*,System.Guid*,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IShellItem_Extensions.GetDisplayName(Windows.Win32.UI.Shell.IShellItem.Interface,Windows.Win32.UI.Shell.SIGDN,Windows.Win32.Foundation.PWSTR@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItem.Interface.GetDisplayName(Windows.Win32.UI.Shell.SIGDN,Windows.Win32.Foundation.PWSTR*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IShellItem_Extensions.GetAttributes(Windows.Win32.UI.Shell.IShellItem.Interface,Windows.Win32.System.SystemServices.SFGAO_FLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItem.Interface.GetAttributes(Windows.Win32.System.SystemServices.SFGAO_FLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IShellItem_Extensions.Compare(Windows.Win32.UI.Shell.IShellItem.Interface,Windows.Win32.UI.Shell.IShellItem*,System.UInt32,System.Int32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItem.Interface.Compare(Windows.Win32.UI.Shell.IShellItem*,System.UInt32,System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IShellItemFilter_Extensions.GetEnumFlagsForItem(Windows.Win32.UI.Shell.IShellItemFilter.Interface,Windows.Win32.UI.Shell.IShellItem*,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemFilter.Interface.GetEnumFlagsForItem(Windows.Win32.UI.Shell.IShellItem*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileDialog_Extensions.SetFileTypes(Windows.Win32.UI.Shell.IFileDialog.Interface,System.ReadOnlySpan{Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC})">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.Interface.SetFileTypes(System.UInt32,Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileDialog_Extensions.GetFileTypeIndex(Windows.Win32.UI.Shell.IFileDialog.Interface,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.Interface.GetFileTypeIndex(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileDialog_Extensions.Advise(Windows.Win32.UI.Shell.IFileDialog.Interface,Windows.Win32.UI.Shell.IFileDialogEvents*,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.Interface.Advise(Windows.Win32.UI.Shell.IFileDialogEvents*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileDialog_Extensions.GetOptions(Windows.Win32.UI.Shell.IFileDialog.Interface,Windows.Win32.UI.Shell.FILEOPENDIALOGOPTIONS@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.Interface.GetOptions(Windows.Win32.UI.Shell.FILEOPENDIALOGOPTIONS*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileDialog_Extensions.SetFileName(Windows.Win32.UI.Shell.IFileDialog.Interface,System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.Interface.SetFileName(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileDialog_Extensions.GetFileName(Windows.Win32.UI.Shell.IFileDialog.Interface,Windows.Win32.Foundation.PWSTR@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.Interface.GetFileName(Windows.Win32.Foundation.PWSTR*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileDialog_Extensions.SetTitle(Windows.Win32.UI.Shell.IFileDialog.Interface,System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.Interface.SetTitle(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileDialog_Extensions.SetOkButtonLabel(Windows.Win32.UI.Shell.IFileDialog.Interface,System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.Interface.SetOkButtonLabel(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileDialog_Extensions.SetFileNameLabel(Windows.Win32.UI.Shell.IFileDialog.Interface,System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.Interface.SetFileNameLabel(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileDialog_Extensions.SetDefaultExtension(Windows.Win32.UI.Shell.IFileDialog.Interface,System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.Interface.SetDefaultExtension(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileDialog_Extensions.SetClientGuid(Windows.Win32.UI.Shell.IFileDialog.Interface,System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.Interface.SetClientGuid(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileDialogEvents_Extensions.OnShareViolation(Windows.Win32.UI.Shell.IFileDialogEvents.Interface,Windows.Win32.UI.Shell.IFileDialog*,Windows.Win32.UI.Shell.IShellItem*,Windows.Win32.UI.Shell.FDE_SHAREVIOLATION_RESPONSE@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialogEvents.Interface.OnShareViolation(Windows.Win32.UI.Shell.IFileDialog*,Windows.Win32.UI.Shell.IShellItem*,Windows.Win32.UI.Shell.FDE_SHAREVIOLATION_RESPONSE*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileDialogEvents_Extensions.OnOverwrite(Windows.Win32.UI.Shell.IFileDialogEvents.Interface,Windows.Win32.UI.Shell.IFileDialog*,Windows.Win32.UI.Shell.IShellItem*,Windows.Win32.UI.Shell.FDE_OVERWRITE_RESPONSE@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialogEvents.Interface.OnOverwrite(Windows.Win32.UI.Shell.IFileDialog*,Windows.Win32.UI.Shell.IShellItem*,Windows.Win32.UI.Shell.FDE_OVERWRITE_RESPONSE*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IShellItemArray_Extensions.BindToHandler(Windows.Win32.UI.Shell.IShellItemArray.Interface,Windows.Win32.System.Com.IBindCtx*,System.Guid@,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemArray.Interface.BindToHandler(Windows.Win32.System.Com.IBindCtx*,System.Guid*,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IShellItemArray_Extensions.GetPropertyStore(Windows.Win32.UI.Shell.IShellItemArray.Interface,Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemArray.Interface.GetPropertyStore(Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IShellItemArray_Extensions.GetPropertyDescriptionList(Windows.Win32.UI.Shell.IShellItemArray.Interface,Windows.Win32.Foundation.PROPERTYKEY@,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemArray.Interface.GetPropertyDescriptionList(Windows.Win32.Foundation.PROPERTYKEY*,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IShellItemArray_Extensions.GetAttributes(Windows.Win32.UI.Shell.IShellItemArray.Interface,Windows.Win32.UI.Shell.SIATTRIBFLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemArray.Interface.GetAttributes(Windows.Win32.UI.Shell.SIATTRIBFLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IShellItemArray_Extensions.GetCount(Windows.Win32.UI.Shell.IShellItemArray.Interface,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemArray.Interface.GetCount(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileOpenDialog_Extensions.SetFileTypes(Windows.Win32.UI.Shell.IFileOpenDialog.Interface,System.ReadOnlySpan{Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC})">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.Interface.SetFileTypes(System.UInt32,Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileOpenDialog_Extensions.GetFileTypeIndex(Windows.Win32.UI.Shell.IFileOpenDialog.Interface,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.Interface.GetFileTypeIndex(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileOpenDialog_Extensions.Advise(Windows.Win32.UI.Shell.IFileOpenDialog.Interface,Windows.Win32.UI.Shell.IFileDialogEvents*,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.Interface.Advise(Windows.Win32.UI.Shell.IFileDialogEvents*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileOpenDialog_Extensions.GetOptions(Windows.Win32.UI.Shell.IFileOpenDialog.Interface,Windows.Win32.UI.Shell.FILEOPENDIALOGOPTIONS@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.Interface.GetOptions(Windows.Win32.UI.Shell.FILEOPENDIALOGOPTIONS*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileOpenDialog_Extensions.SetFileName(Windows.Win32.UI.Shell.IFileOpenDialog.Interface,System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.Interface.SetFileName(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileOpenDialog_Extensions.GetFileName(Windows.Win32.UI.Shell.IFileOpenDialog.Interface,Windows.Win32.Foundation.PWSTR@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.Interface.GetFileName(Windows.Win32.Foundation.PWSTR*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileOpenDialog_Extensions.SetTitle(Windows.Win32.UI.Shell.IFileOpenDialog.Interface,System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.Interface.SetTitle(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileOpenDialog_Extensions.SetOkButtonLabel(Windows.Win32.UI.Shell.IFileOpenDialog.Interface,System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.Interface.SetOkButtonLabel(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileOpenDialog_Extensions.SetFileNameLabel(Windows.Win32.UI.Shell.IFileOpenDialog.Interface,System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.Interface.SetFileNameLabel(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileOpenDialog_Extensions.SetDefaultExtension(Windows.Win32.UI.Shell.IFileOpenDialog.Interface,System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.Interface.SetDefaultExtension(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IFileOpenDialog_Extensions.SetClientGuid(Windows.Win32.UI.Shell.IFileOpenDialog.Interface,System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.Interface.SetClientGuid(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IApplicationActivationManager_Extensions.ActivateApplication(Windows.Win32.UI.Shell.IApplicationActivationManager.Interface,System.String,System.String,Windows.Win32.UI.Shell.ACTIVATEOPTIONS,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IApplicationActivationManager.Interface.ActivateApplication(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.UI.Shell.ACTIVATEOPTIONS,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IApplicationActivationManager_Extensions.ActivateForFile(Windows.Win32.UI.Shell.IApplicationActivationManager.Interface,System.String,Windows.Win32.UI.Shell.IShellItemArray*,System.String,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IApplicationActivationManager.Interface.ActivateForFile(Windows.Win32.Foundation.PCWSTR,Windows.Win32.UI.Shell.IShellItemArray*,Windows.Win32.Foundation.PCWSTR,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI_Shell_IApplicationActivationManager_Extensions.ActivateForProtocol(Windows.Win32.UI.Shell.IApplicationActivationManager.Interface,System.String,Windows.Win32.UI.Shell.IShellItemArray*,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IApplicationActivationManager.Interface.ActivateForProtocol(Windows.Win32.Foundation.PCWSTR,Windows.Win32.UI.Shell.IShellItemArray*,System.UInt32*)"/>
        </member>
        <member name="T:Windows.Win32.Foundation.HRESULT">
            <remarks>
            <para>The **HRESULT** data type is the same as the [SCODE](scode.md) data type. An **HRESULT** value consists of the following fields: - A 1-bit code indicating severity, where zero represents success and 1 represents failure. - A 4-bit reserved value. - An 11-bit code indicating responsibility for the error or warning, also known as a facility code. - A 16-bit code describing the error or warning. Most MAPI interface methods and functions return **HRESULT** values to provide detailed cause formation. **HRESULT** values are also used widely in OLE interface methods. OLE provides several macros for converting between **HRESULT** values and **SCODE** values, another common data type for error handling. > [!NOTE] > In 64-bit MAPI, **HRESULT** is still a 32-bit value. For information about the OLE use of **HRESULT** values, see the  *OLE Programmer's Reference*. For more information about the use of these values in MAPI, see [Error Handling](error-handling-in-mapi.md) and any of the following interface methods: [IABLogon::GetLastError](iablogon-getlasterror.md) [IMAPISupport::GetLastError](imapisupport-getlasterror.md) [IMAPIControl::GetLastError](imapicontrol-getlasterror.md) [IMAPITable::GetLastError](imapitable-getlasterror.md) [IMAPIProp::GetLastError](imapiprop-getlasterror.md) [IMAPIViewAdviseSink::OnPrint](imapiviewadvisesink-onprint.md)</para>
            <para><see href="https://learn.microsoft.com/office/client-developer/outlook/mapi/hresult#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Foundation.HRESULT.ThrowOnFailure(System.IntPtr)">
            <inheritdoc cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)" />
            <param name="errorInfo">
            A pointer to the IErrorInfo interface that provides more information about the
            error. You can specify <see cref="F:System.IntPtr.Zero"/> to use the current IErrorInfo interface, or
            <c>new IntPtr(-1)</c> to ignore the current IErrorInfo interface and construct the exception
            just from the error code.
            </param>
            <returns><see langword="this"/> <see cref="T:Windows.Win32.Foundation.HRESULT"/>, if it does not reflect an error.</returns>
            <seealso cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)"/>
        </member>
        <member name="M:Windows.Win32.Foundation.PWSTR.ToString">
            <inheritdoc cref="M:Windows.Win32.Foundation.PCWSTR.ToString"/>
        </member>
        <member name="P:Windows.Win32.Foundation.PWSTR.Length">
            <inheritdoc cref="P:Windows.Win32.Foundation.PCWSTR.Length"/>
        </member>
        <member name="M:Windows.Win32.Foundation.PWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.PROPERTYKEY">
            <summary>Specifies the FMTID/PID identifier that programmatically identifies a property. Replaces SHCOLUMNID.</summary>
            <remarks>
            <para>As of Windows Vista, the <a href="https://docs.microsoft.com/windows/desktop/shell/objects">SHCOLUMNID</a> structure is simply an alias for <a href="https://docs.microsoft.com/windows/desktop/api/wtypes/ns-wtypes-propertykey">PROPERTYKEY</a>, as shown in this declaration from Shobjidl.h.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypes/ns-wtypes-propertykey#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.PROPERTYKEY.fmtid">
            <summary>
            <para>Type: <b>GUID</b> A unique GUID for the property.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypes/ns-wtypes-propertykey#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PROPERTYKEY.pid">
            <summary>
            <para>Type: <b>DWORD</b> A property identifier (PID). This parameter is not used as in <a href="https://docs.microsoft.com/windows/desktop/shell/objects">SHCOLUMNID</a>. It is recommended that you set this value to PID_FIRST_USABLE. Any value greater than or equal to 2 is acceptable. <div class="alert"><b>Note</b>  Values of 0 and 1 are reserved and should not be used.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypes/ns-wtypes-propertykey#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.PCWSTR">
            <summary>
            A pointer to a null-terminated, constant character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCWSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCWSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array, up to the first null character (exclusive).
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref="F:Windows.Win32.Foundation.PCWSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.IUnknown.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IUnknown.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Windows.Win32.System.Com.IUnknown.QueryInterface(System.Guid*,System.Void**)" -->
        <member name="M:Windows.Win32.System.Com.IUnknown.AddRef">
            <summary>Increments the reference count for an interface pointer to a COM object. You should call this method whenever you make a copy of an interface pointer.</summary>
            <returns>The method returns the new reference count. This value is intended to be used only for test purposes.</returns>
            <remarks>
            <para>A COM object uses a per-interface reference-counting mechanism to ensure that the object doesn't outlive references to it. You use **AddRef** to stabilize a copy of an interface pointer. It can also be called when the life of a cloned pointer must extend beyond the lifetime of the original pointer. The cloned pointer must be released by calling [IUnknown::Release](/windows/desktop/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)) on it. The internal reference counter that **AddRef** maintains should be a 32-bit unsigned integer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-addref#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IUnknown.Release">
            <summary>Decrements the reference count for an interface on a COM object.</summary>
            <returns>The method returns the new reference count. This value is intended to be used only for test purposes.</returns>
            <remarks>
            <para>When the reference count on an object reaches zero, **Release** must cause the interface pointer to free itself. When the released pointer is the only (formerly) outstanding reference to an object (whether the object supports single or multiple interfaces), the implementation must free the object. Note that aggregation of objects restricts the ability to recover interface pointers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-release#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IUnknown.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{00000000-0000-0000-c000-000000000046}</value>
        </member>
        <member name="T:Windows.Win32.System.Com.CLSCTX">
            <summary>Values that are used in activation calls to indicate the execution contexts in which an object is to be run.</summary>
            <remarks>
            <para>Values from the <b>CLSCTX</b> enumeration are used in activation calls (<a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cocreateinstance">CoCreateInstance</a>, <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cocreateinstanceex">CoCreateInstanceEx</a>, <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cogetclassobject">CoGetClassObject</a>, and so on) to indicate the preferred execution contexts (in-process, local, or remote) in which an object is to be run. They are also used in calls to <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-coregisterclassobject">CoRegisterClassObject</a> to indicate the set of execution contexts in which a class object is to be made available for requests to construct instances (<b>IClassFactory::CreateInstance</b>). To indicate that more than one context is acceptable, you can combine multiple values with Boolean ORs. The contexts are tried in the order in which they are listed.</para>
            <para>Given a set of <b>CLSCTX</b> flags, the execution context to be used depends on the availability of registered class codes and other parameters according to the following algorithm.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_INPROC_SERVER">
            <summary>The code that creates and manages objects of this class is a DLL that runs in the same process as the caller of the function specifying the class context.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_INPROC_HANDLER">
            <summary>The code that manages objects of this class is an in-process handler. This is a DLL that runs in the client process and implements client-side structures of this class when instances of the class are accessed remotely.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_LOCAL_SERVER">
            <summary>The EXE code that creates and manages objects of this class runs on same machine but is loaded in a separate process space.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_INPROC_SERVER16">
            <summary>Obsolete.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_REMOTE_SERVER">
            <summary>A remote context. The <a href="https://docs.microsoft.com/windows/desktop/com/localserver32">LocalServer32</a> or <a href="https://docs.microsoft.com/windows/desktop/com/localservice">LocalService</a> code that creates and manages objects of this class is run on a different computer.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_INPROC_HANDLER16">
            <summary>Obsolete.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_RESERVED1">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_RESERVED2">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_RESERVED3">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_RESERVED4">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_NO_CODE_DOWNLOAD">
            <summary>Disables the downloading of code from the directory service or the Internet. This flag cannot be set at the same time as CLSCTX_ENABLE_CODE_DOWNLOAD.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_RESERVED5">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_NO_CUSTOM_MARSHAL">
            <summary>Specify if you want the activation to fail if it uses custom marshalling.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ENABLE_CODE_DOWNLOAD">
            <summary>Enables the downloading of code from the directory service or the Internet. This flag cannot be set at the same time as CLSCTX_NO_CODE_DOWNLOAD.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_NO_FAILURE_LOG">
            <summary>
            <para>The CLSCTX_NO_FAILURE_LOG can be used to override the logging of failures in <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cocreateinstanceex">CoCreateInstanceEx</a>. If the ActivationFailureLoggingLevel is created, the following values can determine the status of event logging: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_DISABLE_AAA">
            <summary>
            <para>Disables activate-as-activator (AAA) activations for this activation only. This flag overrides the setting of the EOAC_DISABLE_AAA flag from the EOLE_AUTHENTICATION_CAPABILITIES enumeration. This flag cannot be set at the same time as CLSCTX_ENABLE_AAA. Any activation where a server process would be launched under the caller's identity is known as an activate-as-activator (AAA) activation. Disabling AAA activations allows an application that runs under a privileged account (such as LocalSystem) to help prevent its identity from being used to launch untrusted components. Library applications that use activation calls should always set this flag during those calls. This helps prevent the library application from being used in an escalation-of-privilege security attack. This is the only way to disable AAA activations in a library application because the EOAC_DISABLE_AAA flag from the EOLE_AUTHENTICATION_CAPABILITIES enumeration is applied only to the server process and not to the library application. <b>Windows 2000:  </b>This flag is not supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ENABLE_AAA">
            <summary>
            <para>Enables activate-as-activator (AAA) activations for this activation only. This flag overrides the setting of the EOAC_DISABLE_AAA flag from the EOLE_AUTHENTICATION_CAPABILITIES enumeration. This flag cannot be set at the same time as CLSCTX_DISABLE_AAA. Any activation where a server process would be launched under the caller's identity is known as an activate-as-activator (AAA) activation. Enabling this flag allows an application to transfer its identity to an activated component. <b>Windows 2000:  </b>This flag is not supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_FROM_DEFAULT_CONTEXT">
            <summary>Begin this activation from the default context of the current apartment.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ACTIVATE_X86_SERVER">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ACTIVATE_32_BIT_SERVER">
            <summary>Activate or connect to a 32-bit version of the server; fail if one is not registered.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ACTIVATE_64_BIT_SERVER">
            <summary>Activate or connect to a 64 bit version of the server; fail if one is not registered.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ENABLE_CLOAKING">
            <summary>
            <para>When this flag is specified, COM uses the impersonation token of the thread, if one is present, for the activation request made by the thread. When this flag is not specified or if the thread does not have an impersonation token, COM uses the process token of the thread's process for the activation request made by the thread.</para>
            <para><b>Windows Vista or later:  </b>This flag is supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_APPCONTAINER">
            <summary>
            <para>Indicates activation is for an app container.</para>
            <para><div class="alert"><b>Note</b>  This flag is reserved for internal use and is not intended to be used directly from your code.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ACTIVATE_AAA_AS_IU">
            <summary>
            <para>Specify this flag for Interactive User activation behavior for As-Activator servers. A strongly named Medium IL Windows Store app can use this flag to launch an "As Activator" COM server without a strong name. Also, you can use this flag to bind to a running instance of the COM server that's launched by a desktop application. The client must be Medium IL, it must be strongly named, which means that it has a SysAppID in the client token, it can't be in session 0,  and it must have the same user as the session ID's user in the client token. If  the server is out-of-process and "As Activator", it launches the server with the token of the client token's session user. This token won't be strongly named. If the server is out-of-process and RunAs "Interactive User", this flag has no effect. If the server is out-of-process and is any other RunAs type, the activation fails. This flag has no effect for in-process servers. Off-machine activations fail when they use this flag.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_RESERVED6">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_ACTIVATE_ARM32_SERVER">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.System.Com.CLSCTX.CLSCTX_PS_DLL">
            <summary>
            <para>Used for loading Proxy/Stub DLLs.</para>
            <para><div class="alert"><b>Note</b>  This flag is reserved for internal use and is not intended to be used directly from your code.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ne-wtypesbase-clsctx#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.System.Com.BIND_OPTS">
            <summary>Contains parameters used during a moniker-binding operation.</summary>
            <remarks>
            <para>A <b>BIND_OPTS</b> structure is stored in a bind context; the same bind context is used by each component of a composite moniker during binding, allowing the same parameters to be passed to all components of a composite moniker. See <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> for more information about bind contexts. Moniker clients (use a moniker to acquire an interface pointer to an object) typically do not need to specify values for the members of this structure. The <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-createbindctx">CreateBindCtx</a> function creates a bind context with the bind options set to default values that are suitable for most situations; the <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-bindmoniker">BindMoniker</a> function does the same thing when creating a bind context for use in binding a moniker. If you want to modify the values of these bind options, you can do so by passing a <b>BIND_OPTS</b> structure to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-setbindoptions">IBindCtx::SetBindOptions</a> method. Moniker implementers can pass a <b>BIND_OPTS</b> structure to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-getbindoptions">IBindCtx::GetBindOptions</a> method to retrieve the values of these bind options.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ns-objidl-bind_opts#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.BIND_OPTS.cbStruct">
            <summary>The size of this structure, in bytes.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.BIND_OPTS.grfFlags">
            <summary>Flags that control aspects of moniker binding operations. This value is any combination of the bit flags in the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-bind_flags">BIND_FLAGS</a> enumeration. The <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-createbindctx">CreateBindCtx</a> function initializes this member to zero.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.BIND_OPTS.grfMode">
            <summary>Flags that should be used when opening the file that contains the object identified by the moniker. Possible values  are the <a href="https://docs.microsoft.com/windows/desktop/Stg/stgm-constants">STGM constants</a>. The binding operation uses these flags in the call to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ipersistfile-load">IPersistFile::Load</a> when loading the file. If the object is already running, these flags are ignored by the binding operation. The <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-createbindctx">CreateBindCtx</a> function initializes this field to STGM_READWRITE.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.BIND_OPTS.dwTickCountDeadline">
            <summary>
            <para>The clock time by which the caller would like the binding operation to be completed, in milliseconds. This member lets the caller limit the execution time of an operation when speed is of primary importance. A value of zero indicates that there is no deadline. Callers most often use this capability when calling the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-gettimeoflastchange">IMoniker::GetTimeOfLastChange</a> method, though it can be usefully applied to other operations as well. The <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-createbindctx">CreateBindCtx</a> function initializes this field to zero. Typical deadlines allow for a few hundred milliseconds of execution. This deadline is a recommendation, not a requirement; however, operations that exceed their deadline by a large amount may cause delays for the end user. Each moniker implementation should try to complete its operation by the deadline, or fail with the error MK_E_EXCEEDEDDEADLINE. If a binding operation exceeds its deadline because one or more objects that it needs are not running, the moniker implementation should register the objects responsible in the bind context using the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-registerobjectparam">IBindCtx::RegisterObjectParam</a>. The objects should be registered under the parameter names "ExceededDeadline", "ExceededDeadline1", "ExceededDeadline2", and so on. If the caller later finds the object in the running object table, the caller can retry the binding operation. The <a href="https://docs.microsoft.com/windows/desktop/api/sysinfoapi/nf-sysinfoapi-gettickcount">GetTickCount</a> function indicates the number of milliseconds since system startup, and wraps back to zero after 2^31 milliseconds. Consequently, callers should be careful not to inadvertently pass a zero value (which indicates no deadline), and moniker implementations should be aware of clock wrapping problems.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ns-objidl-bind_opts#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.System.Com.STGM">
            <summary>Flags that indicate conditions for creating and deleting the object and access modes for the object.</summary>
            <remarks>You can combine these flags, but you can only choose one flag from each group of related flags. Typically one flag from each of the access and sharing groups must be specified for all functions and methods which use these constants. Flags from other groups are optional.</remarks>
        </member>
        <member name="T:Windows.Win32.System.Com.LOCKTYPE">
            <summary>The LOCKTYPE enumeration values indicate the type of locking requested for the specified range of bytes. The values are used in the ILockBytes::LockRegion and IStream::LockRegion methods.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ne-objidl-locktype">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.LOCKTYPE.LOCK_WRITE">
            <summary>If this lock is granted, the specified range of bytes can be opened and read any number of times, but writing to the locked range is prohibited except for the owner that was granted this lock.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.LOCKTYPE.LOCK_EXCLUSIVE">
            <summary>If this lock is granted, writing to the specified range of bytes is prohibited except by the owner that was granted this lock.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.LOCKTYPE.LOCK_ONLYONCE">
            <summary>If this lock is granted, no other <b>LOCK_ONLYONCE</b> lock can be obtained on the range. Usually this lock type is an alias for some other lock type. Thus, specific implementations can have additional behavior associated with this lock type.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.STATSTG">
            <summary>Contains statistical data about an open storage, stream, or byte-array object.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ns-objidl-statstg">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.pwcsName">
            <summary>
            <para>A pointer to a <b>NULL</b>-terminated Unicode string that contains the name. Space for this string is allocated by the method called and freed by the caller (for more information, see <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cotaskmemfree">CoTaskMemFree</a>). To  not return this member, specify the STATFLAG_NONAME value when you call a method that returns a <b>STATSTG</b> structure, except for calls to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumstatstg">IEnumSTATSTG::Next</a>, which provides no way to specify this value.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ns-objidl-statstg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.type">
            <summary>
            <para>Indicates the type of storage object. This is one of the values from the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-stgty">STGTY</a> enumeration.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ns-objidl-statstg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.cbSize">
            <summary>Specifies the size, in bytes, of the stream or byte array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.mtime">
            <summary>Indicates the last modification time for this storage, stream, or byte array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.ctime">
            <summary>Indicates the creation time for this storage, stream, or byte array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.atime">
            <summary>Indicates the last access time for this storage, stream, or byte array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.grfMode">
            <summary>
            <para>Indicates the access mode specified when the object was opened. This member is only valid in calls to <b>Stat</b> methods.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ns-objidl-statstg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.clsid">
            <summary>Indicates the class identifier for the storage object; set to CLSID_NULL for new storage objects. This member is not used for streams or byte arrays.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.grfStateBits">
            <summary>
            <para>Indicates the current state bits of the storage object; that is, the value most recently set by the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-setstatebits">IStorage::SetStateBits</a> method. This member is not valid for streams or byte arrays.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/ns-objidl-statstg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.reserved">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="M:Windows.Win32.System.Com.ISequentialStream.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.ISequentialStream.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.ISequentialStream.Read(System.Void*,System.UInt32,System.UInt32*)">
            <summary>Reads a specified number of bytes from the stream object into memory, starting at the current seek pointer.</summary>
            <param name="pv">A pointer to the buffer which the stream data is read into.</param>
            <param name="cb">The number of bytes of data to read from the stream object.</param>
            <param name="pcbRead">
            <para>A pointer to a <b>ULONG</b> variable that receives the actual number of bytes read from the stream object. <div class="alert"><b>Note</b>  The number of bytes read may be zero.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-isequentialstream-read#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | All of the requested data was successfully read from the stream object; the number of bytes requested in *cb* is the same as the number of bytes returned in *pcbRead*.| |S_FALSE | The value returned in *pcbRead* is less than the number of bytes requested in *cb*. This indicates the end of the stream has been reached. The number of bytes read indicates how much of the *pv* buffer has been filled.| |E_PENDING | Asynchronous storage only: Part or all of the data to be read is currently unavailable. | |STG_E_ACCESSDENIED | The caller does not have permissions required to read this stream object.| |STG_E_INVALIDPOINTER | One of the pointer values is invalid.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para>This method reads bytes from this stream object into memory. The stream object must be opened in <b>STGM_READ</b> mode. This method adjusts the seek pointer by the actual number of bytes read. The number of bytes actually read is also returned in the <i>pcbRead</i> parameter. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> The actual number of bytes read can be less than the number of bytes requested if an error occurs or if the end of the stream is reached during the read operation.  The number of bytes returned should always  be compared to the number of bytes requested.  If the number of bytes returned is less than the number of bytes requested, it usually means the <b>Read</b> method attempted to read  past the end of the stream. The application should handle both a returned error  and <b>S_OK</b> return values on end-of-stream read operations.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-isequentialstream-read#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ISequentialStream.Write(System.Void*,System.UInt32,System.UInt32*)">
            <summary>Writes a specified number of bytes into the stream object starting at the current seek pointer.</summary>
            <param name="pv">A pointer to the buffer that contains the data that is to be written to the stream. A valid pointer must be provided for this parameter even when <i>cb</i> is zero.</param>
            <param name="cb">The number of bytes of data to attempt to write into the stream. This value can be zero.</param>
            <param name="pcbWritten">A pointer to a <b>ULONG</b> variable where this method writes the actual number of bytes written to the stream object. The caller can set this pointer to <b>NULL</b>, in which case this method does not provide the actual number of bytes written.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The data was successfully written to the stream object.| |E_PENDING | Asynchronous Storage only: Part or all of the data to be written is currently unavailable.| |STG_E_MEDIUMFULL | The write operation failed because there is no space left on the storage device.| |STG_E_ACCESSDENIED | The caller does not have the required  permissions for writing to this stream object.| |STG_E_CANTSAVE | Data cannot be written for reasons other than improper access or insufficient space.| |STG_E_INVALIDPOINTER | One of the pointer values is not valid. The *pv* parameter must contain a valid pointer even if *cb* is zero.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.| |STG_E_WRITEFAULT | The write operation failed due to a disk error. This value is also returned when this method attempts to write to a stream that was opened in simple mode (using the STGM_SIMPLE flag).|</para>
            </returns>
            <remarks>
            <para><b>ISequentialStream::Write</b> writes the specified data to a stream object. The seek pointer is adjusted for the number of bytes actually written. The number of bytes actually written is returned in the <i>pcbWritten</i> parameter. If the byte count is zero bytes, the write operation has no effect. If the seek pointer is currently past the end of the stream and the byte count is nonzero, this method increases the size of the stream to the seek pointer and writes the specified bytes starting at the seek pointer. The fill bytes written to the stream are not initialized to any particular value. This is the same as the end-of-file behavior in the MS-DOS FAT file system. With a zero byte count and a seek pointer past the end of the stream, this method does not create the fill bytes to increase the stream to the seek pointer. In this case, you must call the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istream-setsize">IStream::SetSize</a> method to increase the size of the stream and write the fill bytes. The <i>pcbWritten</i> parameter can have a value even if an error occurs. In the COM-provided implementation, stream objects are not sparse. Any fill bytes are eventually allocated on the disk and assigned to the stream.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-isequentialstream-write#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.ISequentialStream.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{0c733a30-2a1c-11ce-ade5-00aa0044773d}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IStream.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Seek(System.Int64,System.IO.SeekOrigin,System.UInt64*)">
            <summary>Changes the seek pointer to a new location. The new location is relative to either the beginning of the stream, the end of the stream, or the current seek pointer.</summary>
            <param name="dlibMove">The displacement to be added to the location indicated by the <i>dwOrigin</i> parameter. If <i>dwOrigin</i> is <b>STREAM_SEEK_SET</b>, this is interpreted as an unsigned value rather than a signed value.</param>
            <param name="dwOrigin">The origin for the displacement specified in <i>dlibMove</i>. The origin can be the beginning of the file (<b>STREAM_SEEK_SET</b>), the current seek pointer (<b>STREAM_SEEK_CUR</b>), or the end of the file (<b>STREAM_SEEK_END</b>). For more information about values, see the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-stream_seek">STREAM_SEEK</a> enumeration.</param>
            <param name="plibNewPosition">
            <para>A pointer to the location where this method writes the value of the new seek pointer from the beginning of the stream. You can set this pointer to <b>NULL</b>. In this case, this method does not provide the new seek pointer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-seek#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The seek pointer was successfully adjusted.| |E_PENDING | Asynchronous Storage only: Part or all of the stream data is currently unavailable. | |STG_E_INVALIDPOINTER | Indicates that *plibNewPosition* points to invalid memory, because *plibNewPosition* is not read.| |STG_E_INVALIDFUNCTION | The *dwOrigin* parameter contains an invalid value, or the *dlibMove* parameter contains a bad offset value. For example, the result of the seek pointer is a negative offset value.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><b>IStream::Seek</b> changes the seek pointer so that subsequent read and write operations can be performed at a different location in the stream object. It is an error to seek before the beginning of the stream. It is not, however, an error to seek past the end of the stream. Seeking past the end of the stream is useful for subsequent write operations, as the stream byte range will be extended to the new seek position immediately before the write is complete. You can also use this method to obtain the current value of the seek pointer by calling this method with the <i>dwOrigin</i> parameter set to <b>STREAM_SEEK_CUR</b> and the <i>dlibMove</i> parameter set to 0 so that the seek pointer is not changed. The current seek pointer is returned in the <i>plibNewPosition</i> parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-seek#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.SetSize(System.UInt64)">
            <summary>Changes the size of the stream object.</summary>
            <param name="libNewSize">Specifies the new size, in bytes, of the stream.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The size of the stream object was successfully changed.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable.| |STG_E_MEDIUMFULL | The stream size is not changed because there is no space left on the storage device.| |STG_E_INVALIDFUNCTION | The value of the *libNewSize* parameter is not supported by the implementation. Not all streams support greater than 232 bytes. If a stream does not support more than 232 bytes, the high DWORD data type of *libNewSize* must be zero. If it is nonzero, the implementation may return STG_E_INVALIDFUNCTION. In general, COM-based implementations of the IStream interface do not support streams larger than 232 bytes.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><b>IStream::SetSize</b> changes the size of the stream object. Call this method to preallocate space for the stream. If the <i>libNewSize</i> parameter is larger than the current stream size, the stream is extended to the indicated size by filling the intervening space with bytes of undefined value. This operation is similar to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-isequentialstream-write">ISequentialStream::Write</a> method if the seek pointer is past the current end of the stream. If the <i>libNewSize</i> parameter is smaller than the current stream, the stream is truncated to the indicated size. The seek pointer is not affected by the change in stream size. Calling <b>IStream::SetSize</b> can be an effective way to obtain a large chunk of contiguous space.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-setsize#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.CopyTo(Windows.Win32.System.Com.IStream*,System.UInt64,System.UInt64*,System.UInt64*)">
            <summary>Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.</summary>
            <param name="pstm">A pointer to the destination stream. The stream pointed to by <i>pstm</i> can be a new stream or a clone of the source stream.</param>
            <param name="cb">The number of bytes to copy from the source stream.</param>
            <param name="pcbRead">A pointer to the location where this method writes the actual number of bytes read from the source. You can set this pointer to <b>NULL</b>. In this case, this method does not provide the actual number of bytes read.</param>
            <param name="pcbWritten">A pointer to the location where this method writes the actual number of bytes written to the destination. You can set this pointer to <b>NULL</b>. In this case, this method does not provide the actual number of bytes written.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The stream object was successfully copied.| |E_PENDING | Asynchronous Storage only: Part or all of the data to be copied is currently unavailable. | |STG_E_INVALIDPOINTER | The value of one of the pointer parameters is invalid.| |STG_E_MEDIUMFULL | The stream is not copied because there is no space left on the storage device.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para>The <b>CopyTo</b> method copies the specified bytes from one stream to another. It can also be used to copy a stream to itself. The seek pointer in each stream instance is adjusted for the number of bytes read or written. This method is equivalent to reading <i>cb</i> bytes into memory using <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-isequentialstream-read">ISequentialStream::Read</a> and then immediately writing them to the destination stream using <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-isequentialstream-write">ISequentialStream::Write</a>, although <b>IStream::CopyTo</b> will be more efficient. The destination stream can be a clone of the source stream created by calling the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istream-clone">IStream::Clone</a> method. If <b>IStream::CopyTo</b> returns an error, you cannot assume that the seek pointers are valid for either the source or destination. Additionally, the values of <i>pcbRead</i> and <i>pcbWritten</i> are not meaningful even though they are returned. If <b>IStream::CopyTo</b> returns successfully, the actual number of bytes read and written are the same. To copy the remainder of the source from the current seek pointer, specify the maximum large integer value for the <i>cb</i> parameter. If the seek pointer is the beginning of the stream, this operation copies the entire stream.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-copyto#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Commit(System.UInt32)">
            <summary>The Commit method ensures that any changes made to a stream object open in transacted mode are reflected in the parent storage.</summary>
            <param name="grfCommitFlags">
            <para>Controls how the changes for the stream object are committed. See the <a href="https://docs.microsoft.com/windows/desktop/api/wtypes/ne-wtypes-stgc">STGC</a> enumeration for a definition of these values.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-commit#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | Changes to the stream object were successfully committed to the parent level.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. | |STG_E_MEDIUMFULL | The commit operation failed due to lack of space on the storage device.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para>The <b>Commit</b>  method ensures that changes to a stream object opened in transacted mode are reflected in the parent storage. Changes that have been made to the stream since it was opened or last committed are reflected to the parent storage object. If the parent is opened in transacted mode, the parent may revert at a later time, rolling back the changes to this stream object. The compound file implementation does not support the opening of streams in transacted mode, so this method has very little effect other than to flush memory buffers. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Stg/istream-compound-file-implementation">IStream - Compound File Implementation</a>. If the stream is open in direct mode, this method ensures that any memory buffers have been flushed out to the underlying storage object. This is much like a flush in traditional file systems. The <b>IStream::Commit</b> method is useful on a direct mode stream when the implementation of the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a> interface is a wrapper for underlying file system APIs. In this case, <b>IStream::Commit</b> would be connected to the file system's flush call.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-commit#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Revert">
            <summary>The Revert method discards all changes that have been made to a transacted stream since the last IStream::Commit call. On streams open in direct mode and streams using the COM compound file implementation of IStream::Revert, this method has no effect.</summary>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The stream was successfully reverted to its previous version.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. |</para>
            </returns>
            <remarks>The <b>Revert</b> method discards changes made to a transacted stream since the last commit operation.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.LockRegion(System.UInt64,System.UInt64,System.UInt32)">
            <summary>The LockRegion method restricts access to a specified range of bytes in the stream.</summary>
            <param name="libOffset">Integer that specifies the byte offset for the beginning of the range.</param>
            <param name="cb">Integer that specifies the length of the range, in bytes, to be restricted.</param>
            <param name="dwLockType">Specifies the restrictions being requested on accessing the range.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The specified range of bytes was locked.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. | |STG_E_INVALIDFUNCTION | Locking is not supported at all or the specific type of lock requested is not supported.| |STG_E_LOCKVIOLATION | Requested lock is supported, but cannot be granted because of an existing lock.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para>The byte range of the stream can be extended.  Locking an extended range for the stream is useful as a method of communication between different instances of the stream without changing data that is actually part of the stream. Three types of locking can be supported: locking to exclude other writers, locking to exclude other readers or writers, and locking that allows only one requester to obtain a lock on the given range, which is usually an alias for one of the other two lock types. A given stream instance might support either of the first two types, or both. The lock type is specified by <i>dwLockType</i>, using a value from the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-locktype">LOCKTYPE</a> enumeration. Any region locked with <b>IStream::LockRegion</b> must later be explicitly unlocked by calling <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istream-unlockregion">IStream::UnlockRegion</a> with exactly the same values for the <i>libOffset</i>, <i>cb</i>, and <i>dwLockType</i> parameters. The region must be unlocked before the stream is released. Two adjacent regions cannot be locked separately and then unlocked with a single unlock call. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Since the type of locking supported is optional and can vary in different implementations of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a>, you must provide code to deal with the STG_E_INVALIDFUNCTION error. The <b>LockRegion</b> method has no effect in the compound file implementation, because the implementation does not support range locking. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> Support for this method is optional for implementations of stream objects since it may not be supported by the underlying file system. The type of locking supported is also optional. The STG_E_INVALIDFUNCTION error is returned if the requested type of locking is not supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-lockregion#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.UnlockRegion(System.UInt64,System.UInt64,System.UInt32)">
            <summary>The UnlockRegion method removes the access restriction on a range of bytes previously restricted with IStream::LockRegion.</summary>
            <param name="libOffset">Specifies the byte offset for the beginning of the range.</param>
            <param name="cb">Specifies, in bytes, the length of the range to be restricted.</param>
            <param name="dwLockType">Specifies the access restrictions previously placed on the range.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The byte range was unlocked.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable.| |STG_E_INVALIDFUNCTION | Locking is not supported at all or the specific type of lock requested is not supported.| |STG_E_LOCKVIOLATION | The requested unlock operation cannot be granted.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><b>IStream::UnlockRegion</b> unlocks a region previously locked with the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istream-lockregion">IStream::LockRegion</a> method. Locked regions must later be explicitly unlocked by calling <b>IStream::UnlockRegion</b> with exactly the same values for the <i>libOffset</i>, <i>cb</i>, and <i>dwLockType</i> parameters. The region must be unlocked before the stream is released. Two adjacent regions cannot be locked separately and then unlocked with a single unlock call.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-unlockregion#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Stat(Windows.Win32.System.Com.STATSTG@,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IStream.Stat(Windows.Win32.System.Com.STATSTG*,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Stat(Windows.Win32.System.Com.STATSTG*,System.UInt32)">
            <summary>The Stat method retrieves the STATSTG structure for this stream.</summary>
            <param name="pstatstg">
            <para>Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structure where this method places information about this stream object.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-stat#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="grfStatFlag">
            <para>Specifies that this method does not return some of the members in the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structure, thus saving a memory allocation operation. Values are taken from the <a href="https://docs.microsoft.com/windows/desktop/api/wtypes/ne-wtypes-statflag">STATFLAG</a> enumeration.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-stat#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The STATSTG structure was successfully returned at the specified location.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. | |STG_E_ACCESSDENIED | The caller does not have enough permissions for accessing statistics for this storage object.| |STG_E_INSUFFICIENTMEMORY | The STATSTG structure was not returned due to a lack of memory.| |STG_E_INVALIDFLAG | The value for the *grfStateFlag* parameter is not valid.| |STG_E_INVALIDPOINTER | The *pStatStg* pointer is not valid.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><b>IStream::Stat</b> retrieves a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structure that contains information about this open stream. When this stream is within a structured storage and <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-enumelements">IStorage::EnumElements</a> is called, it creates an enumerator object with the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumstatstg">IEnumSTATSTG</a> interface on it, which can be called to enumerate the storages and streams through the <b>STATSTG</b> structures associated with each of them.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-stat#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Clone(Windows.Win32.System.Com.IStream**)">
            <summary>The Clone method creates a new stream object with its own seek pointer that references the same bytes as the original stream.</summary>
            <param name="ppstm">
            <para>When successful, pointer to the location of an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a> pointer to the new stream object. If an error occurs, this parameter is <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-clone#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The stream was successfully cloned.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. | |STG_E_INSUFFICIENTMEMORY | The stream was not cloned due to a lack of memory.| |STG_E_INVALIDPOINTER | The ppStm pointer is not valid.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para>The <b>Clone</b> method creates a new stream object for accessing the same bytes but using a separate seek pointer. The new stream object sees the same data as the source-stream object. Changes written to one object are immediately visible in the other. Range locking is shared between the stream objects. The initial setting of the seek pointer in the cloned stream instance is the same as the current setting of the seek pointer in the original stream at the time of the clone operation.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-istream-clone#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IStream.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{0000000c-0000-0000-c000-000000000046}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumMoniker.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IEnumMoniker.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumMoniker.Next(System.UInt32,Windows.Win32.System.Com.IMoniker**,System.UInt32*)">
            <summary>Retrieves the specified number of items in the enumeration sequence. (IEnumMoniker.Next)</summary>
            <param name="celt">The number of items to be retrieved. If there are fewer than the requested number of items left in the sequence, this method retrieves the remaining elements.</param>
            <param name="rgelt">
            <para>An array of enumerated items. The enumerator is responsible for calling <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a>, and the caller is responsible for calling <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a> through each pointer enumerated. If <i>celt</i> is greater than 1, the caller must also pass a non-<b>NULL</b> pointer passed to <i>pceltFetched</i> to know how many pointers to release.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ienummoniker-next#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pceltFetched">The number of items that were retrieved. This parameter is always less than or equal to the number of items requested. This parameter can be <b>NULL</b> if <i>celt</i> is 1.</param>
            <returns>If the method retrieves the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ienummoniker-next">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumMoniker.Skip(System.UInt32)">
            <summary>Skips over the specified number of items in the enumeration sequence. (IEnumMoniker.Skip)</summary>
            <param name="celt">The number of items to be skipped.</param>
            <returns>If the method skips the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ienummoniker-skip">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumMoniker.Reset">
            <summary>Resets the enumeration sequence to the beginning. (IEnumMoniker.Reset)</summary>
            <returns>This method returns S_OK on success.</returns>
            <remarks>There is no guarantee that the same set of objects will be enumerated after the reset operation has completed. A static collection is reset to the beginning, but it can be too expensive for some collections, such as files in a directory, to guarantee this condition.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumMoniker.Clone(Windows.Win32.System.Com.IEnumMoniker**)">
            <summary>Creates a new enumerator that contains the same enumeration state as the current one. (IEnumMoniker.Clone)</summary>
            <param name="ppenum">Address of an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienummoniker">IEnumMoniker</a> pointer variable that receives the interface pointer to the enumeration object. If the method is unsuccessful, the value of this output variable is undefined.</param>
            <returns>
            <para>This method returns S_OK on success. Other possible values include the following. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ienummoniker-clone">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IEnumMoniker.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{00000102-0000-0000-c000-000000000046}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersist.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IPersist.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersist.GetClassID(System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IPersist.GetClassID(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersist.GetClassID(System.Guid*)">
            <summary>Retrieves the class identifier (CLSID) of the object.</summary>
            <param name="pClassID">A pointer to the location that receives the CLSID on return. The CLSID is a globally unique identifier (GUID) that uniquely represents an object class that defines the code that can manipulate the object's data.</param>
            <returns>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</returns>
            <remarks>
            <para>The <b>GetClassID</b> method retrieves the class identifier (CLSID) for an object, used in later operations to load object-specific code into the caller's context. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> A container application might call this method to retrieve the original CLSID of an object that it is treating as a different class. Such a call would be necessary if a user performed an editing operation that required the object to be saved. If the container were to save it using the treat-as CLSID, the original application would no longer be able to edit the object. Typically, in this case, the container calls the <a href="https://docs.microsoft.com/windows/desktop/api/ole2/nf-ole2-olesave">OleSave</a> helper function, which performs all the necessary steps. For this reason, most container applications have no need to call this method directly. The exception would be a container that provides an object handler for certain objects. In particular, a container application should not get an object's CLSID and then use it to retrieve class specific information from the registry. Instead, the container should use <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nn-oleidl-ioleobject">IOleObject</a> and <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-idataobject">IDataObject</a> interfaces to retrieve such class-specific information directly from the object. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> Typically, implementations of this method simply supply a constant CLSID for an object. If, however, the object's <b><a href="https://docs.microsoft.com/windows/desktop/com/treatas">TreatAs</a></b> registry key has been set by an application that supports emulation (and so is treating the object as one of a different class), a call to <b>GetClassID</b> must supply the CLSID specified in the <b><a href="https://docs.microsoft.com/windows/desktop/com/treatas">TreatAs</a></b> key. For more information on emulation, see <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-cotreatasclass">CoTreatAsClass</a>. When an object is in the running state, the default handler calls an implementation of <b>GetClassID</b> that delegates the call to the implementation in the object. When the object is not running, the default handler instead calls the <a href="https://docs.microsoft.com/windows/desktop/api/coml2api/nf-coml2api-readclassstg">ReadClassStg</a> function to read the CLSID that is saved in the object's storage. If you are writing a custom object handler for your object, you might want to simply delegate this method to the default handler implementation (see <a href="https://docs.microsoft.com/windows/desktop/api/ole2/nf-ole2-olecreatedefaulthandler">OleCreateDefaultHandler</a>).</para>
            <para><h3><a id="URL_Moniker_Notes"></a><a id="url_moniker_notes"></a><a id="URL_MONIKER_NOTES"></a>URL Moniker Notes</h3> This method returns CLSID_StdURLMoniker.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ipersist-getclassid#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IPersist.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{0000010c-0000-0000-c000-000000000046}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersistStream.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IPersistStream.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersistStream.GetClassID(System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IPersistStream.GetClassID(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersistStream.IsDirty">
            <summary>Determines whether an object has changed since it was last saved to its stream. (IPersistStream.IsDirty)</summary>
            <returns>This method returns S_OK to indicate that the object has changed. Otherwise, it returns S_FALSE.</returns>
            <remarks>
            <para>Use this method to determine whether an object should be saved before closing it. The dirty flag for an object is conditionally cleared in the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ipersiststream-save">IPersistStream::Save</a> method. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> You should treat any error return codes as an indication that the object has changed. Unless this method explicitly returns S_FALSE, assume that the object must be saved. Note that the OLE-provided implementations of the <b>IPersistStream::IsDirty</b> method in the OLE-provided moniker interfaces always return S_FALSE because their internal state never changes.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ipersiststream-isdirty#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersistStream.Load(Windows.Win32.System.Com.IStream*)">
            <summary>Initializes an object from the stream where it was saved previously. (IPersistStream.Load)</summary>
            <param name="pStm">An <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a> pointer to the stream from which the object should be loaded.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>This method loads an object from its associated stream. The seek pointer is set as it was in the most recent <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ipersiststream-save">IPersistStream::Save</a> method. This method can seek and read from the stream, but cannot write to it. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Rather than calling <b>IPersistStream::Load</b> directly, you typically call the <a href="https://docs.microsoft.com/windows/desktop/api/ole/nf-ole-oleloadfromstream">OleLoadFromStream</a> function does the following: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ipersiststream-load#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersistStream.Save(Windows.Win32.System.Com.IStream*,Windows.Win32.Foundation.BOOL)">
            <summary>Saves an object to the specified stream. (IPersistStream.Save)</summary>
            <param name="pStm">An <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a> pointer to the stream into which the object should be saved.</param>
            <param name="fClearDirty">Indicates whether to clear the dirty flag after the save is complete. If <b>TRUE</b>, the flag should be cleared. If <b>FALSE</b>, the flag should be left unchanged.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><b>IPersistStream::Save</b> saves an object into the specified stream and indicates whether the object should reset its dirty flag. The seek pointer is positioned at the location in the stream at which the object should begin writing its data. The object calls the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-isequentialstream-write">ISequentialStream::Write</a> method to write its data. On exit, the seek pointer must be positioned immediately past the object data. The position of the seek pointer is undefined if an error returns. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Rather than calling <b>IPersistStream::Save</b> directly, you typically call the <a href="https://docs.microsoft.com/windows/desktop/api/ole/nf-ole-olesavetostream">OleSaveToStream</a> helper function which does the following: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ipersiststream-save#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersistStream.GetSizeMax(System.UInt64@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IPersistStream.GetSizeMax(System.UInt64*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersistStream.GetSizeMax(System.UInt64*)">
            <summary>Retrieves the size of the stream needed to save the object. (IPersistStream.GetSizeMax)</summary>
            <param name="pcbSize">The size in bytes of the stream needed to save this object, in bytes.</param>
            <returns>This method returns S_OK to indicate that the size was retrieved successfully.</returns>
            <remarks>
            <para>This method returns the size needed to save an object. You can call this method to determine the size and set the necessary buffers before calling the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ipersiststream-save">IPersistStream::Save</a> method. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> The <b>GetSizeMax</b> implementation should return a conservative estimate of the necessary size because the caller might call the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ipersiststream-save">IPersistStream::Save</a> method with a non-growable stream. <h3><a id="URL_Moniker_Notes"></a><a id="url_moniker_notes"></a><a id="URL_MONIKER_NOTES"></a>URL Moniker Notes</h3> This method retrieves the maximum number of bytes in the stream that will be required by a subsequent call to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ipersiststream-save">IPersistStream::Save</a>. This value is sizeof(ULONG)==4 plus sizeof(WCHAR)*n where n is the length of the full or partial URL string, including the NULL terminator.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ipersiststream-getsizemax#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IPersistStream.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{00000109-0000-0000-c000-000000000046}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.GetClassID(System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.GetClassID(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.GetSizeMax(System.UInt64@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.GetSizeMax(System.UInt64*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.BindToObject(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.BindToObject(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.BindToObject(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Guid*,System.Void**)">
            <summary>Binds to the specified object. The binding process involves finding the object, putting it into the running state if necessary, and providing the caller with a pointer to a specified interface on the identified object.</summary>
            <param name="pbc">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on the bind context object, which is used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
            <param name="pmkToLeft">If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is primarily used by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should use <b>NULL</b>.</param>
            <param name="riidResult">The IID of the interface the client wishes to use to communicate with the object that the moniker identifies.</param>
            <param name="ppvResult">The address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppvResult</i> contains the requested interface pointer to the object the moniker identifies. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the moniker. It is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs, *<i>ppvResult</i> should be <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><b>BindToObject</b> implements the primary function of a moniker, which is to locate the object identified by the moniker and return a pointer to one of its interfaces. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> If you are using a moniker as a persistent connection between two objects, you activate the connection by calling <b>BindToObject</b>. You typically call <b>BindToObject</b> during the following process: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-bindtoobject#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.BindToStorage(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.BindToStorage(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.BindToStorage(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Guid*,System.Void**)">
            <summary>Binds to the storage for the specified object. Unlike the IMoniker::BindToObject method, this method does not activate the object identified by the moniker.</summary>
            <param name="pbc">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on the bind context object, which is used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
            <param name="pmkToLeft">If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is primarily used by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should use <b>NULL</b>.</param>
            <param name="riid">A reference to the identifier of the storage interface requested, whose pointer will be returned in <i>ppvObj</i>. Storage interfaces commonly requested include <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istorage">IStorage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a>, and <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ilockbytes">ILockBytes</a>.</param>
            <param name="ppvObj">The address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppvObj</i> contains the requested interface pointer to the storage of the object the moniker identifies. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the storage. It is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs, *<i>ppvObj</i> should be <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>There is an important difference between the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-bindtoobject">BindToObject</a> and <b>BindToStorage</b> methods. If, for example, you have a moniker that identifies a spreadsheet object, calling <b>BindToObject</b> provides access to the spreadsheet object itself, while calling <b>BindToStorage</b> provides access to the storage object in which the spreadsheet resides. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Although none of the COM moniker classes call this method in their binding operations, it might be appropriate to call it in the implementation of a new moniker class. You could call this method in an implementation of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-bindtoobject">BindToObject</a> that requires information from the object identified by the <i>pmkToLeft</i> parameter and can get it from the persistent storage of the object without activation. For example, if your monikers are used to identify objects that can be activated without activating their containers, you may find this method useful. A client that can read the storage of the object its moniker identifies could also call this method. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> Your implementation should locate the persistent storage for the object identified by the current moniker and return the desired interface pointer. Some types of monikers represent pseudo-objects, which are objects that do not have their own persistent storage. Such objects comprise some portion of the internal state of its container, for example, a range of cells in a spreadsheet. If your moniker class identifies this type of object, your implementation of <b>BindToStorage</b> should return the error MK_E_NOSTORAGE. If the bind context's <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-bind_opts">BIND_OPTS</a> structure specifies the BINDFLAGS_JUSTTESTEXISTENCE flag, your implementation has the option of returning <b>NULL</b> in <i>ppvObj</i> (although you can also ignore the flag and perform the complete binding operation). <h3><a id="Implementation-specific_Notes"></a><a id="implementation-specific_notes"></a><a id="IMPLEMENTATION-SPECIFIC_NOTES"></a>Implementation-specific Notes</h3> </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-bindtostorage#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.Reduce(Windows.Win32.System.Com.IBindCtx*,System.UInt32,Windows.Win32.System.Com.IMoniker**,Windows.Win32.System.Com.IMoniker**)">
            <summary>Reduces a moniker to its simplest form.</summary>
            <param name="pbc">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
            <param name="dwReduceHowFar">Specifies how far this moniker should be reduced. This parameter must be one of the values from the <a href="https://docs.microsoft.com/windows/win32/api/objidl/ne-objidl-mkrreduce">MKRREDUCE</a> enumeration.</param>
            <param name="ppmkToLeft">
            <para>On entry, a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> pointer variable that contains the interface pointer to moniker to the left of this moniker. This parameter is used primarily by moniker implementers to enable cooperation between the various components of a composite moniker; moniker clients can usually pass <b>NULL</b>. On return, *<i>ppmkToLeft</i> is usually set to <b>NULL</b>, indicating no change in the original moniker to the left. In rare situations, *<i>ppmkToLeft</i> indicates a moniker, indicating that the previous moniker to the left should be disregarded and the moniker returned through *<i>ppmkToLeft</i> is the replacement. In such a situation, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a> on the old moniker to the left of this moniker and must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the new returned moniker; the caller must release it later. If an error occurs, the implementation can either leave the interface pointer unchanged or set it to <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-reduce#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppmkReduced">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> pointer variable that receives the interface pointer to the reduced form of this moniker, which can be <b>NULL</b> if an error occurs or if this moniker is reduced to nothing. If this moniker cannot be reduced, *<i>ppmkReduced</i> is simply set to this moniker and the return value is MK_S_REDUCED_TO_SELF. If *<i>ppmkReduced</i> is non-<b>NULL</b>, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the new moniker; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. (This is true even if *<i>ppmkReduced</i> is set to this moniker.)</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>This method is intended for the following uses: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-reduce#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.ComposeWith(Windows.Win32.System.Com.IMoniker*,Windows.Win32.Foundation.BOOL,Windows.Win32.System.Com.IMoniker**)">
            <summary>Creates a new composite moniker by combining the current moniker with the specified moniker.</summary>
            <param name="pmkRight">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker to compose onto the end of this moniker.</param>
            <param name="fOnlyIfNotGeneric">If <b>TRUE</b>, the caller requires a nongeneric composition, so the operation should proceed only if <i>pmkRight</i> is a moniker class that this moniker can compose with in some way other than forming a generic composite. If <b>FALSE</b>, the method can create a generic composite if necessary. Most callers should set this parameter to <b>FALSE</b>.</param>
            <param name="ppmkComposite">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> pointer variable that receives the composite moniker pointer. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the resulting moniker; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs or if the monikers compose to nothing (for example, composing an anti-moniker with an item moniker or a file moniker), *<i>ppmkComposite</i> should be set to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>Joining two monikers together is called <i>composition</i>. Sometimes two monikers of the same class can be combined in what is called nongeneric composition. For example, a file moniker representing an incomplete path and another file moniker representing a relative path can be combined to form a single file moniker representing the complete path. Nongeneric composition for a given moniker class can be handled only in the implementation of <b>ComposeWith</b> for that moniker class. Combining two monikers of any class is called <i>generic composition</i>, which can be accomplished through a call to the <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-creategenericcomposite">CreateGenericComposite</a> function. Composition of monikers is an associative operation. That is, if A, B, and C are monikers, then, where Comp() represents the composition operation, Comp( Comp( A, B ), C ) is always equal to Comp( A, Comp( B, C ) ). <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> To combine two monikers, you should call <b>ComposeWith</b> rather than calling the <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-creategenericcomposite">CreateGenericComposite</a> function to give the first moniker a chance to perform a nongeneric composition. An object that provides item monikers to identify its objects would call <b>ComposeWith</b> to provide a moniker that completely identifies the location of the object. This would apply, for example, to a server that supports linking to portions of a document, or to a container that supports linking to embedded objects within its documents. In such a situation, you would do the following: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-composewith#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.Enum(Windows.Win32.Foundation.BOOL,Windows.Win32.System.Com.IEnumMoniker**)">
            <summary>Retrieves a pointer to an enumerator for the components of a composite moniker.</summary>
            <param name="fForward">If <b>TRUE</b>, enumerates the monikers from left to right. If <b>FALSE</b>, enumerates from right to left.</param>
            <param name="ppenumMoniker">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienummoniker">IEnumMoniker</a> pointer variable that receives the interface pointer to the enumerator object for the moniker. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the enumerator object. It is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs or if the moniker has no enumerable components, the implementation sets *<i>ppenumMoniker</i> to <b>NULL</b>.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</returns>
            <remarks>
            <para>This method must supply an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienummoniker">IEnumMoniker</a> pointer to an enumerator that can enumerate the components of a moniker. For example, the implementation of the <b>IMoniker::Enum</b> method for a generic composite moniker creates an enumerator that can determine the individual monikers that make up the composite, while the <b>IMoniker::Enum</b> method for a file moniker creates an enumerator that returns monikers representing each of the components in the path. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Call this method to examine the components that make up a composite moniker. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> If the new moniker class has no discernible internal structure, your implementation of this method can simply return S_OK and set <i>ppenumMoniker</i> to <b>NULL</b>. <h3><a id="Implementation-specific_Notes"></a><a id="implementation-specific_notes"></a><a id="IMPLEMENTATION-SPECIFIC_NOTES"></a>Implementation-specific Notes</h3> </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-enum#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.IsEqual(Windows.Win32.System.Com.IMoniker*)">
            <summary>Determines whether this moniker is identical to the specified moniker.</summary>
            <param name="pmkOtherMoniker">A  pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker to be used for comparison with this one (the one from which this method is called).</param>
            <returns>This method returns S_OK to indicate that the two monikers are identical, and S_FALSE otherwise.</returns>
            <remarks>
            <para>Previous implementations of the running object table (ROT) called this method. The current implementation of the ROT uses the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-irotdata">IROTData</a> interface instead. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Call this method to determine whether two monikers are identical. The reduced form of a moniker is considered different from the unreduced form. You should call the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-reduce">IMoniker::Reduce</a> method before calling <b>IsEqual</b>, because a reduced moniker is in its most specific form. <b>IsEqual</b> may return S_FALSE on two monikers before they are reduced, and S_OK after they are reduced. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> Your implementation should not reduce the current moniker before performing the comparison. It is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-reduce">IMoniker::Reduce</a> to compare reduced monikers. Two monikers that compare as equal must hash to the same value using <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-hash">IMoniker::Hash</a>. <h3><a id="Implementation-specific_Notes"></a><a id="implementation-specific_notes"></a><a id="IMPLEMENTATION-SPECIFIC_NOTES"></a>Implementation-specific Notes</h3> </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-isequal#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.Hash(System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.Hash(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.Hash(System.UInt32*)">
            <summary>Creates a hash value using the internal state of the moniker.</summary>
            <param name="pdwHash">A pointer to a variable that receives the hash value.</param>
            <returns>This method returns S_OK to indicate that the hash value was retrieved successfully.</returns>
            <remarks>
            <para><h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> You can use the value returned by this method to maintain a hash table of monikers. The hash value determines a hash bucket in the table. To search such a table for a specified moniker, calculate its hash value and then compare it to the monikers in that hash bucket using <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-isequal">IMoniker::IsEqual</a>. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> The hash value must be constant for the lifetime of the moniker. Two monikers that compare as equal using <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-isequal">IMoniker::IsEqual</a> must hash to the same value. Marshaling and then unmarshaling a moniker should have no effect on its hash value. Consequently, your implementation of <b>IMoniker::Hash</b> should rely only on the internal state of the moniker, not on its memory address. <h3><a id="Implementation-specific_Notes"></a><a id="implementation-specific_notes"></a><a id="IMPLEMENTATION-SPECIFIC_NOTES"></a>Implementation-specific Notes</h3> </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-hash#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.IsRunning(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,Windows.Win32.System.Com.IMoniker*)">
            <summary>Determines whether the object identified by this moniker is currently loaded and running.</summary>
            <param name="pbc">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
            <param name="pmkToLeft">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker to the left of this moniker if this moniker is part of a composite. This parameter is used primarily by moniker implementers to enable cooperation between the various components of a composite moniker; moniker clients can usually pass <b>NULL</b>.</param>
            <param name="pmkNewlyRunning">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker most recently added to the running object table (ROT). This can be <b>NULL</b>. If non-<b>NULL</b>, the implementation can return the results of calling <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-isequal">IMoniker::IsEqual</a> on the <i>pmkNewlyRunning</i> parameter, passing the current moniker. This parameter is intended to enable <b>IsRunning</b> implementations that are more efficient than just searching the ROT, but the implementation can choose to ignore <i>pmkNewlyRunning</i> without causing any harm.</param>
            <returns>
            <para>This method can return the standard return values E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> If speed is important when you're requesting services from the object identified by the moniker, you may want those services only if the object is already running (because loading an object into the running state may be time-consuming). In such a situation, you should call <b>IsRunning</b> to determine whether the object is running. For the monikers stored within linked objects, <b>IsRunning</b> is primarily called by the default handler's implementation of <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nf-oleidl-iolelink-bindifrunning">IOleLink::BindIfRunning</a>. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> To get a pointer to the ROT, your implementation should call <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-getrunningobjecttable">IBindCtx::GetRunningObjectTable</a> on the <i>pbc</i> parameter. Your implementation can then call <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-isrunning">IRunningObjectTable::IsRunning</a> to determine whether the object identified by the moniker is running. The object identified by the moniker must have registered itself with the ROT when it first began running. <h3><a id="Implementation-specific_Notes"></a><a id="implementation-specific_notes"></a><a id="IMPLEMENTATION-SPECIFIC_NOTES"></a>Implementation-specific Notes</h3> </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-isrunning#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.GetTimeOfLastChange(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.GetTimeOfLastChange(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Runtime.InteropServices.ComTypes.FILETIME*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.GetTimeOfLastChange(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,System.Runtime.InteropServices.ComTypes.FILETIME*)">
            <summary>Retrieves the time at which the object identified by this moniker was last changed.</summary>
            <param name="pbc">A pointer to the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a>.</param>
            <param name="pmkToLeft">If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is primarily used by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should pass <b>NULL</b>.</param>
            <param name="pFileTime">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> structure that receives the time of last change. A value of {0xFFFFFFFF,0x7FFFFFFF} indicates an error (for example, exceeded time limit, information not available).</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>To be precise, the time returned is the earliest time COM can identify after which no change has occurred, so this time may be later than the time of the last change to the object. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> If you're caching information returned by the object identified by the moniker, you may want to ensure that your information is up-to-date. To do so, you would call <b>GetTimeOfLastChange</b> and compare the time returned with the time you last retrieved information from the object.</para>
            <para>For the monikers stored within linked objects, <b>GetTimeOfLastChange</b> is primarily called by the default handler's implementation of <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nf-oleidl-ioleobject-isuptodate">IOleObject::IsUpToDate</a>. Container applications call <b>IOleObject::IsUpToDate</b> to determine if a linked object (or an embedded object containing linked objects) is up-to-date without actually binding to the object. This enables an application to determine quickly which linked objects require updating when the end user opens a document. The application can then bind only those linked objects that need updating (after prompting the end user to determine whether they should be updated) instead of binding every linked object in the document. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> It is important to perform this operation quickly because, for linked objects, this method is called when a user first opens a compound document. Consequently, your <b>GetTimeOfLastChange</b> implementation should not bind to any objects. In addition, your implementation should check the deadline parameter in the bind context and return MK_E_EXCEEDEDDEADLINE if the operation cannot be completed by the specified time. Following are some strategies you can use in your implementations:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-gettimeoflastchange#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.Inverse(Windows.Win32.System.Com.IMoniker**)">
            <summary>Creates a moniker that is the inverse of this moniker. When composed to the right of this moniker or one of similar structure, the moniker will compose to nothing.</summary>
            <param name="ppmk">The address of an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> pointer variable that receives the interface pointer to a moniker that is the inverse of this moniker. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the new inverse moniker. It is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs, the implementation should set *<i>ppmk</i> to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The inverse of a moniker is analogous to the ".." directory in MS-DOS file systems; the ".." directory acts as the inverse to any other directory name, because appending ".." to a directory name results in an empty path. In the same way, the inverse of a moniker typically is also the inverse of all monikers in the same class. However, it is not necessarily the inverse of a moniker of a different class. The inverse of a composite moniker is a composite consisting of the inverses of the components of the original moniker, arranged in reverse order. For example, if the inverse of A is Inv( A ) and the composite of A, B, and C is Comp( A, B, C ), then Inv( Comp( A, B, C ) ) is equal to Comp( Inv( C ), Inv( B ), Inv( A ) ). Not all monikers have inverses. Most monikers that are themselves inverses, such as anti-monikers, do not have inverses. Monikers that have no inverse cannot have relative monikers formed from inside the objects they identify to other objects outside. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> An object that is using a moniker to locate another object usually does not know the class of the moniker it is using. To get the inverse of a moniker, you should always call <b>IMoniker::Inverse</b> rather than the <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-createantimoniker">CreateAntiMoniker</a> function, because you cannot be certain that the moniker you're using considers an anti-moniker to be its inverse.</para>
            <para>The <b>Inverse</b> method is also called by the implementation of the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-relativepathto">IMoniker::RelativePathTo</a> method, to assist in constructing a relative moniker. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> If your monikers have no internal structure, you can call the <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-createantimoniker">CreateAntiMoniker</a> function in to get an anti-moniker in your implementation of <b>IMoniker::Inverse</b>. In your implementation of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-composewith">IMoniker::ComposeWith</a>, you need to check for the inverse you supply in the implementation of <b>Inverse</b>. <h3><a id="Implementation-specific_Notes"></a><a id="implementation-specific_notes"></a><a id="IMPLEMENTATION-SPECIFIC_NOTES"></a>Implementation-specific Notes</h3> </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-inverse#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.CommonPrefixWith(Windows.Win32.System.Com.IMoniker*,Windows.Win32.System.Com.IMoniker**)">
            <summary>Creates a new moniker based on the prefix that this moniker has in common with the specified moniker.</summary>
            <param name="pmkOther">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on another moniker to be compared with this one to determine whether there is a common prefix.</param>
            <param name="ppmkPrefix">The address of an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a>* pointer variable that receives the interface pointer to the moniker that is the common prefix of this moniker and pmkOther. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the resulting moniker; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs or if there is no common prefix, the implementation should set *<i>ppmkPrefix</i> to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><b>CommonPrefixWith</b> creates a new moniker that consists of the common prefixes of the moniker on this moniker object and another moniker. For example, if one moniker represents the path "c:\projects\secret\art\pict1.bmp" and another moniker represents the path "c:\projects\secret\docs\chap1.txt", the common prefix of these two monikers would be a moniker representing the path "c:\projects\secret". <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> The <b>CommonPrefixWith</b> method is primarily called in the implementation of the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-relativepathto">IMoniker::RelativePathTo</a> method. Clients using a moniker to locate an object rarely need to call this method.</para>
            <para>Call this method only if <i>pmkOther</i> and this moniker are both absolute monikers. An absolute moniker is either a file moniker or a generic composite whose leftmost component is a file moniker that represents an absolute path. Do not call this method on relative monikers because it would not produce meaningful results.</para>
            <para><h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> Your implementation should first determine whether <i>pmkOther</i> is a moniker of a class that you recognize and for which you can provide special handling (for example, if it is of the same class as this moniker). If so, your implementation should determine the common prefix of the two monikers. Otherwise, it should pass both monikers in a call to the <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-monikercommonprefixwith">MonikerCommonPrefixWith</a> function, which correctly handles the generic case.</para>
            <para><h3><a id="Implementation-specific_Notes"></a><a id="implementation-specific_notes"></a><a id="IMPLEMENTATION-SPECIFIC_NOTES"></a>Implementation-specific Notes</h3> </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-commonprefixwith#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.RelativePathTo(Windows.Win32.System.Com.IMoniker*,Windows.Win32.System.Com.IMoniker**)">
            <summary>Creates a relative moniker between this moniker and the specified moniker.</summary>
            <param name="pmkOther">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker to which a relative path should be taken.</param>
            <param name="ppmkRelPath">A pointer to an  <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> pointer variable that receives the interface pointer to the relative moniker. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the new moniker; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs, the implementation sets *<i>ppmkRelPath</i> to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>A relative moniker is analogous to a relative path (such as "..\backup"). For example, suppose you have one moniker that represents the path "c:\projects\secret\art\pict1.bmp" and another moniker that represents the path "c:\projects\secret\docs\chap1.txt". Calling <b>RelativePathTo</b> on the first moniker, passing the second one as the <i>pmkOther</i> parameter, would create a relative moniker representing the path "..\docs\chap1.txt". <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Moniker clients typically do not need to call <b>RelativePathTo</b>. This method is called primarily by the default handler for linked objects. Linked objects contain both an absolute and a relative moniker to identify the link source. (This enables link tracking if the user moves a directory tree containing both the container and source files.) The default handler calls this method to create a relative moniker from the container document to the link source. (That is, it calls <b>RelativePathTo</b> on the moniker identifying the container document, passing the moniker identifying the link source as the <i>pmkOther</i> parameter.) If you do call <b>RelativePathTo</b>, call it only on absolute monikers, for example, a file moniker or a composite moniker whose leftmost component is a file moniker, where the file moniker represents an absolute path. Do not call this method on relative monikers. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> Your implementation of <b>RelativePathTo</b> should first determine whether <i>pmkOther</i> is a moniker of a class that you recognize and for which you can provide special handling (for example, if it is of the same class as this moniker). If so, your implementation should determine the relative path. Otherwise, it should pass both monikers in a call to the <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-monikerrelativepathto">MonikerRelativePathTo</a> function, which correctly handles the generic case. The first step in determining a relative path is determining the common prefix of this moniker and <i>pmkOther</i>. The next step is to break this moniker and <i>pmkOther</i> into two parts each, say (P, myTail) and (P, otherTail) respectively, where P is the common prefix. The correct relative path is then the inverse of myTail composed with otherTail: Comp( Inv( myTail ), otherTail ) where Comp() represents the composition operation and Inv() represents the inverse operation. For certain types of monikers, you cannot use your <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-inverse">IMoniker::Inverse</a> method to construct the inverse of myTail. For example, a file moniker returns an anti-moniker as an inverse, while its <b>RelativePathTo</b> method must use one or more file monikers that each represent the path ".." to construct the inverse of myTail. <h3><a id="Implementation-specific_Notes"></a><a id="implementation-specific_notes"></a><a id="IMPLEMENTATION-SPECIFIC_NOTES"></a>Implementation-specific Notes</h3> </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-relativepathto#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.GetDisplayName(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,Windows.Win32.Foundation.PWSTR@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.GetDisplayName(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,Windows.Win32.Foundation.PWSTR*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.GetDisplayName(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,Windows.Win32.Foundation.PWSTR*)">
            <summary>Retrieves the display name for the moniker.</summary>
            <param name="pbc">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on the bind context to be used in this operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
            <param name="pmkToLeft">If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is used primarily by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should pass <b>NULL</b>.</param>
            <param name="ppszDisplayName">The address of a pointer variable that receives a pointer to the display name string for the moniker. The implementation must use <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imalloc-alloc">IMalloc::Alloc</a> to allocate the string returned in <i>ppszDisplayName</i>, and the caller is responsible for calling <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imalloc-free">IMalloc::Free</a> to free it. Both the caller and the implementation of this method use the COM task allocator returned by <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cogetmalloc">CoGetMalloc</a>. If an error occurs, the implementation must set *<i>ppszDisplayName</i> should be set to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><b>GetDisplayName</b> provides a string that is a displayable representation of the moniker. A display name is not a complete representation of a moniker's internal state; it is simply a form that can be read by users. As a result, it is possible (though rare) for two different monikers to have the same display name. While there is no guarantee that the display name of a moniker can be parsed back into that moniker when calling the <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-mkparsedisplayname">MkParseDisplayName</a> function with it, failure to do so is rare. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> It is possible that retrieving a moniker's display name may be an expensive operation. For efficiency, you may want to cache the results of the first successful call to <b>GetDisplayName</b>, rather than making repeated calls. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> If you are writing a moniker class in which the display name does not change, simply cache the display name and supply the cached name when requested. If the display name can change over time, getting the current display name might mean that the moniker has to access the object's storage or bind to the object, either of which can be expensive operations. If this is the case, your implementation of <b>GetDisplayName</b> should return MK_E_EXCEEDEDDEADLINE if the name cannot be retrieved by the time specified in the bind context's <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-bind_opts">BIND_OPTS</a> structure. A moniker that is intended to be part of a generic composite moniker should include any preceding delimiter (such as '\') as part of its display name. For example, the display name returned by an item moniker includes the delimiter specified when it was created with the <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-createitemmoniker">CreateItemMoniker</a> function. The display name for a file moniker does not include a delimiter because file monikers are always expected to be the leftmost component of a composite. <h3><a id="Implementation-specific_Notes"></a><a id="implementation-specific_notes"></a><a id="IMPLEMENTATION-SPECIFIC_NOTES"></a>Implementation-specific Notes</h3> </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-getdisplayname#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.ParseDisplayName(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,Windows.Win32.Foundation.PWSTR,System.UInt32@,Windows.Win32.System.Com.IMoniker**)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.ParseDisplayName(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,Windows.Win32.Foundation.PWSTR,System.UInt32*,Windows.Win32.System.Com.IMoniker**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.ParseDisplayName(Windows.Win32.System.Com.IBindCtx*,Windows.Win32.System.Com.IMoniker*,Windows.Win32.Foundation.PWSTR,System.UInt32*,Windows.Win32.System.Com.IMoniker**)">
            <summary>Converts a display name into a moniker.</summary>
            <param name="pbc">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
            <param name="pmkToLeft">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker that has been built out of the display name up to this point.</param>
            <param name="pszDisplayName">The remaining display name to be parsed.</param>
            <param name="pchEaten">A pointer to a variable that receives the number of characters in <i>pszDisplayName</i> that were consumed in this step.</param>
            <param name="ppmkOut">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> pointer variable that receives the interface pointer to the moniker that was built from <i>pszDisplayName</i>. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the new moniker; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs, the implementation sets *<i>ppmkOut</i> to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return valuesE_OUTOFMEMORY and E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Moniker clients do not typically call <b>ParseDisplayName</b> directly. Instead, they call the <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-mkparsedisplayname">MkParseDisplayName</a> function when they want to convert a display name into a moniker (for example, in implementing the <b>Links</b> dialog box for a container application, or for implementing a macro language that supports references to objects outside the document). That function first parses the initial portion of the display name itself. It then calls <b>ParseDisplayName</b> on the moniker it has just created, passing the remainder of the display name and getting a new moniker in return; this step is repeated until the entire display name has been parsed. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> Your implementation may be able to perform this parsing by itself if your moniker class is designed to designate only certain kinds of objects. Otherwise, you must get an <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nn-oleidl-iparsedisplayname">IParseDisplayName</a> interface pointer for the object identified by the moniker-so-far (that is, the composition of <i>pmkToLeft</i> and this moniker) and then return the results of calling <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nf-oleidl-iparsedisplayname-parsedisplayname">IParseDisplayName::ParseDisplayName</a>. There are different strategies for getting an <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nn-oleidl-iparsedisplayname">IParseDisplayName</a> pointer, as follows: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-parsedisplayname#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.IsSystemMoniker(System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IMoniker.IsSystemMoniker(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.IsSystemMoniker(System.UInt32*)">
            <summary>Determines whether this moniker is one of the system-provided moniker classes.</summary>
            <param name="pdwMksys">A pointer to a variables that receives one of the values from the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-mksys">MKSYS</a> enumeration and refers to one of the COM moniker classes. This parameter cannot be <b>NULL</b>.</param>
            <returns>This method returns S_OK to indicate that the moniker is a system moniker, and S_FALSE otherwise.</returns>
            <remarks>
            <para><h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> New values of the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-mksys">MKSYS</a> enumeration may be defined in the future; therefore, you should explicitly test for each value you are interested in. <h3><a id="Notes_to_Implementers"></a><a id="notes_to_implementers"></a><a id="NOTES_TO_IMPLEMENTERS"></a>Notes to Implementers</h3> Your implementation of this method must return MKSYS_NONE. You cannot use this function to identify your own monikers (for example, in your implementation of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-composewith">IMoniker::ComposeWith</a>). Instead, you should use your moniker's implementation of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ipersist-getclassid">IPersist::GetClassID</a> or use <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-queryinterface(q)">QueryInterface</a> to test for your own private interface. <h3><a id="Implementation-specific_Notes"></a><a id="implementation-specific_notes"></a><a id="IMPLEMENTATION-SPECIFIC_NOTES"></a>Implementation-specific Notes</h3> </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-imoniker-issystemmoniker#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IMoniker.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{0000000f-0000-0000-c000-000000000046}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IRunningObjectTable.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.Register(Windows.Win32.System.Com.ROT_FLAGS,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.IMoniker*,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IRunningObjectTable.Register(Windows.Win32.System.Com.ROT_FLAGS,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.IMoniker*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.Register(Windows.Win32.System.Com.ROT_FLAGS,Windows.Win32.System.Com.IUnknown*,Windows.Win32.System.Com.IMoniker*,System.UInt32*)">
            <summary>Registers an object and its identifying moniker in the running object table (ROT).</summary>
            <param name="grfFlags">
            <para>Specifies whether the ROT's reference to punkObject is weak or strong and controls access to the object through its entry in the ROT. For details, see the Remarks section. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-irunningobjecttable-register#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="punkObject">A pointer to the object that is being registered as running.</param>
            <param name="pmkObjectName">A pointer to the moniker that identifies <i>punkObject</i>.</param>
            <param name="pdwRegister">An identifier for this ROT entry that can be used in subsequent calls to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-revoke">IRunningObjectTable::Revoke</a> or <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-notechangetime">IRunningObjectTable::NoteChangeTime</a>. The caller cannot specify <b>NULL</b> for this parameter. If an error occurs, *<i>pdwRegister</i> is set to zero.</param>
            <returns>
            <para>This method can return the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>This method registers a pointer to an object under a moniker that identifies the object. The moniker is used as the key when the table is searched with <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-getobject">IRunningObjectTable::GetObject</a>. When an object is registered, the ROT always calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the object. For a weak registration (ROTFLAGS_REGISTRATIONKEEPSALIVE not set), the ROT will release the object whenever the last strong reference to the object is released. For a strong registration (ROTFLAGS_REGISTRATIONKEEPSALIVE set), the ROT prevents the object from being destroyed until the object's registration is explicitly revoked. A server registered as either LocalService or RunAs can set the ROTFLAGS_ALLOWANYCLIENT flag in its call to <b>Register</b> to allow any client to connect to it. A server setting this bit must have its executable name in the AppID section of the registry that refers to the AppID for the executable. An "activate as activator" server (not registered as LocalService or RunAs) must not set this flag in its call to <b>Register</b>. For details on installing services, see <a href="https://docs.microsoft.com/windows/desktop/com/installing-as-a-service-application">Installing as a Service Application</a>. Registering a second object with the same moniker, or re-registering the same object with the same moniker, creates a second entry in the ROT. In this case, <b>Register</b> returns MK_S_MONIKERALREADYREGISTERED. Each call to <b>Register</b> must be matched by a call to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-revoke">IRunningObjectTable::Revoke</a> because even duplicate entries have different <i>pdwRegister</i> identifiers. A problem with duplicate registrations is that there is no way to determine which object will be returned if the moniker is specified in a subsequent call to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-isrunning">IRunningObjectTable::IsRunning</a>. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> If you are a moniker provider (that is, you hand out monikers identifying your objects to make them accessible to others), you must call the <b>Register</b> method to register your objects when they begin running. You must also call this method if you rename your objects while they are loaded.</para>
            <para>The most common type of moniker provider is a compound-document link source. This includes server applications that support linking to their documents (or portions of a document) and container applications that support linking to embeddings within their documents. Server applications that do not support linking can also use the ROT to cooperate with container applications that support linking to embeddings.</para>
            <para>If you are writing a server application, you should register an object with the ROT when it begins running, typically in your implementation of <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nf-oleidl-ioleobject-doverb">IOleObject::DoVerb</a>. The object must be registered under its full moniker, which requires getting the moniker of its container document using <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nf-oleidl-ioleclientsite-getmoniker">IOleClientSite::GetMoniker</a>. You should also revoke and re-register the object in your implementation of <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nf-oleidl-ioleobject-setmoniker">IOleObject::SetMoniker</a>, which is called if the container document is renamed. If you are writing a container application that supports linking to embeddings, you should register your document with the ROT when it is loaded. If your document is renamed, you should revoke and re-register it with the ROT and call <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nf-oleidl-ioleobject-setmoniker">IOleObject::SetMoniker</a> for any embedded objects in the document to give them an opportunity to re-register themselves. Objects registered in the ROT must be explicitly revoked when the object is no longer running or when its moniker changes. This revocation is important because there is no way for the system to automatically remove entries from the ROT. You must cache the identifier that is written through pdwRegister and use it in a call to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-revoke">IRunningObjectTable::Revoke</a> to revoke the registration. For a strong registration, a strong reference is released when the objects registration is revoked. As of Windows Server 2003, if there are stale entries that remain in the ROT due to unexpected server problems, COM will automatically remove these stale entries from the ROT. The system's implementation of <b>Register</b> calls <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-reduce">IMoniker::Reduce</a> on the <i>pmkObjectName</i> parameter to ensure that the moniker is fully reduced before registration. If an object is known by more than one fully reduced moniker, it should be registered under all such monikers.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-irunningobjecttable-register#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.Revoke(System.UInt32)">
            <summary>Removes an entry from the running object table (ROT) that was previously registered by a call to IRunningObjectTable::Register.</summary>
            <param name="dwRegister">The identifier of the ROT entry to be revoked.</param>
            <returns>This method can return the standard return values E_INVALIDARG and S_OK.</returns>
            <remarks>
            <para>This method undoes the effect of a call to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-register">IRunningObjectTable::Register</a>, removing both the moniker and the pointer to the object identified by that moniker. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> A moniker provider (hands out monikers identifying its objects to make them accessible to others) must call the <b>Revoke</b> method to revoke the registration of its objects when it stops running. It must have previously called <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-register">IRunningObjectTable::Register</a> and stored the identifier returned by that method; it uses that identifier when calling <b>Revoke</b>. The most common type of moniker provider is a compound-document link source. This includes server applications that support linking to their documents (or portions of a document) and container applications that support linking to embeddings within their documents. Server applications that do not support linking can also use the ROT to cooperate with container applications that support linking to embeddings. If you are writing a container application, you must revoke a document's registration when the document is closed. You must also revoke a document's registration before re-registering it when it is renamed.</para>
            <para>If you are writing a server application, you must revoke an object's registration when the object is closed. You must also revoke an object's registration before re-registering it when its container document is renamed (see <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nf-oleidl-ioleobject-setmoniker">IOleObject::SetMoniker</a>).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-irunningobjecttable-revoke#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.IsRunning(Windows.Win32.System.Com.IMoniker*)">
            <summary>Determines whether the object identified by the specified moniker is currently running.</summary>
            <param name="pmkObjectName">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker.</param>
            <returns>If the object is in the running state, the return value is <b>TRUE</b>. Otherwise, it is <b>FALSE</b>.</returns>
            <remarks>
            <para>This method simply indicates whether a object is running. To retrieve a pointer to a running object, use the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-getobject">IRunningObjectTable::GetObject</a> method. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Generally, you call the <b>IsRunning</b> method only if you are writing your own moniker class (that is, implementing the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface). You typically call this method from your implementation of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-isrunning">IMoniker::IsRunning</a>. However, you should do so only if the <i>pmkToLeft</i> parameter of <b>IMoniker::IsRunning</b> is <b>NULL</b>. Otherwise, you should call <b>IMoniker::IsRunning</b> on your <i>pmkToLeft</i> parameter instead.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-irunningobjecttable-isrunning#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.GetObject(Windows.Win32.System.Com.IMoniker*,Windows.Win32.System.Com.IUnknown**)">
            <summary>Determines whether the object identified by the specified moniker is running, and if it is, retrieves a pointer to that object.</summary>
            <param name="pmkObjectName">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker.</param>
            <param name="ppunkObject">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a> pointer variable that receives the interface pointer to the running object. When successful, the implementation calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the object; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If the object is not running or if an error occurs, the implementation sets *<i>ppunkObject</i> to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>This method checks the ROT for the moniker specified by <i>pmkObjectName</i>. If that moniker had previously been registered with a call to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-register">IRunningObjectTable::Register</a>, this method returns the pointer that was registered at that time. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Generally, you call the <b>IRunningObjectTable::GetObject</b> method only if you are writing your own moniker class (that is, implementing the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface). You typically call this method from your implementation of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-bindtoobject">IMoniker::BindToObject</a>. However, note that not all implementations of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-bindtoobject">IMoniker::BindToObject</a> need to call this method. If you expect your moniker to have a prefix (indicated by a non-<b>NULL</b><i>pmkToLeft</i> parameter to <b>IMoniker::BindToObject</b>), you should not check the ROT. The reason for this is that only complete monikers are registered with the ROT, and if your moniker has a prefix, your moniker is part of a composite and thus not complete. Instead, your moniker should request services from the object identified by the prefix (for example, the container of the object identified by your moniker).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-irunningobjecttable-getobject#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.NoteChangeTime(System.UInt32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IRunningObjectTable.NoteChangeTime(System.UInt32,System.Runtime.InteropServices.ComTypes.FILETIME*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.NoteChangeTime(System.UInt32,System.Runtime.InteropServices.ComTypes.FILETIME*)">
            <summary>Records the time that a running object was last modified. The object must have previously been registered with the running object table (ROT). This method stores the time of last change in the ROT.</summary>
            <param name="dwRegister">The identifier of the ROT entry of the changed object. This value was previously returned by <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-register">IRunningObjectTable::Register</a>.</param>
            <param name="pfiletime">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> structure containing the object's last change time.</param>
            <returns>This method can return the standard return values E_INVALIDARG and S_OK.</returns>
            <remarks>
            <para>The time recorded by this method can be retrieved by calling <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-gettimeoflastchange">IRunningObjectTable::GetTimeOfLastChange</a>. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> A moniker provider (hands out monikers identifying its objects to make them accessible to others) must call the <b>NoteChangeTime</b> method whenever its objects are modified. It must have previously called <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-register">IRunningObjectTable::Register</a> and stored the identifier returned by that method; it uses that identifier when calling <b>NoteChangeTime</b>.</para>
            <para>The most common type of moniker provider is a compound-document link source. This includes server applications that support linking to their documents (or portions of a document) and container applications that support linking to embeddings within their documents. Server applications that do not support linking can also use the ROT to cooperate with container applications that support linking to embeddings.</para>
            <para>When an object is first registered in the ROT, the ROT records its last change time as the value returned by calling <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-gettimeoflastchange">IMoniker::GetTimeOfLastChange</a> on the moniker being registered.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-irunningobjecttable-notechangetime#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.GetTimeOfLastChange(Windows.Win32.System.Com.IMoniker*,System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IRunningObjectTable.GetTimeOfLastChange(Windows.Win32.System.Com.IMoniker*,System.Runtime.InteropServices.ComTypes.FILETIME*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.GetTimeOfLastChange(Windows.Win32.System.Com.IMoniker*,System.Runtime.InteropServices.ComTypes.FILETIME*)">
            <summary>Retrieves the time that an object was last modified.</summary>
            <param name="pmkObjectName">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker.</param>
            <param name="pfiletime">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> structure that receives the object's last change time.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>This method returns the change time that was last reported for this object by a call to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-notechangetime">IRunningObjectTable::NoteChangeTime</a>. If <b>NoteChangeTime</b> has not been called previously, the method returns the time that was recorded when the object was registered. This method is provided to enable checking whether a connection between two objects (represented by one object holding a moniker that identifies the other) is up-to-date. For example, if one object is holding cached information about the other object, this method can be used to check whether the object has been modified since the cache was last updated. See <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-gettimeoflastchange">IMoniker::GetTimeOfLastChange</a>. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Generally, you call <b>GetTimeOfLastChange</b> only if you are writing your own moniker class (that is, implementing the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface). You typically call this method from your implementation of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-gettimeoflastchange">IMoniker::GetTimeOfLastChange</a>. However, you should do so only if the <i>pmkToLeft</i> parameter of <b>IMoniker::GetTimeOfLastChange</b> is <b>NULL</b>. Otherwise, you should call <b>IMoniker::GetTimeOfLastChange</b> on your <i>pmkToLeft</i> parameter instead.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-irunningobjecttable-gettimeoflastchange#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.EnumRunning(Windows.Win32.System.Com.IEnumMoniker**)">
            <summary>Creates and returns a pointer to an enumerator that can list the monikers of all the objects currently registered in the running object table (ROT).</summary>
            <param name="ppenumMoniker">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienummoniker">IEnumMoniker</a> pointer variable that receives the interface pointer to the new enumerator for the ROT. When successful, the implementation calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the enumerator; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs; the implementation sets *<i>ppenumMoniker</i> to <b>NULL</b>.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para><b>IRunningObjectTable::EnumRunning</b> must create and return a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienummoniker">IEnumMoniker</a> interface on an enumerator object. The standard enumerator methods can then be called to enumerate the monikers currently registered in the registry. The enumerator cannot be used to enumerate monikers that are registered in the ROT after the enumerator has been created. The <b>EnumRunning</b> method is intended primarily for the use by the system in implementing the alert object table. Note that OLE 2 does not include an implementation of the alert object table.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-irunningobjecttable-enumrunning#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IRunningObjectTable.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{00000010-0000-0000-c000-000000000046}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumString.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IEnumString.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumString.Next(System.Span{Windows.Win32.Foundation.PWSTR},System.UInt32*)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IEnumString.Next(System.UInt32,Windows.Win32.Foundation.PWSTR*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumString.Next(System.UInt32,Windows.Win32.Foundation.PWSTR*,System.UInt32*)">
            <summary>The IEnumString::Next (objidlbase.h) method retrieves the specified number of items in the enumeration sequence.</summary>
            <param name="celt">The number of items to be retrieved. If there are fewer than the requested number of items left in the sequence, this method retrieves the remaining elements.</param>
            <param name="rgelt">
            <para>An array of enumerated items. The enumerator is responsible for allocating any memory, and the caller is responsible for freeing it. If <i>celt</i> is greater than 1, the caller must also pass a non-NULL pointer passed to <i>pceltFetched</i> to know how many pointers to release.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidlbase/nf-objidlbase-ienumstring-next#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pceltFetched">The number of items that were retrieved. This parameter is always less than or equal to the number of items requested.</param>
            <returns>If the method retrieves the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidlbase/nf-objidlbase-ienumstring-next">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumString.Skip(System.UInt32)">
            <summary>The IEnumString::Skip (objidlbase.h) method skips over the specified number of items in the enumeration sequence.</summary>
            <param name="celt">The number of items to be skipped.</param>
            <returns>If the method skips the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidlbase/nf-objidlbase-ienumstring-skip">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumString.Reset">
            <summary>The IEnumString::Reset (objidlbase.h) method resets the enumeration sequence to the beginning.</summary>
            <returns>The return value is S_OK.</returns>
            <remarks>There is no guarantee that the same set of objects will be enumerated after the reset operation has completed. A static collection is reset to the beginning, but it can be too expensive for some collections, such as files in a directory, to guarantee this condition.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumString.Clone(Windows.Win32.System.Com.IEnumString**)">
            <summary>The IEnumString::Clone (objidlbase.h) method creates a new enumerator that contains the same enumeration state as the current one.</summary>
            <param name="ppenum">A pointer to the cloned enumerator object.</param>
            <returns>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidlbase/nf-objidlbase-ienumstring-clone">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IEnumString.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{00000101-0000-0000-c000-000000000046}</value>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IBindCtx.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.RegisterObjectBound(Windows.Win32.System.Com.IUnknown*)">
            <summary>Registers an object with the bind context to ensure that the object remains active until the bind context is released.</summary>
            <param name="punk">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a> interface on the object that is being registered as bound.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para>Those writing a new moniker class (through an implementation of the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface) should call this method whenever the implementation activates an object. This happens most often in the course of binding a moniker, but it can also happen while retrieving a moniker's display name, parsing a display name into a moniker, or retrieving the time that an object was last modified. <b>RegisterObjectBound</b> calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> to create an additional reference to the object. You must, however, still release your own copy of the pointer. Calling this method twice for the same object creates two references to that object. You can release a reference obtained through a call to this method by calling <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-revokeobjectbound">IBindCtx::RevokeObjectBound</a>. All references held by the bind context are released when the bind context itself is released. Calling <b>RegisterObjectBound</b> to register an object with a bind context keeps the object active until the bind context is released. Reusing a bind context in a subsequent binding operation (either for another piece of the same composite moniker or for a different moniker) can make the subsequent binding operation more efficient because it doesn't have to reload that object. This, however, improves performance only if the subsequent binding operation requires some of the same objects as the original one, so you need to balance the possible performance improvement of reusing a bind context against the costs of keeping objects activated unnecessarily.</para>
            <para><a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> does not provide a method to retrieve a pointer to an object registered using <b>RegisterObjectBound</b>. Assuming the object has registered itself with the running object table, moniker implementations can call <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-getobject">IRunningObjectTable::GetObject</a> to retrieve a pointer to the object.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ibindctx-registerobjectbound#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.RevokeObjectBound(Windows.Win32.System.Com.IUnknown*)">
            <summary>Removes the object from the bind context, undoing a previous call to RegisterObjectBound.</summary>
            <param name="punk">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/com/iunknown-and-interface-inheritance">IUnknown</a> interface on the object to be removed.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>You would rarely call this method. It is documented primarily for completeness.</remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.ReleaseBoundObjects">
            <summary>Releases all pointers to all objects that were previously registered by calls to RegisterObjectBound.</summary>
            <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
            <remarks>
            <para>You rarely call this method directly. The system's <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> implementation calls this method when the pointer to the <b>IBindCtx</b> interface on the bind context is released (the bind context is released). If a bind context is not released, all of the registered objects remain active. If the same object has been registered more than once, this method calls the <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a> method on the object the number of times it was registered.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ibindctx-releaseboundobjects#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.SetBindOptions(Windows.Win32.System.Com.BIND_OPTS@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IBindCtx.SetBindOptions(Windows.Win32.System.Com.BIND_OPTS*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.SetBindOptions(Windows.Win32.System.Com.BIND_OPTS*)">
            <summary>Sets new values for the binding parameters stored in the bind context.</summary>
            <param name="pbindopts">A pointer to a [BIND_OPTS3](/windows/win32/api/objidl/ns-objidl-bind_opts3-r1) structure containing the binding parameters.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para>A bind context contains a block of parameters that are common to most <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> operations. These parameters do not change as the operation moves from piece to piece of a composite moniker. Subsequent binding operations can call <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-getbindoptions">IBindCtx::GetBindOptions</a> to retrieve these parameters. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> This method can be called by moniker clients (those who use monikers to acquire interface pointers to objects). When you first create a bind context by using the <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-createbindctx">CreateBindCtx</a> function, the fields of the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-bind_opts">BIND_OPTS</a> structure are initialized to the following values:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ibindctx-setbindoptions#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.GetBindOptions(Windows.Win32.System.Com.BIND_OPTS@)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IBindCtx.GetBindOptions(Windows.Win32.System.Com.BIND_OPTS*)"/>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.GetBindOptions(Windows.Win32.System.Com.BIND_OPTS*)">
            <summary>Retrieves the binding options stored in this bind context.</summary>
            <param name="pbindopts">A pointer to an initialized structure that receives the current binding parameters on return. See [BIND_OPTS3](/windows/win32/api/objidl/ns-objidl-bind_opts3-r1).</param>
            <returns>This method can return the standard return values E_UNEXPECTED and S_OK.</returns>
            <remarks>
            <para>A bind context contains a block of parameters that are common to most <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> operations and that do not change as the operation moves from piece to piece of a composite moniker. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> You typically call this method if you are writing your own moniker class. (This requires that you implement the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface.) You call this method to retrieve the parameters specified by the moniker client. You must initialize the structure that is filled in by this method. Before calling this method, you must initialize the <b>cbStruct</b> member to the size of the structure.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ibindctx-getbindoptions#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.GetRunningObjectTable(Windows.Win32.System.Com.IRunningObjectTable**)">
            <summary>Retrieves an interface pointer to the running object table (ROT) for the computer on which this bind context is running.</summary>
            <param name="pprot">The address of a <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-irunningobjecttable">IRunningObjectTable</a>* pointer variable that receives the interface pointer to the running object table. If an error occurs, *<i>pprot</i> is set to <b>NULL</b>. If *<i>pprot</i> is non-<b>NULL</b>, the implementation calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the running table object; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</returns>
            <remarks>
            <para>The running object table is a globally accessible table on each computer. It keeps track of all the objects that are currently running on the computer. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Typically, those implementing a new moniker class (through an implementation of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface) call <b>GetRunningObjectTable</b>. It is useful to call this method in an implementation of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-bindtoobject">IMoniker::BindToObject</a> or <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-isrunning">IMoniker::IsRunning</a> to check whether an object is currently running. You can also call this method in the implementation of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-gettimeoflastchange">IMoniker::GetTimeOfLastChange</a> to learn when a running object was last modified. Moniker implementations should call this method instead of using the <b>GetRunningObjectTable</b> function. This makes it possible for future implementations of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> to modify binding behavior.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ibindctx-getrunningobjecttable#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.RegisterObjectParam(Windows.Win32.Foundation.PWSTR,Windows.Win32.System.Com.IUnknown*)">
            <summary>Associates an object with a string key in the bind context's string-keyed table of pointers.</summary>
            <param name="pszKey">The <a href="https://docs.microsoft.com/windows/desktop/shell/str-constants">bind context string key</a> under which the object is being registered. Key string comparison is case-sensitive.</param>
            <param name="punk">
            <para>A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a> interface on the object that is to be registered. The method calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the pointer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ibindctx-registerobjectparam#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para>A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a string known to both parties so that the other party can later retrieve it from the bind context. Binding operations subsequent to the use of this method can use <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-getobjectparam">IBindCtx::GetObjectParam</a> to retrieve the stored pointer. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> <b>RegisterObjectParam</b> is useful to those implementing a new moniker class (through an implementation of <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a>) and to moniker clients (those who use monikers to bind to objects). In implementing a new moniker class, you call this method when an error occurs during moniker binding to inform the caller of the cause of the error. The key that you would obtain with a call to this method would depend on the error condition. Following is a list of common moniker binding errors, describing for each the keys that would be appropriate: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ibindctx-registerobjectparam#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.GetObjectParam(Windows.Win32.Foundation.PWSTR,Windows.Win32.System.Com.IUnknown**)">
            <summary>Retrieves an interface pointer to the object associated with the specified key in the bind context's string-keyed table of pointers.</summary>
            <param name="pszKey">The <a href="https://docs.microsoft.com/windows/desktop/shell/str-constants">bind context string key</a> to be searched for. Key string comparison is case-sensitive.</param>
            <param name="ppunk">The address of an <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a>* pointer variable that receives the interface pointer to the object associated with <i>pszKey</i>. When successful, the implementation calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on *<i>ppunk</i>. It is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs, the implementation sets *<i>ppunk</i> to <b>NULL</b>.</param>
            <returns>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</returns>
            <remarks>
            <para>A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a string known to both parties so that the other party can later retrieve it from the bind context. The pointer this method retrieves must have previously been inserted into the table using the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-registerobjectparam">IBindCtx::RegisterObjectParam</a> method. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> Objects using monikers to locate other objects can call this method when a binding operation fails to get specific information about the error that occurred. Depending on the error, it may be possible to correct the situation and retry the binding operation. See <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-registerobjectparam">IBindCtx::RegisterObjectParam</a> for more information. Moniker implementations can call this method to handle situations where a caller initiates a binding operation and requests specific information. By convention, the implementer should use key names that begin with the string form of the CLSID of a moniker class. (See the <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-stringfromclsid">StringFromCLSID</a> function.)</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ibindctx-getobjectparam#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.EnumObjectParam(Windows.Win32.System.Com.IEnumString**)">
            <summary>Retrieves a pointer to an interface that can be used to enumerate the keys of the bind context's string-keyed table of pointers.</summary>
            <param name="ppenum">The address of an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumstring">IEnumString</a>* pointer variable that receives the interface pointer to the enumerator. If an error occurs, *<i>ppenum</i> is set to <b>NULL</b>. If *<i>ppenum</i> is non-<b>NULL</b>, the implementation calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on *<i>ppenum</i>; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para>The keys returned by the enumerator are the ones previously specified in calls to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-registerobjectparam">IBindCtx::RegisterObjectParam</a>. <h3><a id="Notes_to_Callers"></a><a id="notes_to_callers"></a><a id="NOTES_TO_CALLERS"></a>Notes to Callers</h3> A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a string known to both parties so that the other party can later retrieve it from the bind context. In the system implementation of the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface, this method is not implemented. Therefore, calling this method results in a return value of E_NOTIMPL.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ibindctx-enumobjectparam#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.RevokeObjectParam(Windows.Win32.Foundation.PWSTR)">
            <summary>Removes the specified key and its associated pointer from the bind context's string-keyed table of objects. The key must have previously been inserted into the table with a call to RegisterObjectParam.</summary>
            <param name="pszKey">The <a href="https://docs.microsoft.com/windows/desktop/shell/str-constants">bind context string key</a> to be removed. Key string comparison is case-sensitive.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a string known to both parties so that the other party can later retrieve it from the bind context. This method is used to remove an entry from the table. If the specified key is found, the bind context also releases its reference to the object.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/objidl/nf-objidl-ibindctx-revokeobjectparam#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.IBindCtx.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{0000000e-0000-0000-c000-000000000046}</value>
        </member>
        <member name="T:Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC">
            <summary>Used generically to filter elements.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-comdlg_filterspec">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC.pszName">
            <summary>
            <para>Type: <b>LPCWSTR</b> A pointer to a buffer that contains the friendly name of the filter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-comdlg_filterspec#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC.pszSpec">
            <summary>
            <para>Type: <b>LPCWSTR</b> A pointer to a buffer that contains the filter pattern.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shtypes/ns-shtypes-comdlg_filterspec#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.Shell.SIGDN">
            <summary>Requests the form of an item's display name to retrieve through IShellItem::GetDisplayName and SHGetNameFromIDList.</summary>
            <remarks>
            <para>Different forms of an item's name can be retrieved through the item's properties, including those listed here. Note that not all properties are present on all items, so only those appropriate to the item will appear.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/ne-shobjidl_core-sigdn#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_NORMALDISPLAY">
            <summary>0x00000000. Returns the display name relative to the parent folder. In UI this name is generally ideal for display to the user.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_PARENTRELATIVEPARSING">
            <summary>(int)0x80018001. Returns the parsing name relative to the parent folder. This name is not suitable for use in UI.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_DESKTOPABSOLUTEPARSING">
            <summary>(int)0x80028000. Returns the parsing name relative to the desktop. This name is not suitable for use in UI.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_PARENTRELATIVEEDITING">
            <summary>(int)0x80031001. Returns the editing name relative to the parent folder. In UI this name is suitable for display to the user.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_DESKTOPABSOLUTEEDITING">
            <summary>(int)0x8004c000. Returns the editing name relative to the desktop. In UI this name is suitable for display to the user.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_FILESYSPATH">
            <summary>(int)0x80058000. Returns the item's file system path, if it has one. Only items that report <a href="https://docs.microsoft.com/windows/desktop/shell/sfgao">SFGAO_FILESYSTEM</a> have a file system path. When an item does not have a file system path, a call to <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ishellitem-getdisplayname">IShellItem::GetDisplayName</a> on that item will fail. In UI this name is suitable for display to the user in some cases, but note that it might not be specified for all items.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_URL">
            <summary>(int)0x80068000. Returns the item's URL, if it has one. Some items do not have a URL, and in those cases a call to <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ishellitem-getdisplayname">IShellItem::GetDisplayName</a> will fail. This name is suitable for display to the user in some cases, but note that it might not be specified for all items.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_PARENTRELATIVEFORADDRESSBAR">
            <summary>(int)0x8007c001. Returns the path relative to the parent folder in a friendly format as displayed in an address bar. This name is suitable for display to the user.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_PARENTRELATIVE">
            <summary>(int)0x80080001. Returns the path relative to the parent folder.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_PARENTRELATIVEFORUI">
            <summary>(int)0x80094001. <b>Introduced in Windows 8</b>.</summary>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItem.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.BindToHandler(Windows.Win32.System.Com.IBindCtx*,System.Guid@,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItem.BindToHandler(Windows.Win32.System.Com.IBindCtx*,System.Guid*,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.BindToHandler(Windows.Win32.System.Com.IBindCtx*,System.Guid*,System.Guid*,System.Void**)">
            <summary>Binds to a handler for an item as specified by the handler ID value (BHID).</summary>
            <param name="pbc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on a bind context object. Used to pass optional parameters to the handler. The contents of the bind context are handler-specific. For example, when binding to <b>BHID_Stream</b>, the <a href="https://docs.microsoft.com/windows/desktop/Stg/stgm-constants">STGM</a> flags in the bind context indicate the mode of access desired (read or read/write).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-bindtohandler#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="bhid">Type: <b>REFGUID</b></param>
            <param name="riid">
            <para>Type: <b>REFIID</b> IID of the object type to retrieve.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-bindtohandler#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppv">
            <para>Type: <b>void**</b> When this method returns, contains a pointer of type <i>riid</i> that is returned by the handler specified by <i>rbhid</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-bindtohandler#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-bindtohandler">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.GetParent(Windows.Win32.UI.Shell.IShellItem**)">
            <summary>Gets the parent of an IShellItem object.</summary>
            <param name="ppsi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>**</b> The address of a pointer to the parent of an <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> interface.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-getparent#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> Returns S_OK if successful, or an error value otherwise.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-getparent">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.GetDisplayName(Windows.Win32.UI.Shell.SIGDN,Windows.Win32.Foundation.PWSTR@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItem.GetDisplayName(Windows.Win32.UI.Shell.SIGDN,Windows.Win32.Foundation.PWSTR*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.GetDisplayName(Windows.Win32.UI.Shell.SIGDN,Windows.Win32.Foundation.PWSTR*)">
            <summary>Gets the display name of the IShellItem object.</summary>
            <param name="sigdnName">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/ne-shobjidl_core-sigdn">SIGDN</a></b> One of the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/ne-shobjidl_core-sigdn">SIGDN</a> values that indicates how the name should look.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-getdisplayname#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppszName">
            <para>Type: <b>LPWSTR*</b> A value that, when this function returns successfully, receives the address of a pointer to the retrieved display name.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-getdisplayname#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>It is the responsibility of the caller to free the string pointed to by <i>ppszName</i> when it is no longer needed. Call <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cotaskmemfree">CoTaskMemFree</a> on *<i>ppszName</i> to free the memory.</remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.GetAttributes(Windows.Win32.System.SystemServices.SFGAO_FLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItem.GetAttributes(Windows.Win32.System.SystemServices.SFGAO_FLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.GetAttributes(Windows.Win32.System.SystemServices.SFGAO_FLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS*)">
            <summary>Gets a requested set of attributes of the IShellItem object.</summary>
            <param name="sfgaoMask">
            <para>Type: <b>SFGAOF</b> Specifies the attributes to retrieve. One or more of the <a href="https://docs.microsoft.com/windows/desktop/shell/sfgao">SFGAO</a> values. Use a bitwise OR operator to determine the attributes to retrieve.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-getattributes#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="psfgaoAttribs">
            <para>Type: <b>SFGAOF*</b> A pointer to a value that, when this method returns successfully, contains the requested attributes. One or more of the <a href="https://docs.microsoft.com/windows/desktop/shell/sfgao">SFGAO</a> values. Only those attributes specified by <i>sfgaoMask</i> are returned; other attribute values are undefined.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-getattributes#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> Returns S_OK if the attributes returned exactly match those requested in <i>sfgaoMask</i>, S_FALSE if the attributes do not exactly match, or a standard COM error value otherwise.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-getattributes">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.Compare(Windows.Win32.UI.Shell.IShellItem*,System.UInt32,System.Int32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItem.Compare(Windows.Win32.UI.Shell.IShellItem*,System.UInt32,System.Int32*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.Compare(Windows.Win32.UI.Shell.IShellItem*,System.UInt32,System.Int32*)">
            <summary>Compares two IShellItem objects.</summary>
            <param name="psi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> object to compare with the existing <b>IShellItem</b> object.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-compare#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hint">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/shobjidl_core/ne-shobjidl_core-_sichintf">SICHINTF</a></b> One of the <a href="https://docs.microsoft.com/windows/win32/api/shobjidl_core/ne-shobjidl_core-_sichintf">SICHINTF</a> values that determines how to perform the comparison. See <b>SICHINTF</b> for the list of possible values for this parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-compare#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="piOrder">
            <para>Type: <b>int*</b> This parameter receives the result of the comparison. If the two items are the same this parameter equals zero; if they are different the parameter is nonzero.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-compare#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> Returns S_OK if the items are the same, S_FALSE if they are different, or an error value otherwise.</para>
            </returns>
            <remarks>
            <para>The data type used in the second parameter, SICHINTF, is defined as:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitem-compare#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.IShellItem.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{43826d1e-e718-42ee-bc55-a1e261c37bfe}</value>
        </member>
        <member name="T:Windows.Win32.UI.Shell.FDAP">
            <summary>Specifies list placement.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/ne-shobjidl_core-fdap">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.FDAP.FDAP_BOTTOM">
            <summary>The place is added to the bottom of the default list.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.FDAP.FDAP_TOP">
            <summary>The place is added to the top of the default list.</summary>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemFilter.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemFilter.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemFilter.IncludeItem(Windows.Win32.UI.Shell.IShellItem*)">
            <summary>Sets a given Shell item status to inclusion in the view.</summary>
            <param name="psi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>*</b> A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">Shell item</a> that is to be included in the view.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemfilter-includeitem#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>The host calls this method for each item in the folder. Returns S_OK to have the item enumerated for inclusion in the view. Returns S_FALSE to prevent the item from being enumerated for inclusion in the view.</remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemFilter.GetEnumFlagsForItem(Windows.Win32.UI.Shell.IShellItem*,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemFilter.GetEnumFlagsForItem(Windows.Win32.UI.Shell.IShellItem*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemFilter.GetEnumFlagsForItem(Windows.Win32.UI.Shell.IShellItem*,System.UInt32*)">
            <summary>Allows a client to specify which classes of objects in a Shell item should be enumerated for inclusion in the view.</summary>
            <param name="psi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>*</b> A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">Shell item</a> for which the <a href="https://docs.microsoft.com/windows/win32/api/shobjidl_core/ne-shobjidl_core-_shcontf">SHCONTF</a> enum flags are to be retrieved.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemfilter-getenumflagsforitem#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pgrfFlags">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/shobjidl_core/ne-shobjidl_core-_shcontf">SHCONTF</a>*</b> A pointer to the <a href="https://docs.microsoft.com/windows/win32/api/shobjidl_core/ne-shobjidl_core-_shcontf">SHCONTF</a> enum flags for the given <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">Shell item</a> that specifies which classes of objects to enumerate for inclusion in the view.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemfilter-getenumflagsforitem#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemfilter-getenumflagsforitem">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.IShellItemFilter.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{2659b475-eeb8-48b7-8f07-b378810f48cf}</value>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IModalWindow.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IModalWindow.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IModalWindow.Show(Windows.Win32.Foundation.HWND)">
            <summary>Launches the modal window.</summary>
            <param name="hwndOwner">
            <para>Type: <b>HWND</b> The handle of the owner window. This value can be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-imodalwindow-show#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-imodalwindow-show">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.IModalWindow.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{b4db1657-70d7-485e-8e3e-6fcb5a5c1802}</value>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetFileTypes(System.ReadOnlySpan{Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC})">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.SetFileTypes(System.UInt32,Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetFileTypes(System.UInt32,Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC*)">
            <summary>Sets the file types that the dialog can open or save.</summary>
            <param name="cFileTypes">
            <para>Type: <b>UINT</b> The number of elements in the array specified by <i>rgFilterSpec</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfiletypes#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="rgFilterSpec">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/shtypes/ns-shtypes-comdlg_filterspec">COMDLG_FILTERSPEC</a>*</b> A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/shtypes/ns-shtypes-comdlg_filterspec">COMDLG_FILTERSPEC</a> structures, each representing a file type.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfiletypes#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>When using the <b>Open</b> dialog, the file types declared there are used to filter the view. When using the <b>Save</b> dialog, these values determine which file name extension is appended to the file name. This method must be called before the dialog is shown and can only be called once for each dialog instance. File types cannot be modified once the Common Item dialog box is displayed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfiletypes#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetFileTypeIndex(System.UInt32)">
            <summary>Sets the file type that appears as selected in the dialog.</summary>
            <param name="iFileType">
            <para>Type: <b>UINT</b> The index of the file type in the file type array passed to <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfiletypes">IFileDialog::SetFileTypes</a> in its <i>cFileTypes</i> parameter. Note that this is a one-based index, not zero-based.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfiletypeindex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>This method must be called before the dialog is showing.</remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.GetFileTypeIndex(System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.GetFileTypeIndex(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.GetFileTypeIndex(System.UInt32*)">
            <summary>Gets the currently selected file type.</summary>
            <param name="piFileType">
            <para>Type: <b>UINT*</b> A pointer to a <b>UINT</b> value that receives the index of the selected file type in the file type array passed to <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfiletypes">IFileDialog::SetFileTypes</a> in its <i>cFileTypes</i> parameter. <div class="alert"><b>Note</b>  This is a one-based index rather than zero-based.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-getfiletypeindex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks><b>IFileDialog::GetFileTypeIndex</b> can be called either while the dialog is open or after it has closed.</remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.Advise(Windows.Win32.UI.Shell.IFileDialogEvents*,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.Advise(Windows.Win32.UI.Shell.IFileDialogEvents*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.Advise(Windows.Win32.UI.Shell.IFileDialogEvents*,System.UInt32*)">
            <summary>Assigns an event handler that listens for events coming from the dialog.</summary>
            <param name="pfde">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ifiledialogevents">IFileDialogEvents</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ifiledialogevents">IFileDialogEvents</a> implementation that will receive events from the dialog.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-advise#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pdwCookie">
            <para>Type: <b>DWORD*</b> A pointer to a <b>DWORD</b> that receives a value identifying this event handler. When the client is finished with the dialog, that client must call the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-unadvise">IFileDialog::Unadvise</a> method with this value.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-advise#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-advise">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.Unadvise(System.UInt32)">
            <summary>Removes an event handler that was attached through the IFileDialog::Advise method.</summary>
            <param name="dwCookie">
            <para>Type: <b>DWORD</b> The <b>DWORD</b> value that represents the event handler. This value is obtained through the <i>pdwCookie</i> parameter of the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-advise">IFileDialog::Advise</a> method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-unadvise#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-unadvise">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetOptions(Windows.Win32.UI.Shell.FILEOPENDIALOGOPTIONS)">
            <summary>Sets flags to control the behavior of the dialog.</summary>
            <param name="fos">
            <para>Type: <b>FILEOPENDIALOGOPTIONS</b> One or more of the <a href="https://docs.microsoft.com/windows/win32/api/shobjidl_core/ne-shobjidl_core-_fileopendialogoptions">FILEOPENDIALOGOPTIONS</a> values.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setoptions#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>Generally, this method should take the value that was retrieved by <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-getoptions">IFileDialog::GetOptions</a> and modify it to include or exclude options by setting the appropriate flags.</remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.GetOptions(Windows.Win32.UI.Shell.FILEOPENDIALOGOPTIONS@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.GetOptions(Windows.Win32.UI.Shell.FILEOPENDIALOGOPTIONS*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.GetOptions(Windows.Win32.UI.Shell.FILEOPENDIALOGOPTIONS*)">
            <summary>Gets the current flags that are set to control dialog behavior.</summary>
            <param name="pfos">
            <para>Type: <b>FILEOPENDIALOGOPTIONS*</b> When this method returns successfully, points to a value made up of one or more of the <a href="https://docs.microsoft.com/windows/win32/api/shobjidl_core/ne-shobjidl_core-_fileopendialogoptions">FILEOPENDIALOGOPTIONS</a> values.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-getoptions#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-getoptions">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetDefaultFolder(Windows.Win32.UI.Shell.IShellItem*)">
            <summary>Sets the folder used as a default if there is not a recently used folder value available.</summary>
            <param name="psi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>*</b> A pointer to the interface that represents the folder.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setdefaultfolder#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setdefaultfolder">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetFolder(Windows.Win32.UI.Shell.IShellItem*)">
            <summary>Sets a folder that is always selected when the dialog is opened, regardless of previous user action.</summary>
            <param name="psi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>*</b> A pointer to the interface that represents the folder.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfolder#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para>This folder overrides any "most recently used" folder. If this method is called while the dialog is displayed, it causes the dialog to navigate to the specified folder. In general, we do not recommended the use of this method. If you call <b>SetFolder</b> before you display the dialog box, the most recent location that the user saved to or opened from is not shown. Unless there is a very specific reason for this behavior, it is not a good or expected user experience and should therefore be avoided. In almost all instances, <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setdefaultfolder">IFileDialog::SetDefaultFolder</a> is the better method. As of Windows 7, if the path of the folder specified through <i>psi</i> is the default path of a <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb776911(v=vs.85)">known folder</a>, the known folder's current path is used in the dialog. That path might not be the same as the path specified in <i>psi</i>; for instance, if the known folder has been redirected. If the known folder is a library (virtual folders Documents, Music, Pictures, and Videos), the library's path is used in the dialog. If the specified library is hidden (as they are by default as of Windows 8.1), the library's default save location is used in the dialog, such as the Microsoft OneDrive Documents folder for the Documents library. Because of these mappings, the folder location used in the dialog might not be exactly as you specified when you called this method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfolder#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.GetFolder(Windows.Win32.UI.Shell.IShellItem**)">
            <summary>Gets either the folder currently selected in the dialog, or, if the dialog is not currently displayed, the folder that is to be selected when the dialog is opened.</summary>
            <param name="ppsi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>**</b> The address of a pointer to the interface that represents the folder.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-getfolder#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>The calling application is responsible for releasing the retrieved <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> when it is no longer needed.</remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.GetCurrentSelection(Windows.Win32.UI.Shell.IShellItem**)">
            <summary>Gets the user's current selection in the dialog.</summary>
            <param name="ppsi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>**</b> The address of a pointer to the interface that represents the item currently selected in the dialog. This item can be a file or folder selected in the view window, or something that the user has entered into the dialog's edit box. The latter case may require a parsing operation (cancelable by the user) that blocks the current thread.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-getcurrentselection#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>The calling application is responsible for releasing the retrieved <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> when it is no longer needed.</remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetFileName(System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.SetFileName(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetFileName(Windows.Win32.Foundation.PCWSTR)">
            <summary>Sets the file name that appears in the File name edit box when that dialog box is opened.</summary>
            <param name="pszName">
            <para>Type: <b>LPCWSTR</b> A pointer to the name of the file.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfilename">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.GetFileName(Windows.Win32.Foundation.PWSTR@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.GetFileName(Windows.Win32.Foundation.PWSTR*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.GetFileName(Windows.Win32.Foundation.PWSTR*)">
            <summary>Retrieves the text currently entered in the dialog's File name edit box.</summary>
            <param name="pszName">
            <para>Type: <b>WCHAR**</b> The address of a pointer to a buffer that, when this method returns successfully, receives the text.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-getfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para>The text in the <b>File name</b> edit box does not necessarily reflect the item the user chose.  To get the item the user chose, use <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-getresult">IFileDialog::GetResult</a>. The calling application is responsible for releasing the retrieved buffer by using the <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cotaskmemfree">CoTaskMemFree</a> function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-getfilename#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetTitle(System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.SetTitle(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetTitle(Windows.Win32.Foundation.PCWSTR)">
            <summary>Sets the title of the dialog.</summary>
            <param name="pszTitle">
            <para>Type: <b>LPCWSTR</b> A pointer to a buffer that contains the title text.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-settitle#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-settitle">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetOkButtonLabel(System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.SetOkButtonLabel(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetOkButtonLabel(Windows.Win32.Foundation.PCWSTR)">
            <summary>Sets the text of the Open or Save button.</summary>
            <param name="pszText">
            <para>Type: <b>LPCWSTR</b> A pointer to a buffer that contains the button text.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setokbuttonlabel#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setokbuttonlabel">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetFileNameLabel(System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.SetFileNameLabel(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetFileNameLabel(Windows.Win32.Foundation.PCWSTR)">
            <summary>Sets the text of the label next to the file name edit box.</summary>
            <param name="pszLabel">
            <para>Type: <b>LPCWSTR</b> A pointer to a buffer that contains the label text.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfilenamelabel#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfilenamelabel">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.GetResult(Windows.Win32.UI.Shell.IShellItem**)">
            <summary>Gets the choice that the user made in the dialog.</summary>
            <param name="ppsi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>**</b> The address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> that represents the user's choice.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-getresult#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><b>IFileDialog::GetResult</b> can be called after the dialog has closed or during the handling of an <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onfileok">OnFileOk</a> event. Calling this method at any other time will fail. If multiple items were chosen, this method will fail. In the case of multiple items, call <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifileopendialog-getresults">GetResults</a></para>
            <para><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-imodalwindow-show">Show</a> must return a success code for a result to be available to <b>IFileDialog::GetResult</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-getresult#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.AddPlace(Windows.Win32.UI.Shell.IShellItem*,Windows.Win32.UI.Shell.FDAP)">
            <summary>Adds a folder to the list of places available for the user to open or save items.</summary>
            <param name="psi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> that represents the folder to be made available to the user. This can only be a folder.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-addplace#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="fdap">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/ne-shobjidl_core-fdap">FDAP</a></b> Specifies where the folder is placed within the list. See <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/ne-shobjidl_core-fdap">FDAP</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-addplace#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-shsettemporarypropertyforitem">SHSetTemporaryPropertyForItem</a> can be used to set a temporary <a href="https://docs.microsoft.com/windows/desktop/properties/props-system-itemnamedisplay">PKEY_ItemNameDisplay</a> property on the item represented by the <i>psi</i> parameter. The value for this property will be used in place of the item's UI name.</remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetDefaultExtension(System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.SetDefaultExtension(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetDefaultExtension(Windows.Win32.Foundation.PCWSTR)">
            <summary>Sets the default extension to be added to file names.</summary>
            <param name="pszDefaultExtension">
            <para>Type: <b>LPCWSTR</b> A pointer to a buffer that contains the extension text. This string should not include a leading period. For example, "jpg" is correct, while ".jpg" is not.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setdefaultextension#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>If this method is called before showing the dialog, the dialog will update the default extension automatically when the user chooses a new file type (see <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfiletypes">SetFileTypes</a>).</remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.Close(Windows.Win32.Foundation.HRESULT)">
            <summary>Closes the dialog.</summary>
            <param name="hr">
            <para>Type: <b>HRESULT</b> The code that will be returned by <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-imodalwindow-show">Show</a> to indicate that the dialog was closed before a selection was made.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-close#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para>An application can call this method from a callback method or function while the dialog is open. The dialog will close and the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-imodalwindow-show">Show</a> method will return with the <b>HRESULT</b> specified in <i>hr</i>. If this method is called, there is no result available for the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-getresult">IFileDialog::GetResult</a> or <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifileopendialog-getresults">GetResults</a> methods, and they will fail if called.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-close#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetClientGuid(System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialog.SetClientGuid(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetClientGuid(System.Guid*)">
            <summary>Enables a calling application to associate a GUID with a dialog's persisted state.</summary>
            <param name="guid">
            <para>Type: <b>REFGUID</b> The GUID to associate with this dialog state.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setclientguid#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para>A dialog's state can include factors such as the last visited folder and the position and size of the dialog. Typically, this state is persisted based on the name of the executable file. By specifying a GUID, an application can have different persisted states for different versions of the dialog within the same application (for example, an import dialog and an open dialog).</para>
            <para><b>IFileDialog::SetClientGuid</b> should be called immediately after creation of the dialog object.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setclientguid#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.ClearClientData">
            <summary>Instructs the dialog to clear all persisted state information.</summary>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>Persisted information can be associated with an application or a GUID. If a GUID was set by using <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setclientguid">IFileDialog::SetClientGuid</a>, that GUID is used to clear persisted information.</remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialog.SetFilter(Windows.Win32.UI.Shell.IShellItemFilter*)">
            <summary>SetFilter is no longer available for use as of Windows 7.</summary>
            <param name="pFilter">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitemfilter">IShellItemFilter</a>*</b> A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitemfilter">IShellItemFilter</a> that is to be set.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfilter#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para>This method can be used if the application needs to perform special filtering to remove some items from the dialog box's view.  <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ishellitemfilter-includeitem">IncludeItem</a> will be called for each item that would normally be included in the view. <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ishellitemfilter-getenumflagsforitem">GetEnumFlagsForItem</a> is not used. To filter by file type, <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfiletypes">IFileDialog::SetFileTypes</a> should be used, because in folders with a large number of items it may offer better performance than applying an <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitemfilter">IShellItemFilter</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfilter#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.IFileDialog.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{42f85136-db7e-439c-85f1-e4075d135fc8}</value>
        </member>
        <member name="T:Windows.Win32.UI.Shell.FDE_SHAREVIOLATION_RESPONSE">
            <summary>Specifies the values used by the IFileDialogEvents::OnShareViolation method to indicate an application's response to a sharing violation that occurs when a file is opened or saved.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/ne-shobjidl_core-fde_shareviolation_response">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.FDE_SHAREVIOLATION_RESPONSE.FDESVR_DEFAULT">
            <summary>The application has not handled the event. The dialog displays a UI that indicates that the file is in use and a different file must be chosen.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.FDE_SHAREVIOLATION_RESPONSE.FDESVR_ACCEPT">
            <summary>The application has determined that the file should be returned from the dialog.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.FDE_SHAREVIOLATION_RESPONSE.FDESVR_REFUSE">
            <summary>The application has determined that the file should not be returned from the dialog.</summary>
        </member>
        <member name="T:Windows.Win32.UI.Shell.FDE_OVERWRITE_RESPONSE">
            <summary>Specifies the values used by the IFileDialogEvents::OnOverwrite method to indicate an application's response to an overwrite request during a save operation using the common file dialog.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/ne-shobjidl_core-fde_overwrite_response">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.FDE_OVERWRITE_RESPONSE.FDEOR_DEFAULT">
            <summary>The application has not handled the event. The dialog displays a UI asking the user whether the file should be overwritten and returned from the dialog.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.FDE_OVERWRITE_RESPONSE.FDEOR_ACCEPT">
            <summary>The application has determined that the file should be returned from the dialog.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.FDE_OVERWRITE_RESPONSE.FDEOR_REFUSE">
            <summary>The application has determined that the file should not be returned from the dialog.</summary>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialogEvents.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialogEvents.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialogEvents.OnFileOk(Windows.Win32.UI.Shell.IFileDialog*)">
            <summary>Called just before the dialog is about to return with a result.</summary>
            <param name="pfd">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ifiledialog">IFileDialog</a>*</b> A pointer to the interface that represents the dialog.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onfileok#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> Implementations should return <b>S_OK</b> to accept the current result in the dialog or <b>S_FALSE</b> to refuse it. In the case of <b>S_FALSE</b>, the dialog should remain open.</para>
            </returns>
            <remarks>
            <para>When this method is called, the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-getresult">IFileDialog::GetResult</a> and <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifileopendialog-getresults">GetResults</a> methods can be called. The application can use this callback method to perform additional validation before the dialog closes, or to prevent the dialog from closing. If the application prevents the dialog from closing, it should display a UI to indicate a cause. To obtain a parent <b>HWND</b> for the UI, obtain the <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nn-oleidl-iolewindow">IOleWindow</a> interface through <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-queryinterface(q)">IFileDialog::QueryInterface</a> and call <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nf-oleidl-iolewindow-getwindow">IOleWindow::GetWindow</a>. An application can also use this method to perform all of its work surrounding the opening or saving of files.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onfileok#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialogEvents.OnFolderChanging(Windows.Win32.UI.Shell.IFileDialog*,Windows.Win32.UI.Shell.IShellItem*)">
            <summary>Called before IFileDialogEvents::OnFolderChange. This allows the implementer to stop navigation to a particular location.</summary>
            <param name="pfd">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ifiledialog">IFileDialog</a>*</b> A pointer to the interface that represents the dialog.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onfolderchanging#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="psiFolder">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>*</b> A pointer to an interface that represents the folder to which the dialog is about to navigate.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onfolderchanging#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> Returns S_OK if successful, or an error value otherwise. A return value of S_OK or E_NOTIMPL indicates that the folder change can proceed.</para>
            </returns>
            <remarks>
            <para>The calling application can call <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setfolder">IFileDialog::SetFolder</a> during this callback to redirect navigation to an alternate folder. The actual navigation does not occur until <b>IFileDialogEvents::OnFolderChanging</b> has returned. If the calling application simply prevents navigation to a particular folder, UI should be displayed with an explanation of the restriction. To obtain a parent <b>HWND</b> for the UI, obtain the <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nn-oleidl-iolewindow">IOleWindow</a> interface through <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ifiledialog">IFileDialog</a> and call <a href="https://docs.microsoft.com/windows/desktop/api/oleidl/nf-oleidl-iolewindow-getwindow">IOleWindow::GetWindow</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onfolderchanging#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialogEvents.OnFolderChange(Windows.Win32.UI.Shell.IFileDialog*)">
            <summary>Called when the user navigates to a new folder.</summary>
            <param name="pfd">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ifiledialog">IFileDialog</a>*</b> A pointer to the interface that represents the dialog.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onfolderchange#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks><b>IFileDialogEvents::OnFolderChange</b> is called when the dialog is opened.</remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialogEvents.OnSelectionChange(Windows.Win32.UI.Shell.IFileDialog*)">
            <summary>Called when the user changes the selection in the dialog's view.</summary>
            <param name="pfd">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ifiledialog">IFileDialog</a>*</b> A pointer to the interface that represents the dialog.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onselectionchange#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onselectionchange">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialogEvents.OnShareViolation(Windows.Win32.UI.Shell.IFileDialog*,Windows.Win32.UI.Shell.IShellItem*,Windows.Win32.UI.Shell.FDE_SHAREVIOLATION_RESPONSE@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialogEvents.OnShareViolation(Windows.Win32.UI.Shell.IFileDialog*,Windows.Win32.UI.Shell.IShellItem*,Windows.Win32.UI.Shell.FDE_SHAREVIOLATION_RESPONSE*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialogEvents.OnShareViolation(Windows.Win32.UI.Shell.IFileDialog*,Windows.Win32.UI.Shell.IShellItem*,Windows.Win32.UI.Shell.FDE_SHAREVIOLATION_RESPONSE*)">
            <summary>Enables an application to respond to sharing violations that arise from Open or Save operations.</summary>
            <param name="pfd">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ifiledialog">IFileDialog</a>*</b> A pointer to the interface that represents the dialog.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onshareviolation#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="psi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>*</b> A pointer to the interface that represents the item that has the sharing violation.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onshareviolation#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pResponse">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/ne-shobjidl_core-fde_shareviolation_response">FDE_SHAREVIOLATION_RESPONSE</a>*</b> A pointer to a value from the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/ne-shobjidl_core-fde_shareviolation_response">FDE_SHAREVIOLATION_RESPONSE</a> enumeration indicating the response to the sharing violation.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onshareviolation#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> The implementer should return E_NOTIMPL if this method is not implemented; S_OK or an appropriate error code otherwise.</para>
            </returns>
            <remarks>
            <para>The <b>FOS_SHAREAWARE</b> flag must be set through <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setoptions">IFileDialog::SetOptions</a> before this method is called. A sharing violation could possibly arise when the application attempts to open a file, because the file could have been locked between the time that the dialog tested it and the application opened it.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onshareviolation#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialogEvents.OnTypeChange(Windows.Win32.UI.Shell.IFileDialog*)">
            <summary>Called when the dialog is opened to notify the application of the initial chosen filetype.</summary>
            <param name="pfd">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ifiledialog">IFileDialog</a>*</b> A pointer to the interface that represents the dialog.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-ontypechange#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>This method is called when the dialog is opened to notify the application of the initially chosen filetype. If the application has code in <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ifiledialogevents">IFileDialogEvents</a> that responds to type changes, it can respond to the type. For example, it could hide certain controls. The application controls the initial file type and could do its own checks, so this method is provided as a convenience.</remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialogEvents.OnOverwrite(Windows.Win32.UI.Shell.IFileDialog*,Windows.Win32.UI.Shell.IShellItem*,Windows.Win32.UI.Shell.FDE_OVERWRITE_RESPONSE@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileDialogEvents.OnOverwrite(Windows.Win32.UI.Shell.IFileDialog*,Windows.Win32.UI.Shell.IShellItem*,Windows.Win32.UI.Shell.FDE_OVERWRITE_RESPONSE*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileDialogEvents.OnOverwrite(Windows.Win32.UI.Shell.IFileDialog*,Windows.Win32.UI.Shell.IShellItem*,Windows.Win32.UI.Shell.FDE_OVERWRITE_RESPONSE*)">
            <summary>Called from the save dialog when the user chooses to overwrite a file.</summary>
            <param name="pfd">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ifiledialog">IFileDialog</a>*</b> A pointer to the interface that represents the dialog.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onoverwrite#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="psi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>*</b> A pointer to the interface that represents the item that will be overwritten.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onoverwrite#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pResponse">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/ne-shobjidl_core-fde_overwrite_response">FDE_OVERWRITE_RESPONSE</a>*</b> A pointer to a value from the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/ne-shobjidl_core-fde_overwrite_response">FDE_OVERWRITE_RESPONSE</a> enumeration indicating the response to the potential overwrite action.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifiledialogevents-onoverwrite#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> The implementer should return E_NOTIMPL if this method is not implemented; S_OK or an appropriate error code otherwise.</para>
            </returns>
            <remarks>The <b>FOS_OVERWRITEPROMPT</b> flag must be set through <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ifiledialog-setoptions">IFileDialog::SetOptions</a> before this method is called.</remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.IFileDialogEvents.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{973510db-7d7f-452b-8975-74a85828d354}</value>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IEnumShellItems.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IEnumShellItems.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IEnumShellItems.Next(System.UInt32,Windows.Win32.UI.Shell.IShellItem**,System.UInt32*)">
            <summary>Gets an array of one or more IShellItem interfaces from the enumeration.</summary>
            <param name="celt">
            <para>Type: <b>ULONG</b> The number of elements in the array referenced by the <i>rgelt</i> parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ienumshellitems-next#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="rgelt">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>**</b> The address of an array of pointers to <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> interfaces that receive the enumerated item or items. The calling application is responsible for freeing the <b>IShellItem</b> interfaces by calling the <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> method.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ienumshellitems-next#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pceltFetched">
            <para>Type: <b>ULONG*</b> A pointer to a value that receives the number of <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> interfaces successfully retrieved. The count can be smaller than the value specified in the <i>celt</i> parameter. This parameter can be <b>NULL</b> on entry only if <i>celt</i> is one, because in that case the method can only retrieve one item and return <b>S_OK</b>, or zero items and return <b>S_FALSE</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ienumshellitems-next#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> This method can return one of these values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ienumshellitems-next">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IEnumShellItems.Skip(System.UInt32)">
            <summary>Skips a given number of IShellItem interfaces in the enumeration. Used when retrieving interfaces.</summary>
            <param name="celt">
            <para>Type: <b>ULONG</b> The number of <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> interfaces to skip.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ienumshellitems-skip#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ienumshellitems-skip">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IEnumShellItems.Reset">
            <summary>Resets the internal count of retrieved IShellItem interfaces in the enumeration.</summary>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ienumshellitems-reset">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IEnumShellItems.Clone(Windows.Win32.UI.Shell.IEnumShellItems**)">
            <summary>Gets a copy of the current enumeration.</summary>
            <param name="ppenum">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ienumshellitems">IEnumShellItems</a>**</b> The address of a pointer that receives a copy of this enumeration.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ienumshellitems-clone#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ienumshellitems-clone">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.IEnumShellItems.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{70629033-e363-4a28-a567-0db78006e6d7}</value>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemArray.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemArray.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemArray.BindToHandler(Windows.Win32.System.Com.IBindCtx*,System.Guid@,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemArray.BindToHandler(Windows.Win32.System.Com.IBindCtx*,System.Guid*,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemArray.BindToHandler(Windows.Win32.System.Com.IBindCtx*,System.Guid*,System.Guid*,System.Void**)">
            <summary>Binds to an object by means of the specified handler.</summary>
            <param name="pbc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on a bind context object.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-bindtohandler#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="bhid">Type: <b>REFGUID</b></param>
            <param name="riid">
            <para>Type: <b>REFIID</b> The IID of the object type to retrieve.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-bindtohandler#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppvOut">
            <para>Type: <b>void**</b> When this methods returns, contains the object specified in <i>riid</i> that is returned by the handler specified by <i>rbhid</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-bindtohandler#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-bindtohandler">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemArray.GetPropertyStore(Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemArray.GetPropertyStore(Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemArray.GetPropertyStore(Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS,System.Guid*,System.Void**)">
            <summary>Gets a property store.</summary>
            <param name="flags">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/propsys/ne-propsys-getpropertystoreflags">GETPROPERTYSTOREFLAGS</a></b> One of the <a href="https://docs.microsoft.com/windows/desktop/api/propsys/ne-propsys-getpropertystoreflags">GETPROPERTYSTOREFLAGS</a> constants.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getpropertystore#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="riid">
            <para>Type: <b>REFIID</b> The IID of the object type to retrieve.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getpropertystore#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppv">
            <para>Type: <b>void**</b> When this method returns, contains interface pointer requested in riid.  This is typically <a href="https://docs.microsoft.com/windows/desktop/api/propsys/nn-propsys-ipropertystore">IPropertyStore</a> or <a href="https://docs.microsoft.com/windows/desktop/api/propsys/nn-propsys-ipropertystorecapabilities">IPropertyStoreCapabilities</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getpropertystore#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para>This method is used to obtain a read-only property store that aggregates properties gathered from all the items in the shell item array. If there is more than one item in the shell item array, then the resulting property store will aggregate the values from each item according to a set of rules determined by each property.   Values read from the property store will be coerced to a canonical form prior to aggregation as discussed at <a href="https://docs.microsoft.com/windows/desktop/api/propsys/nf-propsys-ipropertydescription-coercetocanonicalvalue">CoerceToCanonicalValue</a>.  The output from a call to <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb761473(v=vs.85)">IPropertyStore::GetValue</a> is computed as follows: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getpropertystore#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemArray.GetPropertyDescriptionList(Windows.Win32.Foundation.PROPERTYKEY@,System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemArray.GetPropertyDescriptionList(Windows.Win32.Foundation.PROPERTYKEY*,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemArray.GetPropertyDescriptionList(Windows.Win32.Foundation.PROPERTYKEY*,System.Guid*,System.Void**)">
            <summary>Gets a property description list for the items in the shell item array.</summary>
            <param name="keyType">
            <para>Type: <b>REFPROPERTYKEY</b> A reference to the <a href="https://docs.microsoft.com/windows/desktop/api/wtypes/ns-wtypes-propertykey">PROPERTYKEY</a> structure specifying which property list to retrieve.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getpropertydescriptionlist#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="riid">
            <para>Type: <b>REFIID</b> The IID of the object type to retrieve.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getpropertydescriptionlist#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppv">
            <para>Type: <b>void**</b> When this method returns, contains the interface requested in riid.  This will typically be <a href="https://docs.microsoft.com/windows/desktop/api/propsys/nn-propsys-ipropertydescriptionlist">IPropertyDescriptionList</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getpropertydescriptionlist#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para>This function is used to determine a list of properties that are applicable to a set of shell items.  The type of list is specified by a <a href="https://docs.microsoft.com/windows/desktop/api/wtypes/ns-wtypes-propertykey">PROPERTYKEY</a> structure.  Supported list types include but are not limited to:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getpropertydescriptionlist#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemArray.GetAttributes(Windows.Win32.UI.Shell.SIATTRIBFLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemArray.GetAttributes(Windows.Win32.UI.Shell.SIATTRIBFLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemArray.GetAttributes(Windows.Win32.UI.Shell.SIATTRIBFLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS,Windows.Win32.System.SystemServices.SFGAO_FLAGS*)">
            <summary>Gets the attributes of the set of items contained in an IShellItemArray.</summary>
            <param name="AttribFlags">Type: <b>SIATTRIBFLAGS</b></param>
            <param name="sfgaoMask">
            <para>Type: <b>SFGAOF</b> A mask that specifies what particular attributes are being requested. A bitwise OR of one or more of the <a href="https://docs.microsoft.com/windows/desktop/shell/sfgao">SFGAO</a> values.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getattributes#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="psfgaoAttribs">
            <para>Type: <b>SFGAOF*</b> A bitmap that, when this method returns successfully, contains the values of the requested attributes.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getattributes#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> Returns S_OK if the attributes returned exactly match those requested in <i>sfgaoMask</i>, S_FALSE if the attributes do not exactly match, or a standard COM error value otherwise.</para>
            </returns>
            <remarks>
            <para>The Shell item array caches individual attributes after they have been determined. As this method passes through the array gathering attribute information, it normally stops looking at a particular attribute after that value is irrevocably set. For instance, if the SIATTRIBFLAGS_AND flag is set, after an attribute is found not to be set on an item (a value of 0), there is no need to continue examining that attribute value on other items because the result of the AND operation will always be 0. Therefore, the final set of attributes is commonly calculated by looking at only the first few items in the array, which is all that is needed to obtain the final value. If you have a need to examine all items in the array, set the SIATTRIBFLAGS_ALLITEMS flag. However, be aware that this can slow the method's return considerably, so do not do so without cause.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getattributes#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemArray.GetCount(System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IShellItemArray.GetCount(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemArray.GetCount(System.UInt32*)">
            <summary>Gets the number of items in the given IShellItem array.</summary>
            <param name="pdwNumItems">
            <para>Type: <b>DWORD*</b> When this method returns, contains the number of items in the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitemarray">IShellItemArray</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getcount#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getcount">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemArray.GetItemAt(System.UInt32,Windows.Win32.UI.Shell.IShellItem**)">
            <summary>Gets the item at the given index in the IShellItemArray.</summary>
            <param name="dwIndex">
            <para>Type: <b>DWORD</b> The index of the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> requested in the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitemarray">IShellItemArray</a></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getitemat#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppsi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>**</b> When this method returns, contains the requested <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> pointer.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-getitemat#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>This function returns E_FAIL if the requested index is out of bounds of the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitemarray">IShellItemArray</a>.</remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItemArray.EnumItems(Windows.Win32.UI.Shell.IEnumShellItems**)">
            <summary>Gets an enumerator of the items in the array.</summary>
            <param name="ppenumShellItems">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ienumshellitems">IEnumShellItems</a>**</b> When this method returns, contains an <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ienumshellitems">IEnumShellItems</a> pointer that enumerates the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">shell items</a> that are in the array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-enumitems#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ishellitemarray-enumitems">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.IShellItemArray.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{b63ea76d-1f85-456f-a19c-48159efa858b}</value>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetFileTypes(System.ReadOnlySpan{Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC})">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetFileTypes(System.UInt32,Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.GetFileTypeIndex(System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.GetFileTypeIndex(System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.Advise(Windows.Win32.UI.Shell.IFileDialogEvents*,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.Advise(Windows.Win32.UI.Shell.IFileDialogEvents*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.GetOptions(Windows.Win32.UI.Shell.FILEOPENDIALOGOPTIONS@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.GetOptions(Windows.Win32.UI.Shell.FILEOPENDIALOGOPTIONS*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetFileName(System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetFileName(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.GetFileName(Windows.Win32.Foundation.PWSTR@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.GetFileName(Windows.Win32.Foundation.PWSTR*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetTitle(System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetTitle(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetOkButtonLabel(System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetOkButtonLabel(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetFileNameLabel(System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetFileNameLabel(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetDefaultExtension(System.String)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetDefaultExtension(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetClientGuid(System.Guid@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IFileOpenDialog.SetClientGuid(System.Guid*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.GetResults(Windows.Win32.UI.Shell.IShellItemArray**)">
            <summary>Gets the user's choices in a dialog that allows multiple selection.</summary>
            <param name="ppenum">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitemarray">IShellItemArray</a>**</b> The address of a pointer to an <b>IShellItemArray</b> through which the items selected in the dialog can be accessed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifileopendialog-getresults#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para>This method can be used whether the selection consists of a single item or multiple items. <b>IFileOpenDialog::GetResults</b> can be called after the dialog has closed or during the handling of an IFileDialogEvents::OnFileOk event. Calling this method at any other time will fail.</para>
            <para><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-imodalwindow-show">Show</a> must return a success code for a result to be available to <b>IFileOpenDialog::GetResults</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifileopendialog-getresults#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IFileOpenDialog.GetSelectedItems(Windows.Win32.UI.Shell.IShellItemArray**)">
            <summary>Gets the currently selected items in the dialog. These items may be items selected in the view, or text selected in the file name edit box.</summary>
            <param name="ppsai">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitemarray">IShellItemArray</a>**</b> The address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitemarray">IShellItemArray</a> through which the selected items can be accessed.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifileopendialog-getselecteditems#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
            </returns>
            <remarks>This method can be used for single item or multiple item selections. If the user has entered new text in the file name field, this can be a time-consuming operation. When the application calls this method, the application parses the text in the <c>filename</c> field. For example, if this is a network share, the operation could take some time. However, this operation will not block the UI, since the user should able to stop the operation, which will result in <b>IFileOpenDialog::GetSelectedItems</b> returning a failure code).</remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.IFileOpenDialog.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{d57c7288-d4ad-4768-be02-9d969532d960}</value>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IApplicationActivationManager.QueryInterface(System.Guid@,System.Void*@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IApplicationActivationManager.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IApplicationActivationManager.ActivateApplication(System.String,System.String,Windows.Win32.UI.Shell.ACTIVATEOPTIONS,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IApplicationActivationManager.ActivateApplication(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.UI.Shell.ACTIVATEOPTIONS,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IApplicationActivationManager.ActivateApplication(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.UI.Shell.ACTIVATEOPTIONS,System.UInt32*)">
            <summary>Activates the specified Windows Store app for the generic launch contract (Windows.Launch) in the current session.</summary>
            <param name="appUserModelId">The application user model ID of the Windows Store app.</param>
            <param name="arguments">A pointer to an optional, app-specific, argument string.</param>
            <param name="options">One or more of the following flags used to support design mode, debugging, and testing scenarios.</param>
            <param name="processId">A pointer to a value that, when this method returns successfully, receives the process ID of the app instance that fulfills this contract.</param>
            <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-iapplicationactivationmanager-activateapplication">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IApplicationActivationManager.ActivateForFile(System.String,Windows.Win32.UI.Shell.IShellItemArray*,System.String,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IApplicationActivationManager.ActivateForFile(Windows.Win32.Foundation.PCWSTR,Windows.Win32.UI.Shell.IShellItemArray*,Windows.Win32.Foundation.PCWSTR,System.UInt32*)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Windows.Win32.UI.Shell.IApplicationActivationManager.ActivateForFile(Windows.Win32.Foundation.PCWSTR,Windows.Win32.UI.Shell.IShellItemArray*,Windows.Win32.Foundation.PCWSTR,System.UInt32*)" -->
        <member name="M:Windows.Win32.UI.Shell.IApplicationActivationManager.ActivateForProtocol(System.String,Windows.Win32.UI.Shell.IShellItemArray*,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.UI.Shell.IApplicationActivationManager.ActivateForProtocol(Windows.Win32.Foundation.PCWSTR,Windows.Win32.UI.Shell.IShellItemArray*,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IApplicationActivationManager.ActivateForProtocol(Windows.Win32.Foundation.PCWSTR,Windows.Win32.UI.Shell.IShellItemArray*,System.UInt32*)">
            <summary>Activates the specified Windows Store app for the protocol contract (Windows.Protocol).</summary>
            <param name="appUserModelId">The application user model ID of the Windows Store app.</param>
            <param name="itemArray">A pointer to an array of a single Shell item. The first item in the array is converted into a Uri object that is passed to the app through <a href="https://docs.microsoft.com/uwp/api/windows.applicationmodel.activation.protocolactivatedeventargs">ProtocolActivatedEventArgs</a>. Any items in the array except for the first element are ignored.</param>
            <param name="processId">A pointer to a value that, when this method returns successfully, receives the process ID of the app instance that fulfills this contract.</param>
            <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-iapplicationactivationmanager-activateforprotocol">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.IApplicationActivationManager.IID_Guid">
            <summary>The IID guid for this interface.</summary>
            <value>{2e941141-7f97-4756-ba1d-9decde894a3d}</value>
        </member>
        <member name="T:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS">
            <summary>Indicates flags that modify the property store object retrieved by methods that create a property store, such as IShellItem2::GetPropertyStore or IPropertyStoreFactory::GetPropertyStore.</summary>
            <remarks>
            <para>If the Shell item is a file, the property store contains the following items.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/propsys/ne-propsys-getpropertystoreflags#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_DEFAULT">
            <summary>
            <para>Meaning to a calling process: Return a read-only property store that contains all properties. Slow items (offline files) are not opened.</para>
            <para>Combination with other flags: Can be overridden by other flags.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/propsys/ne-propsys-getpropertystoreflags#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_HANDLERPROPERTIESONLY">
            <summary>
            <para>Meaning to a calling process: Include only properties directly from the property handler, which opens the file on the disk, network, or device.</para>
            <para>Meaning to a file folder: Only include properties directly from the handler. Meaning to other folders: When delegating to a file folder, pass this flag on to the file folder; do not do any multiplexing (MUX). When not delegating to a file folder, ignore this flag instead of returning a failure code. Combination with other flags: Cannot be combined with GPS_TEMPORARY, GPS_FASTPROPERTIESONLY, or GPS_BESTEFFORT.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/propsys/ne-propsys-getpropertystoreflags#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_READWRITE">
            <summary>
            <para>Meaning to a calling process: Can write properties to the item. Note: The store may contain fewer properties than a read-only store.</para>
            <para>Meaning to a file folder: ReadWrite. Meaning to other folders: ReadWrite. Note: When using default MUX, return a single unmultiplexed store because the default MUX does not support ReadWrite. Combination with other flags: Cannot be combined with GPS_TEMPORARY, GPS_FASTPROPERTIESONLY, GPS_BESTEFFORT, or GPS_DELAYCREATION. Implies GPS_HANDLERPROPERTIESONLY.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/propsys/ne-propsys-getpropertystoreflags#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_TEMPORARY">
            <summary>
            <para>Meaning to a calling process: Provides a writable store, with no initial properties, that exists for the lifetime of the Shell item instance; basically, a property bag attached to the item instance.</para>
            <para>Meaning to a file folder: Not applicable. Handled by the Shell item. Meaning to other folders: Not applicable. Handled by the Shell item. Combination with other flags: Cannot be combined with any other flag. Implies GPS_READWRITE.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/propsys/ne-propsys-getpropertystoreflags#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_FASTPROPERTIESONLY">
            <summary>
            <para>Meaning to a calling process: Provides a store that does not involve reading from the disk or network. Note: Some values may be different, or missing, compared to a store without this flag.</para>
            <para>Meaning to a file folder: Include the "innate" and "fallback" stores only. Do not load the handler. Meaning to other folders: Include only properties that are available in memory or can be computed very quickly (no properties from disk, network, or peripheral IO devices). This is normally only data sources from the IDLIST. When delegating to other folders, pass this flag on to them. Combination with other flags: Cannot be combined with GPS_TEMPORARY, GPS_READWRITE, GPS_HANDLERPROPERTIESONLY, or GPS_DELAYCREATION.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/propsys/ne-propsys-getpropertystoreflags#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_OPENSLOWITEM">
            <summary>
            <para>Meaning to a calling process: Open a slow item (offline file) if necessary.</para>
            <para>Meaning to a file folder: Retrieve a file from offline storage, if necessary. Note: Without this flag, the handler is not created for offline files. Meaning to other folders: Do not return any properties that are very slow. Combination with other flags: Cannot be combined with GPS_TEMPORARY or GPS_FASTPROPERTIESONLY.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/propsys/ne-propsys-getpropertystoreflags#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_DELAYCREATION">
            <summary>
            <para>Meaning to a calling process: Delay memory-intensive operations, such as file access, until a property is requested that requires such access.</para>
            <para>Meaning to a file folder: Do not create the handler until needed; for example, either <a href="https://docs.microsoft.com/windows/desktop/api/gdipluspath/nf-gdipluspath-graphicspathiterator-getcount">GetCount</a>/<a href="https://docs.microsoft.com/windows/desktop/api/xpsobjectmodel/nf-xpsobjectmodel-ixpsomcolorprofileresourcecollection-getat">GetAt</a> or <a href="https://docs.microsoft.com/windows/desktop/api/gdipluscolor/nf-gdipluscolor-color-getvalue">GetValue</a>, where the innate store does not satisfy the request. Note: <b>GetValue</b> might fail due to file access problems. Meaning to other folders: If the folder has memory-intensive properties, such as delegating to a file folder or network access, it can optimize performance by supporting <a href="https://docs.microsoft.com/windows/desktop/api/propsys/nn-propsys-idelayedpropertystorefactory">IDelayedPropertyStoreFactory</a> and splitting up its properties into a fast and a slow store. It can then use delayed MUX to recombine them. Combination with other flags: Cannot be combined with GPS_TEMPORARY or GPS_READWRITE.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/propsys/ne-propsys-getpropertystoreflags#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_BESTEFFORT">
            <summary>
            <para>Meaning to a calling process: Succeed at getting the store, even if some properties are not returned. Note: Some values may be different, or missing, compared to a store without this flag.</para>
            <para>Meaning to a file folder: Succeed and return a store, even if the handler or innate store has an error during creation. Only fail if substores fail. Meaning to other folders: Succeed on getting the store, even if some properties are not returned. Combination with other flags: Cannot be combined with GPS_TEMPORARY, GPS_READWRITE, or GPS_HANDLERPROPERTIESONLY.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/propsys/ne-propsys-getpropertystoreflags#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_NO_OPLOCK">
            <summary>
            <para><b>Windows 7 and later</b>. Callers should use this flag only if they are already holding an opportunistic lock (oplock) on the file because without an oplock, the bind operation cannot continue. By default, the Shell requests an oplock on a file before binding to the property handler. This flag disables the default behavior. <b>Windows Server 2008 and Windows Vista:  </b>This flag is not available.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/propsys/ne-propsys-getpropertystoreflags#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_PREFERQUERYPROPERTIES">
            <summary><b>Windows 8 and later</b>. Use this flag to retrieve only properties from the indexer for WDS results.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_EXTRINSICPROPERTIES">
            <summary>Include properties from the file's secondary stream.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_EXTRINSICPROPERTIESONLY">
            <summary>Include only properties from the file's secondary stream.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_VOLATILEPROPERTIES">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_VOLATILEPROPERTIESONLY">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS.GPS_MASK_VALID">
            <summary>Mask for valid <a href="https://docs.microsoft.com/windows/desktop/api/propsys/ne-propsys-getpropertystoreflags">GETPROPERTYSTOREFLAGS</a> values.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.JsonFixerRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the JsonFixerRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.JsonFixerRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.JsonFixerRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.JsonFixerRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.JsonFixerRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.JsonFixerRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.JsonFixerRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.JsonFixerRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.JsonFixerRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MyRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MyRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MyRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MyRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MyRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MyRegex1_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MyRegex1 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MyRegex1_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex1_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MyRegex1_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex1_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MyRegex1_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex1_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex1_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex1_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MacroRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MacroRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MacroRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MacroRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MacroRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MacroRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MacroRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MacroRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MacroRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MacroRegex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AppPFNRegex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AppPFNRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AppPFNRegex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AppPFNRegex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AppPFNRegex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AppPFNRegex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AppPFNRegex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AppPFNRegex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AppPFNRegex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AppPFNRegex_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MyRegex_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MyRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MyRegex_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MyRegex_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MyRegex_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_5.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_5E44A1B3577EA3BCA09A4ED513929FE702BEADF3277BF3E0EFE3DEA6B04B9846">
            <summary>Supports searching for the string "```xml".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_6C3CE1DE91108A769359970B7200B9B20E19D32D08294C9AD7730EB50CD4F7C9">
            <summary>Supports searching for the string "&lt;Allow ID=\"ID_ALLOW_".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_A88A2EBD06A58EBE771063690D211CDDA189B45254E287D33DBB6981B3B0B2DC">
            <summary>Supports searching for the string "&lt;VersionEx&gt;".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_F66C3F9F4E8219C51023A190C7E7DBB850FA066D270BB26FB4889AE31C52AEE1">
            <summary>Supports searching for the string "$(".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString____Ordinal">
            <summary>Supports searching for the string "__".</summary>
        </member>
    </members>
</doc>
