//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.2.250604.1+b02a3ee244
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile Trust.json
//       
//       Input file:
//           Trust.json (73735 bytes created 18:19+03:00 Jul 26 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    58 |
// |--------------------------+-------|
// | Expression animators     |     1 |
// | KeyFrame animators       |     6 |
// | Reference parameters     |     1 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     2 |
// | CompositionSpriteShapes  |     5 |
// |--------------------------+-------|
// | Brushes                  |     4 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        guarantee
    // Frame rate:  24 fps
    // Frame count: 28
    // Duration:    1166.7 mS
    // _____________________________________________________________________________________________
    // |           Marker           |           Constant           | Frame |   mS   |   Progress   |
    // |____________________________|______________________________|_______|________|______________|
    // | NormalToPressed_Start      | M_NormalToPressed_Start      |     0 |    0.0 | 0F           |
    // | NormalToPressed_End        | M_NormalToPressed_End        |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_Start | M_PointerOverToPressed_Start |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    19 |  791.7 | 0.680357158F |
    // | PressedToNormal_Start      | M_PressedToNormal_Start      |    20 |  833.3 | 0.716071427F |
    // | PressedToNormal_End        | M_PressedToNormal_End        |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    28 | 1166.7 | 1F           |
    // ---------------------------------------------------------------------------------------------
    sealed partial class Trust
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 1.167 seconds.
        internal const long c_durationTicks = 11666666;

        // Marker: NormalToPressed_Start.
        internal const float M_NormalToPressed_Start = 0F;

        // Marker: NormalToPressed_End.
        internal const float M_NormalToPressed_End = 0.323214293F;

        // Marker: PointerOverToPressed_Start.
        internal const float M_PointerOverToPressed_Start = 0.323214293F;

        // Marker: PointerOverToPressed_End.
        internal const float M_PointerOverToPressed_End = 0.680357158F;

        // Marker: PressedToNormal_Start.
        internal const float M_PressedToNormal_Start = 0.716071427F;

        // Marker: PressedToNormal_End.
        internal const float M_PressedToNormal_End = 1F;

        // Marker: PressedToPointerOver_Start.
        internal const float M_PressedToPointerOver_Start = 1F;

        // Marker: PressedToPointerOver_End.
        internal const float M_PressedToPointerOver_End = 1F;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            var res = 
                new Trust_AnimatedVisual(
                    compositor
                    );
                res.CreateAnimations();
                return res;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 28d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 24d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(11666666);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 28d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPressed_Start", 0d },
                { "NormalToPressed_End", 0.323214285714286 },
                { "PointerOverToPressed_Start", 0.323214285714286 },
                { "PointerOverToPressed_End", 0.680357142857143 },
                { "PressedToNormal_Start", 0.716071428571429 },
                { "PressedToNormal_End", 1d },
                { "PressedToPointerOver_Start", 1d },
                { "PressedToPointerOver_End", 1d },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class Trust_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 11666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            CompositionColorBrush _colorBrush_AlmostLavender_FFDFEFFD;
            CompositionColorBrush _colorBrush_AlmostSteelBlue_FF4687C6;
            CompositionColorBrush _colorBrush_White;
            CompositionContainerShape _containerShape_0;
            CompositionContainerShape _containerShape_1;
            CompositionPath _path;
            CompositionPathGeometry _pathGeometry_3;
            CompositionPathGeometry _pathGeometry_4;
            CompositionSpriteShape _spriteShape_3;
            CompositionSpriteShape _spriteShape_4;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 4 Offset:<28.75, 28.564>
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-9.04300022F, -3.75F));
                    builder.AddLine(new Vector2(-3.75F, -9.04300022F));
                    builder.AddLine(new Vector2(9.04300022F, 3.75F));
                    builder.AddLine(new Vector2(3.75F, 3.75F));
                    builder.AddLine(new Vector2(3.75F, 9.04300022F));
                    builder.AddLine(new Vector2(-9.04300022F, -3.75F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 3 Offset:<11.25, 28.564>
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-3.75F, 3.75F));
                    builder.AddLine(new Vector2(-9.04300022F, 3.75F));
                    builder.AddLine(new Vector2(3.75F, -9.04300022F));
                    builder.AddLine(new Vector2(9.04300022F, -3.75F));
                    builder.AddLine(new Vector2(-3.75F, 9.04300022F));
                    builder.AddLine(new Vector2(-3.75F, 3.75F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - - ShapeGroup: Group 2 Offset:<20, 16.814>
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 14.4219999F));
                    builder.AddCubicBezier(new Vector2(-0.128000006F, 14.4219999F), new Vector2(-0.248999998F, 14.3789997F), new Vector2(-0.349000007F, 14.2980003F));
                    builder.AddLine(new Vector2(-3.0309999F, 12.1020002F));
                    builder.AddLine(new Vector2(-6.43400002F, 12.7980003F));
                    builder.AddCubicBezier(new Vector2(-6.47399998F, 12.8079996F), new Vector2(-6.51100016F, 12.8120003F), new Vector2(-6.54799986F, 12.8120003F));
                    builder.AddCubicBezier(new Vector2(-6.76399994F, 12.8120003F), new Vector2(-6.96000004F, 12.6789999F), new Vector2(-7.04799986F, 12.474F));
                    builder.AddLine(new Vector2(-8.40499973F, 9.28199959F));
                    builder.AddLine(new Vector2(-11.7379999F, 8.31999969F));
                    builder.AddCubicBezier(new Vector2(-11.9860001F, 8.24800014F), new Vector2(-12.1520004F, 8.00699997F), new Vector2(-12.1309996F, 7.74800014F));
                    builder.AddLine(new Vector2(-11.849F, 4.28999996F));
                    builder.AddLine(new Vector2(-14.3540001F, 1.88800001F));
                    builder.AddCubicBezier(new Vector2(-14.5419998F, 1.70899999F), new Vector2(-14.5769997F, 1.41900003F), new Vector2(-14.4379997F, 1.20000005F));
                    builder.AddLine(new Vector2(-12.5790005F, -1.73099995F));
                    builder.AddLine(new Vector2(-13.6829996F, -5.02099991F));
                    builder.AddCubicBezier(new Vector2(-13.7639999F, -5.2670002F), new Vector2(-13.6610003F, -5.53900003F), new Vector2(-13.4359999F, -5.66900015F));
                    builder.AddLine(new Vector2(-10.4289999F, -7.40299988F));
                    builder.AddLine(new Vector2(-9.8760004F, -10.8280001F));
                    builder.AddCubicBezier(new Vector2(-9.83399963F, -11.085F), new Vector2(-9.61600018F, -11.2790003F), new Vector2(-9.35700035F, -11.2889996F));
                    builder.AddLine(new Vector2(-5.88999987F, -11.4259996F));
                    builder.AddLine(new Vector2(-3.80900002F, -14.2030001F));
                    builder.AddCubicBezier(new Vector2(-3.70600009F, -14.3400002F), new Vector2(-3.54099989F, -14.4219999F), new Vector2(-3.36899996F, -14.4219999F));
                    builder.AddCubicBezier(new Vector2(-3.28800011F, -14.4219999F), new Vector2(-3.20900011F, -14.4040003F), new Vector2(-3.13499999F, -14.3690004F));
                    builder.AddLine(new Vector2(-0.00100000005F, -12.8780003F));
                    builder.AddLine(new Vector2(3.1329999F, -14.3690004F));
                    builder.AddCubicBezier(new Vector2(3.20799994F, -14.4040003F), new Vector2(3.28600001F, -14.4219999F), new Vector2(3.36800003F, -14.4219999F));
                    builder.AddCubicBezier(new Vector2(3.53999996F, -14.4219999F), new Vector2(3.704F, -14.3400002F), new Vector2(3.80800009F, -14.2019997F));
                    builder.AddLine(new Vector2(5.88899994F, -11.4259996F));
                    builder.AddLine(new Vector2(9.35499954F, -11.2889996F));
                    builder.AddCubicBezier(new Vector2(9.61499977F, -11.2790003F), new Vector2(9.83399963F, -11.085F), new Vector2(9.87699986F, -10.8280001F));
                    builder.AddLine(new Vector2(10.4289999F, -7.40500021F));
                    builder.AddLine(new Vector2(13.4370003F, -5.671F));
                    builder.AddCubicBezier(new Vector2(13.6610003F, -5.54199982F), new Vector2(13.7650003F, -5.26800013F), new Vector2(13.6829996F, -5.02099991F));
                    builder.AddLine(new Vector2(12.5810003F, -1.73199999F));
                    builder.AddLine(new Vector2(14.4379997F, 1.19799995F));
                    builder.AddCubicBezier(new Vector2(14.5769997F, 1.41799998F), new Vector2(14.5419998F, 1.70799994F), new Vector2(14.3540001F, 1.88699996F));
                    builder.AddLine(new Vector2(11.849F, 4.28900003F));
                    builder.AddLine(new Vector2(12.132F, 7.74800014F));
                    builder.AddCubicBezier(new Vector2(12.1520004F, 8.00699997F), new Vector2(11.9860001F, 8.24699974F), new Vector2(11.7360001F, 8.31900024F));
                    builder.AddLine(new Vector2(8.40299988F, 9.28100014F));
                    builder.AddLine(new Vector2(7.04799986F, 12.4750004F));
                    builder.AddCubicBezier(new Vector2(6.96199989F, 12.6759996F), new Vector2(6.76100016F, 12.8109999F), new Vector2(6.546F, 12.8109999F));
                    builder.AddCubicBezier(new Vector2(6.51000023F, 12.8109999F), new Vector2(6.47300005F, 12.8059998F), new Vector2(6.43599987F, 12.7980003F));
                    builder.AddLine(new Vector2(3.0309999F, 12.1009998F));
                    builder.AddLine(new Vector2(0.345999986F, 14.2980003F));
                    builder.AddCubicBezier(new Vector2(0.247999996F, 14.3789997F), new Vector2(0.128000006F, 14.4219999F), new Vector2(0F, 14.4219999F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-5.51599979F, -0.243000001F));
                    builder.AddLine(new Vector2(-1.68200004F, 3.69499993F));
                    builder.AddLine(new Vector2(5.51599979F, -3.69499993F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostLavender_FFDFEFFD()
            {
                return (_colorBrush_AlmostLavender_FFDFEFFD == null)
                    ? _colorBrush_AlmostLavender_FFDFEFFD = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xDF, 0xEF, 0xFD))
                    : _colorBrush_AlmostLavender_FFDFEFFD;
            }

            // - Layer aggregator
            // ShapeGroup: Group 2 Offset:<20, 16.814>
            CompositionColorBrush ColorBrush_AlmostLightSkyBlue_FF97CCFC()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x97, 0xCC, 0xFC));
            }

            CompositionColorBrush ColorBrush_AlmostSteelBlue_FF4687C6()
            {
                return (_colorBrush_AlmostSteelBlue_FF4687C6 == null)
                    ? _colorBrush_AlmostSteelBlue_FF4687C6 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x46, 0x87, 0xC6))
                    : _colorBrush_AlmostSteelBlue_FF4687C6;
            }

            CompositionColorBrush ColorBrush_White()
            {
                return (_colorBrush_White == null)
                    ? _colorBrush_White = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF))
                    : _colorBrush_White;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_0()
            {
                if (_containerShape_0 != null) { return _containerShape_0; }
                var result = _containerShape_0 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(20F, 20F);
                // ShapeGroup: Group 4 Offset:<28.75, 28.564>
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_1()
            {
                if (_containerShape_1 != null) { return _containerShape_1; }
                var result = _containerShape_1 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(20F, 20F);
                // ShapeGroup: Group 3 Offset:<11.25, 28.564>
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            CompositionPath Path()
            {
                if (_path != null) { return _path; }
                var result = _path = new CompositionPath(Geometry_3());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Group 4 Offset:<28.75, 28.564>
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 3 Offset:<11.25, 28.564>
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - Layer aggregator
            // ShapeGroup: Group 2 Offset:<20, 16.814>
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // - Layer aggregator
            // Layer: check mark
            CompositionPathGeometry PathGeometry_3()
            {
                if (_pathGeometry_3 != null) { return _pathGeometry_3; }
                var result = _pathGeometry_3 = _c.CreatePathGeometry(Path());
                return result;
            }

            // - Layer aggregator
            // Layer: check mark 2
            CompositionPathGeometry PathGeometry_4()
            {
                if (_pathGeometry_4 != null) { return _pathGeometry_4; }
                var result = _pathGeometry_4 = _c.CreatePathGeometry(Path());
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<28.75, 28.564>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 28.75F, 28.5639992F), ColorBrush_AlmostLavender_FFDFEFFD());;
                result.StrokeBrush = ColorBrush_AlmostSteelBlue_FF4687C6();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<11.25, 28.564>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 11.25F, 28.5639992F), ColorBrush_AlmostLavender_FFDFEFFD());;
                result.StrokeBrush = ColorBrush_AlmostSteelBlue_FF4687C6();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<20, 16.814>
                var geometry = PathGeometry_2();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 20F, 16.8139992F), ColorBrush_AlmostLightSkyBlue_FF97CCFC());;
                result.StrokeBrush = ColorBrush_AlmostSteelBlue_FF4687C6();
                result.StrokeMiterLimit = 5F;
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<20.484, 16.104>
                if (_spriteShape_3 != null) { return _spriteShape_3; }
                var result = _spriteShape_3 = CreateSpriteShape(PathGeometry_3(), new Matrix3x2(1F, 0F, 0F, 1F, 20.4839993F, 16.1040001F));;
                result.StrokeBrush = ColorBrush_White();
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 3F;
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<20.484, 16.104>
                if (_spriteShape_4 != null) { return _spriteShape_4; }
                var result = _spriteShape_4 = CreateSpriteShape(PathGeometry_4(), new Matrix3x2(1F, 0F, 0F, 1F, 20.4839993F, 16.1040001F));;
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = ColorBrush_White();
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 3F;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            // - Layer aggregator
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.107142858F, 0F, HoldThenStepEasingFunction());
                // Frame 6.
                result.InsertKeyFrame(0.214285716F, -7F, CubicBezierEasingFunction_0());
                // Frame 12.
                result.InsertKeyFrame(0.428571433F, 11F, CubicBezierEasingFunction_0());
                // Frame 18.
                result.InsertKeyFrame(0.642857134F, 0F, CubicBezierEasingFunction_0());
                return result;
            }

            // - Layer aggregator
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.107142858F, 0F, HoldThenStepEasingFunction());
                // Frame 6.
                result.InsertKeyFrame(0.214285716F, 7F, CubicBezierEasingFunction_0());
                // Frame 12.
                result.InsertKeyFrame(0.428571433F, -9F, CubicBezierEasingFunction_0());
                // Frame 18.
                result.InsertKeyFrame(0.642857134F, 0F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - Layer aggregator
            // - Layer: check mark 2
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, 0F, HoldThenStepEasingFunction());
                // Frame 25.
                result.InsertKeyFrame(0.892857134F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - Layer aggregator
            // - Layer: check mark
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.107142858F, 0F, HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.392857134F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(40F, 40F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_0());
                shapes.Add(ContainerShape_1());
                // ShapeGroup: Group 2 Offset:<20, 16.814>
                shapes.Add(SpriteShape_2());
                // Layer: check mark
                shapes.Add(SpriteShape_3());
                // Layer: check mark 2
                shapes.Add(SpriteShape_4());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Layer aggregator
            // Layer: check mark
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.392857134F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                return result;
            }

            // - Layer aggregator
            // Layer: check mark 2
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                return result;
            }

            internal Trust_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(40F, 40F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_0.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_0(), AnimationController_0());
                _containerShape_1.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_1(), AnimationController_0());
                _pathGeometry_3.StartAnimation("TrimStart", TrimStartScalarAnimation_0_to_1(), AnimationController_0());
                _pathGeometry_4.StartAnimation("TrimEnd", TrimEndScalarAnimation_0_to_1(), AnimationController_0());
                _spriteShape_3.StartAnimation("Scale", ShapeVisibilityAnimation_0(), AnimationController_0());
                _spriteShape_4.StartAnimation("Scale", ShapeVisibilityAnimation_1(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _containerShape_0.StopAnimation("RotationAngleInDegrees");
                _containerShape_1.StopAnimation("RotationAngleInDegrees");
                _pathGeometry_3.StopAnimation("TrimStart");
                _pathGeometry_4.StopAnimation("TrimEnd");
                _spriteShape_3.StopAnimation("Scale");
                _spriteShape_4.StopAnimation("Scale");
            }

        }
    }
}
