//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.2.250604.1+b02a3ee244
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile star.json
//       
//       Input file:
//           star.json (85594 bytes created 22:16+03:00 Jul 24 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    48 |
// |--------------------------+-------|
// | Expression animators     |     1 |
// | KeyFrame animators       |     3 |
// | Reference parameters     |     1 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     3 |
// | CompositionSpriteShapes  |     4 |
// |--------------------------+-------|
// | Brushes                  |     4 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        star
    // Frame rate:  24 fps
    // Frame count: 28
    // Duration:    1166.7 mS
    // _____________________________________________________________________________________________
    // |           Marker           |           Constant           | Frame |   mS   |   Progress   |
    // |____________________________|______________________________|_______|________|______________|
    // | NormalToPressed_Start      | M_NormalToPressed_Start      |     0 |    0.0 | 0F           |
    // | NormalToPressed_End        | M_NormalToPressed_End        |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_Start | M_PointerOverToPressed_Start |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    19 |  791.7 | 0.680357158F |
    // | PressedToNormal_Start      | M_PressedToNormal_Start      |    20 |  833.3 | 0.716071427F |
    // | PressedToNormal_End        | M_PressedToNormal_End        |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    28 | 1166.7 | 1F           |
    // ---------------------------------------------------------------------------------------------
    sealed partial class Star
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 1.167 seconds.
        internal const long c_durationTicks = 11666666;

        // Marker: NormalToPressed_Start.
        internal const float M_NormalToPressed_Start = 0F;

        // Marker: NormalToPressed_End.
        internal const float M_NormalToPressed_End = 0.323214293F;

        // Marker: PointerOverToPressed_Start.
        internal const float M_PointerOverToPressed_Start = 0.323214293F;

        // Marker: PointerOverToPressed_End.
        internal const float M_PointerOverToPressed_End = 0.680357158F;

        // Marker: PressedToNormal_Start.
        internal const float M_PressedToNormal_Start = 0.716071427F;

        // Marker: PressedToNormal_End.
        internal const float M_PressedToNormal_End = 1F;

        // Marker: PressedToPointerOver_Start.
        internal const float M_PressedToPointerOver_Start = 1F;

        // Marker: PressedToPointerOver_End.
        internal const float M_PressedToPointerOver_End = 1F;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            var res = 
                new Star_AnimatedVisual(
                    compositor
                    );
                res.CreateAnimations();
                return res;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 28d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 24d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(11666666);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 28d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPressed_Start", 0d },
                { "NormalToPressed_End", 0.323214285714286 },
                { "PointerOverToPressed_Start", 0.323214285714286 },
                { "PointerOverToPressed_End", 0.680357142857143 },
                { "PressedToNormal_Start", 0.716071428571429 },
                { "PressedToNormal_End", 1d },
                { "PressedToPointerOver_Start", 1d },
                { "PressedToPointerOver_End", 1d },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class Star_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 11666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            CompositionContainerShape _containerShape_0;
            CompositionContainerShape _containerShape_1;
            CompositionContainerShape _containerShape_2;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _scaleVector2Animation_0;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // - - - - Layer aggregator
            // - - Transforms: frame Offset:<-9.674004, -9>
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(82.3840027F, -19.5720005F));
                    builder.AddCubicBezier(new Vector2(80.8639984F, -24.2639999F), new Vector2(76.8860016F, -27.618F), new Vector2(71.9940033F, -28.3260002F));
                    builder.AddLine(new Vector2(34.4620018F, -33.7340012F));
                    builder.AddCubicBezier(new Vector2(35.0019989F, -29.7479992F), new Vector2(29.2099991F, -26.8579998F), new Vector2(27.1620007F, -31.0259991F));
                    builder.AddCubicBezier(new Vector2(24.9139996F, -35.5979996F), new Vector2(22.052F, -39.7980003F), new Vector2(19.2759991F, -44.0579987F));
                    builder.AddCubicBezier(new Vector2(16.9880009F, -47.5699997F), new Vector2(15.052F, -51.2480011F), new Vector2(12.9239998F, -54.8499985F));
                    builder.AddCubicBezier(new Vector2(9.49400043F, -60.6559982F), new Vector2(4.07200003F, -67.8119965F), new Vector2(5.56799984F, -74.9599991F));
                    builder.AddCubicBezier(new Vector2(5.76800013F, -75.9160004F), new Vector2(6.21000004F, -76.6119995F), new Vector2(6.78399992F, -77.0820007F));
                    builder.AddCubicBezier(new Vector2(4.79199982F, -78.314003F), new Vector2(2.46000004F, -79F), new Vector2(0F, -79F));
                    builder.AddCubicBezier(new Vector2(-4.90600014F, -79F), new Vector2(-9.31200027F, -76.2740021F), new Vector2(-11.5019999F, -71.8799973F));
                    builder.AddLine(new Vector2(-30.184F, -34.3499985F));
                    builder.AddLine(new Vector2(-72.0019989F, -28.3239994F));
                    builder.AddCubicBezier(new Vector2(-76.8860016F, -27.618F), new Vector2(-80.8639984F, -24.2639999F), new Vector2(-82.3840027F, -19.5720005F));
                    builder.AddCubicBezier(new Vector2(-83.8820038F, -14.948F), new Vector2(-82.5920029F, -9.77600002F), new Vector2(-79.0940018F, -6.3920002F));
                    builder.AddLine(new Vector2(-48.8979988F, 22.7900009F));
                    builder.AddLine(new Vector2(-56.0219994F, 63.973999F));
                    builder.AddCubicBezier(new Vector2(-56.8580017F, 68.8180008F), new Vector2(-54.9119987F, 73.6279984F), new Vector2(-50.9239998F, 76.5400009F));
                    builder.AddCubicBezier(new Vector2(-48.7140007F, 78.1480026F), new Vector2(-46.0979996F, 78.9980011F), new Vector2(-43.3619995F, 78.9980011F));
                    builder.AddCubicBezier(new Vector2(-41.3120003F, 78.9980011F), new Vector2(-39.2659988F, 78.5F), new Vector2(-37.4199982F, 77.5439987F));
                    builder.AddLine(new Vector2(0F, 58.0359993F));
                    builder.AddLine(new Vector2(37.4399986F, 77.552002F));
                    builder.AddCubicBezier(new Vector2(39.2639999F, 78.5F), new Vector2(41.3120003F, 79F), new Vector2(43.3639984F, 79F));
                    builder.AddCubicBezier(new Vector2(46.0979996F, 79F), new Vector2(48.7140007F, 78.1500015F), new Vector2(50.9440002F, 76.5299988F));
                    builder.AddCubicBezier(new Vector2(54.9140015F, 73.6299973F), new Vector2(56.8600006F, 68.8199997F), new Vector2(56.0219994F, 63.9760017F));
                    builder.AddLine(new Vector2(48.8979988F, 22.7919998F));
                    builder.AddLine(new Vector2(79.0960007F, -6.39400005F));
                    builder.AddCubicBezier(new Vector2(82.5920029F, -9.77400017F), new Vector2(83.8840027F, -14.948F), new Vector2(82.3840027F, -19.5720005F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - Transforms: frame Offset:<-9.674004, -9>
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(82.3830032F, -19.5720005F));
                    builder.AddCubicBezier(new Vector2(80.862999F, -24.2639999F), new Vector2(76.8850021F, -27.618F), new Vector2(71.9929962F, -28.3260002F));
                    builder.AddLine(new Vector2(30.1809998F, -34.3499985F));
                    builder.AddLine(new Vector2(11.4989996F, -71.8840027F));
                    builder.AddCubicBezier(new Vector2(9.31099987F, -76.2740021F), new Vector2(4.90500021F, -79F), new Vector2(-0.00100000005F, -79F));
                    builder.AddCubicBezier(new Vector2(-4.90700006F, -79F), new Vector2(-9.31299973F, -76.2740021F), new Vector2(-11.5030003F, -71.8799973F));
                    builder.AddLine(new Vector2(-30.1849995F, -34.3499985F));
                    builder.AddLine(new Vector2(-72.0029984F, -28.3239994F));
                    builder.AddCubicBezier(new Vector2(-76.887001F, -27.618F), new Vector2(-80.8649979F, -24.2639999F), new Vector2(-82.3850021F, -19.5720005F));
                    builder.AddCubicBezier(new Vector2(-83.8830032F, -14.948F), new Vector2(-82.5930023F, -9.77600002F), new Vector2(-79.0950012F, -6.3920002F));
                    builder.AddLine(new Vector2(-48.8989983F, 22.7900009F));
                    builder.AddLine(new Vector2(-56.0229988F, 63.973999F));
                    builder.AddCubicBezier(new Vector2(-56.8590012F, 68.8160019F), new Vector2(-54.9129982F, 73.6279984F), new Vector2(-50.9249992F, 76.5400009F));
                    builder.AddCubicBezier(new Vector2(-48.7150002F, 78.1480026F), new Vector2(-46.098999F, 78.9980011F), new Vector2(-43.362999F, 78.9980011F));
                    builder.AddCubicBezier(new Vector2(-41.3129997F, 78.9980011F), new Vector2(-39.2669983F, 78.5F), new Vector2(-37.4210014F, 77.5439987F));
                    builder.AddLine(new Vector2(-0.00100000005F, 58.0359993F));
                    builder.AddLine(new Vector2(37.4389992F, 77.552002F));
                    builder.AddCubicBezier(new Vector2(39.2630005F, 78.5F), new Vector2(41.3110008F, 79F), new Vector2(43.362999F, 79F));
                    builder.AddCubicBezier(new Vector2(46.0970001F, 79F), new Vector2(48.7130013F, 78.1500015F), new Vector2(50.9430008F, 76.5299988F));
                    builder.AddCubicBezier(new Vector2(54.9129982F, 73.6299973F), new Vector2(56.8590012F, 68.8199997F), new Vector2(56.0209999F, 63.9760017F));
                    builder.AddLine(new Vector2(48.8969994F, 22.7919998F));
                    builder.AddLine(new Vector2(79.0950012F, -6.39400005F));
                    builder.AddCubicBezier(new Vector2(82.5910034F, -9.77400017F), new Vector2(83.8830032F, -14.948F), new Vector2(82.3830032F, -19.5720005F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 1 Offset:<71.25, 67.25>
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, -67F));
                    builder.AddLine(new Vector2(21.9400005F, -22.8899994F));
                    builder.AddLine(new Vector2(71F, -15.816F));
                    builder.AddLine(new Vector2(35.5F, 18.5179996F));
                    builder.AddLine(new Vector2(43.8800011F, 67F));
                    builder.AddLine(new Vector2(0F, 44.1100006F));
                    builder.AddLine(new Vector2(-43.8800011F, 67F));
                    builder.AddLine(new Vector2(-35.5F, 18.5179996F));
                    builder.AddLine(new Vector2(-71F, -15.816F));
                    builder.AddLine(new Vector2(-21.9400005F, -22.8899994F));
                    builder.AddLine(new Vector2(0F, -67F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 1 Offset:<74.457, 70.343>
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(43.8810005F, 69.9069977F));
                    builder.AddCubicBezier(new Vector2(43.4070015F, 69.9069977F), new Vector2(42.9290009F, 69.7949982F), new Vector2(42.493F, 69.5670013F));
                    builder.AddLine(new Vector2(0.00100000005F, 47.401001F));
                    builder.AddLine(new Vector2(-42.493F, 69.5670013F));
                    builder.AddCubicBezier(new Vector2(-43.5050011F, 70.0930023F), new Vector2(-44.7290001F, 70.0029984F), new Vector2(-45.6489983F, 69.3290024F));
                    builder.AddCubicBezier(new Vector2(-46.5709991F, 68.6569977F), new Vector2(-47.0309982F, 67.5189972F), new Vector2(-46.8370018F, 66.3949966F));
                    builder.AddLine(new Vector2(-38.7270012F, 19.4769993F));
                    builder.AddLine(new Vector2(-73.0849991F, -13.7530003F));
                    builder.AddCubicBezier(new Vector2(-73.9069977F, -14.5489998F), new Vector2(-74.2070007F, -15.743F), new Vector2(-73.8529968F, -16.8330002F));
                    builder.AddCubicBezier(new Vector2(-73.4990005F, -17.9230003F), new Vector2(-72.5589981F, -18.7150002F), new Vector2(-71.427002F, -18.8789997F));
                    builder.AddLine(new Vector2(-23.9249992F, -25.7269993F));
                    builder.AddLine(new Vector2(-2.68499994F, -68.4290009F));
                    builder.AddCubicBezier(new Vector2(-2.17700005F, -69.4489975F), new Vector2(-1.13699996F, -70.0930023F), new Vector2(0.00100000005F, -70.0930023F));
                    builder.AddCubicBezier(new Vector2(1.13900006F, -70.0930023F), new Vector2(2.1789999F, -69.4489975F), new Vector2(2.68700004F, -68.4290009F));
                    builder.AddLine(new Vector2(23.927F, -25.7269993F));
                    builder.AddLine(new Vector2(71.4290009F, -18.8789997F));
                    builder.AddCubicBezier(new Vector2(72.560997F, -18.7150002F), new Vector2(73.5029984F, -17.9209995F), new Vector2(73.8550034F, -16.8330002F));
                    builder.AddCubicBezier(new Vector2(74.2070007F, -15.7449999F), new Vector2(73.9089966F, -14.5489998F), new Vector2(73.086998F, -13.7530003F));
                    builder.AddLine(new Vector2(38.7270012F, 19.4790001F));
                    builder.AddLine(new Vector2(46.8370018F, 66.3970032F));
                    builder.AddCubicBezier(new Vector2(47.0309982F, 67.5210037F), new Vector2(46.5709991F, 68.6569977F), new Vector2(45.6489983F, 69.3310013F));
                    builder.AddCubicBezier(new Vector2(45.1269989F, 69.7129974F), new Vector2(44.5050011F, 69.9069977F), new Vector2(43.8810005F, 69.9069977F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    builder.BeginFigure(new Vector2(0.00100000005F, 41.0169983F));
                    builder.AddCubicBezier(new Vector2(0.476999998F, 41.0169983F), new Vector2(0.954999983F, 41.1310005F), new Vector2(1.38900006F, 41.3569984F));
                    builder.AddLine(new Vector2(39.8930016F, 61.4410019F));
                    builder.AddLine(new Vector2(32.5449982F, 18.9349995F));
                    builder.AddCubicBezier(new Vector2(32.3769989F, 17.9570007F), new Vector2(32.7010002F, 16.9589996F), new Vector2(33.4150009F, 16.2689991F));
                    builder.AddLine(new Vector2(64.5189972F, -13.8129997F));
                    builder.AddLine(new Vector2(21.5149994F, -20.0130005F));
                    builder.AddCubicBezier(new Vector2(20.5389996F, -20.1529999F), new Vector2(19.6949997F, -20.7649994F), new Vector2(19.257F, -21.6469994F));
                    builder.AddLine(new Vector2(0.00100000005F, -60.3569984F));
                    builder.AddLine(new Vector2(-19.2530003F, -21.6469994F));
                    builder.AddCubicBezier(new Vector2(-19.6930008F, -20.7649994F), new Vector2(-20.5370007F, -20.1529999F), new Vector2(-21.5109997F, -20.0130005F));
                    builder.AddLine(new Vector2(-64.5149994F, -13.8129997F));
                    builder.AddLine(new Vector2(-33.4109993F, 16.2689991F));
                    builder.AddCubicBezier(new Vector2(-32.6969986F, 16.9589996F), new Vector2(-32.3709984F, 17.9570007F), new Vector2(-32.5410004F, 18.9349995F));
                    builder.AddLine(new Vector2(-39.8889999F, 61.4410019F));
                    builder.AddLine(new Vector2(-1.38499999F, 41.3569984F));
                    builder.AddCubicBezier(new Vector2(-0.953000009F, 41.1310005F), new Vector2(-0.474999994F, 41.0169983F), new Vector2(0.00100000005F, 41.0169983F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - Layer aggregator
            // Transforms: frame Offset:<-9.674004, -9>
            CompositionColorBrush ColorBrush_AlmostDarkGray_FFA6A6A6()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xA6, 0xA6, 0xA6));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 1 Offset:<74.457, 70.343>
            CompositionColorBrush ColorBrush_AlmostDarkSlateBlue_FF40396E()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x40, 0x39, 0x6E));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 1 Offset:<71.25, 67.25>
            CompositionColorBrush ColorBrush_AlmostLightSalmon_FFFFC571()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0xC5, 0x71));
            }

            // - - Layer aggregator
            // Transforms: frame Offset:<-9.674004, -9>
            CompositionColorBrush ColorBrush_AlmostWhiteSmoke_FFF2F2F2()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xF2, 0xF2, 0xF2));
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_0()
            {
                if (_containerShape_0 != null) { return _containerShape_0; }
                var result = _containerShape_0 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(74.4570007F, 70.25F);
                result.Offset = new Vector2(22.5429993F, 26.75F);
                var shapes = result.Shapes;
                // Transforms: frame Offset:<-9.674004, -9>
                shapes.Add(SpriteShape_0());
                // Transforms: frame Offset:<-9.674004, -9>
                shapes.Add(SpriteShape_1());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_1()
            {
                if (_containerShape_1 != null) { return _containerShape_1; }
                var result = _containerShape_1 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(71.25F, 67.25F);
                result.Offset = new Vector2(25.75F, 29.75F);
                // ShapeGroup: Group 1 Offset:<71.25, 67.25>
                result.Shapes.Add(SpriteShape_2());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_2()
            {
                if (_containerShape_2 != null) { return _containerShape_2; }
                var result = _containerShape_2 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(74.4570007F, 70.25F);
                result.Offset = new Vector2(22.5429993F, 26.75F);
                // ShapeGroup: Group 1 Offset:<74.457, 70.343>
                result.Shapes.Add(SpriteShape_3());
                return result;
            }

            // - - Layer aggregator
            // Transforms: frame Offset:<-9.674004, -9>
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - Layer aggregator
            // Transforms: frame Offset:<-9.674004, -9>
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 1 Offset:<71.25, 67.25>
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 1 Offset:<74.457, 70.343>
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<78.458, 74.25>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 78.4580002F, 74.25F), ColorBrush_AlmostDarkGray_FFA6A6A6());;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<74.459, 70.25>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 74.4589996F, 70.25F), ColorBrush_AlmostWhiteSmoke_FFF2F2F2());;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<71.25, 67.25>
                var geometry = PathGeometry_2();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 71.25F, 67.25F), ColorBrush_AlmostLightSalmon_FFFFC571());;
                return result;
            }

            // - Layer aggregator
            // ShapeGroup: Group 1 Offset:<74.457, 70.343>
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<74.457, 70.343>
                var geometry = PathGeometry_3();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 74.4570007F, 70.3430023F), ColorBrush_AlmostDarkSlateBlue_FF40396E());;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_0());
                shapes.Add(ContainerShape_1());
                shapes.Add(ContainerShape_2());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                if (_scaleVector2Animation_0 != null) { return _scaleVector2Animation_0; }
                var result = _scaleVector2Animation_0 = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.107142858F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 6.
                result.InsertKeyFrame(0.214285716F, new Vector2(1.10000002F, 1.10000002F), CubicBezierEasingFunction_0());
                // Frame 11.
                result.InsertKeyFrame(0.392857134F, new Vector2(1F, 1F), CubicBezierEasingFunction_0());
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, new Vector2(1F, 1F), CubicBezierEasingFunction_0());
                // Frame 22.
                result.InsertKeyFrame(0.785714269F, new Vector2(0.899999976F, 0.899999976F), CubicBezierEasingFunction_0());
                // Frame 25.
                result.InsertKeyFrame(0.892857134F, new Vector2(1F, 1F), CubicBezierEasingFunction_0());
                return result;
            }

            // - Layer aggregator
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.107142858F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.392857134F, new Vector2(0F, 0F), CubicBezierEasingFunction_0());
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, new Vector2(0F, 0F), CubicBezierEasingFunction_0());
                // Frame 25.
                result.InsertKeyFrame(0.892857134F, new Vector2(1F, 1F), CubicBezierEasingFunction_0());
                return result;
            }

            internal Star_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_0.StartAnimation("Scale", ScaleVector2Animation_0(), AnimationController_0());
                _containerShape_1.StartAnimation("Scale", ScaleVector2Animation_1(), AnimationController_0());
                _containerShape_2.StartAnimation("Scale", ScaleVector2Animation_0(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _containerShape_0.StopAnimation("Scale");
                _containerShape_1.StopAnimation("Scale");
                _containerShape_2.StopAnimation("Scale");
            }

        }
    }
}
