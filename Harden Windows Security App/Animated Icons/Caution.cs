//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.2.250604.1+b02a3ee244
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile Caution.json
//       
//       Input file:
//           Caution.json (108155 bytes created 18:16+03:00 Jul 26 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    58 |
// |--------------------------+-------|
// | Expression animators     |     1 |
// | KeyFrame animators       |     7 |
// | Reference parameters     |     1 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     2 |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     2 |
// | CompositionSpriteShapes  |     3 |
// |--------------------------+-------|
// | Brushes                  |     3 |
// | Gradient stops           |     6 |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        box-important
    // Frame rate:  24 fps
    // Frame count: 28
    // Duration:    1166.7 mS
    // _____________________________________________________________________________________________
    // |           Marker           |           Constant           | Frame |   mS   |   Progress   |
    // |____________________________|______________________________|_______|________|______________|
    // | NormalToPressed_Start      | M_NormalToPressed_Start      |     0 |    0.0 | 0F           |
    // | NormalToPressed_End        | M_NormalToPressed_End        |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_Start | M_PointerOverToPressed_Start |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    19 |  791.7 | 0.680357158F |
    // | PressedToNormal_Start      | M_PressedToNormal_Start      |    20 |  833.3 | 0.716071427F |
    // | PressedToNormal_End        | M_PressedToNormal_End        |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    28 | 1166.7 | 1F           |
    // ---------------------------------------------------------------------------------------------
    sealed partial class Caution
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 1.167 seconds.
        internal const long c_durationTicks = 11666666;

        // Marker: NormalToPressed_Start.
        internal const float M_NormalToPressed_Start = 0F;

        // Marker: NormalToPressed_End.
        internal const float M_NormalToPressed_End = 0.323214293F;

        // Marker: PointerOverToPressed_Start.
        internal const float M_PointerOverToPressed_Start = 0.323214293F;

        // Marker: PointerOverToPressed_End.
        internal const float M_PointerOverToPressed_End = 0.680357158F;

        // Marker: PressedToNormal_Start.
        internal const float M_PressedToNormal_Start = 0.716071427F;

        // Marker: PressedToNormal_End.
        internal const float M_PressedToNormal_End = 1F;

        // Marker: PressedToPointerOver_Start.
        internal const float M_PressedToPointerOver_Start = 1F;

        // Marker: PressedToPointerOver_End.
        internal const float M_PressedToPointerOver_End = 1F;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            var res = 
                new Caution_AnimatedVisual(
                    compositor
                    );
                res.CreateAnimations();
                return res;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 28d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 24d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(11666666);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 28d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPressed_Start", 0d },
                { "NormalToPressed_End", 0.323214285714286 },
                { "PointerOverToPressed_Start", 0.323214285714286 },
                { "PointerOverToPressed_End", 0.680357142857143 },
                { "PressedToNormal_Start", 0.716071428571429 },
                { "PressedToNormal_End", 1d },
                { "PressedToPointerOver_Start", 1d },
                { "PressedToPointerOver_End", 1d },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class Caution_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 11666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            CompositionColorGradientStop _gradientStop_0_AlmostDarkSlateGray_FF4A4A4A;
            CompositionColorGradientStop _gradientStop_0p531_AlmostDarkSlateGray_FF393939;
            CompositionColorGradientStop _gradientStop_0p765_AlmostDarkSlateGray_FF2E2E2E;
            CompositionColorGradientStop _gradientStop_1_AlmostDarkSlateGray_FF242424;
            CompositionContainerShape _containerShape_0;
            CompositionContainerShape _containerShape_1;
            CompositionPath _path_0;
            CompositionPath _path_1;
            CompositionPath _path_2;
            CompositionPathGeometry _pathGeometry_1;
            CompositionPathGeometry _pathGeometry_2;
            CompositionSpriteShape _spriteShape_0;
            CompositionSpriteShape _spriteShape_1;
            CompositionSpriteShape _spriteShape_2;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _scaleVector2Animation;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // - - - Layer aggregator
            // - - ShapeGroup: Group 1
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(20F, 0F));
                    builder.AddCubicBezier(new Vector2(20F, 11.0450001F), new Vector2(11.0450001F, 20F), new Vector2(0F, 20F));
                    builder.AddCubicBezier(new Vector2(-11.0450001F, 20F), new Vector2(-20F, 11.0450001F), new Vector2(-20F, 0F));
                    builder.AddCubicBezier(new Vector2(-20F, -11.0450001F), new Vector2(-11.0450001F, -20F), new Vector2(0F, -20F));
                    builder.AddCubicBezier(new Vector2(11.0450001F, -20F), new Vector2(20F, -11.0450001F), new Vector2(20F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_2(), Geometry_3() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0.0140000004F, 10F));
                    builder.AddCubicBezier(new Vector2(-0.717999995F, 10F), new Vector2(-1.32200003F, 9.77799988F), new Vector2(-1.79799998F, 9.33399963F));
                    builder.AddCubicBezier(new Vector2(-2.27399993F, 8.89000034F), new Vector2(-2.51200008F, 8.35299969F), new Vector2(-2.51200008F, 7.72100019F));
                    builder.AddCubicBezier(new Vector2(-2.51200008F, 7.0619998F), new Vector2(-2.27200007F, 6.52199984F), new Vector2(-1.79100001F, 6.10099983F));
                    builder.AddCubicBezier(new Vector2(-1.31099999F, 5.67999983F), new Vector2(-0.708999991F, 5.46999979F), new Vector2(0.0140000004F, 5.46999979F));
                    builder.AddCubicBezier(new Vector2(0.745999992F, 5.46999979F), new Vector2(1.34599996F, 5.68300009F), new Vector2(1.81200004F, 6.1079998F));
                    builder.AddCubicBezier(new Vector2(2.27900004F, 6.53399992F), new Vector2(2.51200008F, 7.0710001F), new Vector2(2.51200008F, 7.72100019F));
                    builder.AddCubicBezier(new Vector2(2.51200008F, 8.38000011F), new Vector2(2.2809999F, 8.92399979F), new Vector2(1.81900001F, 9.35400009F));
                    builder.AddCubicBezier(new Vector2(1.35699999F, 9.7840004F), new Vector2(0.754999995F, 10F), new Vector2(0.0140000004F, 10F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(2.23600006F, -9.27900028F));
                    builder.AddCubicBezier(new Vector2(2.23600006F, -9.27900028F), new Vector2(1.755F, 2.89599991F), new Vector2(1.755F, 2.89599991F));
                    builder.AddCubicBezier(new Vector2(1.74000001F, 3.26799989F), new Vector2(1.43400002F, 3.56200004F), new Vector2(1.06200004F, 3.56200004F));
                    builder.AddCubicBezier(new Vector2(1.06200004F, 3.56200004F), new Vector2(-1.11699998F, 3.56200004F), new Vector2(-1.11699998F, 3.56200004F));
                    builder.AddCubicBezier(new Vector2(-1.49000001F, 3.56200004F), new Vector2(-1.796F, 3.26699996F), new Vector2(-1.80999994F, 2.89400005F));
                    builder.AddCubicBezier(new Vector2(-1.80999994F, 2.89400005F), new Vector2(-2.2650001F, -9.27999973F), new Vector2(-2.2650001F, -9.27999973F));
                    builder.AddCubicBezier(new Vector2(-2.27999997F, -9.67300034F), new Vector2(-1.96500003F, -10F), new Vector2(-1.57200003F, -10F));
                    builder.AddCubicBezier(new Vector2(-1.57200003F, -10F), new Vector2(1.54400003F, -10F), new Vector2(1.54400003F, -10F));
                    builder.AddCubicBezier(new Vector2(1.93700004F, -10F), new Vector2(2.25200009F, -9.67300034F), new Vector2(2.23600006F, -9.27900028F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_4()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_5(), Geometry_6() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-0.0419999994F, 11.625F));
                    builder.AddCubicBezier(new Vector2(-0.773999989F, 11.625F), new Vector2(-1.37800002F, 11.4029999F), new Vector2(-1.85399997F, 10.9589996F));
                    builder.AddCubicBezier(new Vector2(-2.32999992F, 10.5150003F), new Vector2(-2.56800008F, 9.97799969F), new Vector2(-2.56800008F, 9.34599972F));
                    builder.AddCubicBezier(new Vector2(-2.56800008F, 8.68700027F), new Vector2(-2.32800007F, 8.14700031F), new Vector2(-1.847F, 7.72599983F));
                    builder.AddCubicBezier(new Vector2(-1.36699998F, 7.30499983F), new Vector2(-0.764999986F, 7.09499979F), new Vector2(-0.0419999994F, 7.09499979F));
                    builder.AddCubicBezier(new Vector2(0.689999998F, 7.09499979F), new Vector2(1.28999996F, 7.30800009F), new Vector2(1.75600004F, 7.7329998F));
                    builder.AddCubicBezier(new Vector2(2.22300005F, 8.1590004F), new Vector2(2.45600009F, 8.6960001F), new Vector2(2.45600009F, 9.34599972F));
                    builder.AddCubicBezier(new Vector2(2.45600009F, 10.0050001F), new Vector2(2.2249999F, 10.5489998F), new Vector2(1.76300001F, 10.9790001F));
                    builder.AddCubicBezier(new Vector2(1.301F, 11.4090004F), new Vector2(0.699000001F, 11.625F), new Vector2(-0.0419999994F, 11.625F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_6()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(2.25999999F, -11.4040003F));
                    builder.AddCubicBezier(new Vector2(2.25999999F, -11.4040003F), new Vector2(1.77900004F, 0.771000028F), new Vector2(1.77900004F, 0.771000028F));
                    builder.AddCubicBezier(new Vector2(1.76400006F, 1.14300001F), new Vector2(1.45799994F, 1.43700004F), new Vector2(1.08599997F, 1.43700004F));
                    builder.AddCubicBezier(new Vector2(1.08599997F, 1.43700004F), new Vector2(-1.09300005F, 1.43700004F), new Vector2(-1.09300005F, 1.43700004F));
                    builder.AddCubicBezier(new Vector2(-1.46599996F, 1.43700004F), new Vector2(-1.77199996F, 1.14199996F), new Vector2(-1.78600001F, 0.768999994F));
                    builder.AddCubicBezier(new Vector2(-1.78600001F, 0.768999994F), new Vector2(-2.24099994F, -11.4049997F), new Vector2(-2.24099994F, -11.4049997F));
                    builder.AddCubicBezier(new Vector2(-2.25600004F, -11.7980003F), new Vector2(-1.94099998F, -12.125F), new Vector2(-1.54799998F, -12.125F));
                    builder.AddCubicBezier(new Vector2(-1.54799998F, -12.125F), new Vector2(1.56799996F, -12.125F), new Vector2(1.56799996F, -12.125F));
                    builder.AddCubicBezier(new Vector2(1.96099997F, -12.125F), new Vector2(2.27600002F, -11.7980003F), new Vector2(2.25999999F, -11.4040003F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_7()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_8(), Geometry_9() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            CanvasGeometry Geometry_8()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-0.0860000029F, 4.5F));
                    builder.AddCubicBezier(new Vector2(-0.818000019F, 4.5F), new Vector2(-1.42200005F, 4.36299992F), new Vector2(-1.898F, 4.09100008F));
                    builder.AddCubicBezier(new Vector2(-2.37400007F, 3.81900001F), new Vector2(-2.61199999F, 3.48900008F), new Vector2(-2.61199999F, 3.10100007F));
                    builder.AddCubicBezier(new Vector2(-2.61199999F, 2.69700003F), new Vector2(-2.37199998F, 2.36500001F), new Vector2(-1.89100003F, 2.10700011F));
                    builder.AddCubicBezier(new Vector2(-1.41100001F, 1.84899998F), new Vector2(-0.809000015F, 1.72000003F), new Vector2(-0.0860000029F, 1.72000003F));
                    builder.AddCubicBezier(new Vector2(0.646000028F, 1.72000003F), new Vector2(1.24600005F, 1.85099995F), new Vector2(1.71200001F, 2.11199999F));
                    builder.AddCubicBezier(new Vector2(2.1789999F, 2.37299991F), new Vector2(2.41199994F, 2.7019999F), new Vector2(2.41199994F, 3.10100007F));
                    builder.AddCubicBezier(new Vector2(2.41199994F, 3.50500011F), new Vector2(2.18099999F, 3.83999991F), new Vector2(1.71899998F, 4.10400009F));
                    builder.AddCubicBezier(new Vector2(1.25699997F, 4.36800003F), new Vector2(0.654999971F, 4.5F), new Vector2(-0.0860000029F, 4.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_9()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(2.22300005F, 2.92400002F));
                    builder.AddCubicBezier(new Vector2(2.22300005F, 2.92400002F), new Vector2(2.15100002F, 3.33299994F), new Vector2(2.15100002F, 3.33299994F));
                    builder.AddCubicBezier(new Vector2(2.13599992F, 3.70499992F), new Vector2(1.83000004F, 3.99900007F), new Vector2(1.45799994F, 3.99900007F));
                    builder.AddCubicBezier(new Vector2(1.45799994F, 3.99900007F), new Vector2(-1.40799999F, 3.98699999F), new Vector2(-1.40799999F, 3.98699999F));
                    builder.AddCubicBezier(new Vector2(-1.78100002F, 3.98699999F), new Vector2(-2.08699989F, 3.69199991F), new Vector2(-2.10100007F, 3.31900001F));
                    builder.AddCubicBezier(new Vector2(-2.10100007F, 3.31900001F), new Vector2(-2.16000009F, 2.93899989F), new Vector2(-2.16000009F, 2.93899989F));
                    builder.AddCubicBezier(new Vector2(-2.17499995F, 2.546F), new Vector2(-1.86000001F, 2.2190001F), new Vector2(-1.46700001F, 2.2190001F));
                    builder.AddCubicBezier(new Vector2(-1.46700001F, 2.2190001F), new Vector2(1.352F, 2.2190001F), new Vector2(1.352F, 2.2190001F));
                    builder.AddCubicBezier(new Vector2(1.745F, 2.2190001F), new Vector2(2.23900008F, 2.52999997F), new Vector2(2.22300005F, 2.92400002F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostDarkSlateGray_FF4A4A4A()
            {
                return (_gradientStop_0_AlmostDarkSlateGray_FF4A4A4A == null)
                    ? _gradientStop_0_AlmostDarkSlateGray_FF4A4A4A = _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0x4A, 0x4A, 0x4A))
                    : _gradientStop_0_AlmostDarkSlateGray_FF4A4A4A;
            }

            // - - Layer aggregator
            // - ShapeGroup: Group 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostGold_FFFFDA1C()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0xFF, 0xDA, 0x1C));
            }

            // Stop 1
            CompositionColorGradientStop GradientStop_0p531_AlmostDarkSlateGray_FF393939()
            {
                return (_gradientStop_0p531_AlmostDarkSlateGray_FF393939 == null)
                    ? _gradientStop_0p531_AlmostDarkSlateGray_FF393939 = _c.CreateColorGradientStop(0.531000018F, Color.FromArgb(0xFF, 0x39, 0x39, 0x39))
                    : _gradientStop_0p531_AlmostDarkSlateGray_FF393939;
            }

            // Stop 2
            CompositionColorGradientStop GradientStop_0p765_AlmostDarkSlateGray_FF2E2E2E()
            {
                return (_gradientStop_0p765_AlmostDarkSlateGray_FF2E2E2E == null)
                    ? _gradientStop_0p765_AlmostDarkSlateGray_FF2E2E2E = _c.CreateColorGradientStop(0.764999986F, Color.FromArgb(0xFF, 0x2E, 0x2E, 0x2E))
                    : _gradientStop_0p765_AlmostDarkSlateGray_FF2E2E2E;
            }

            // Stop 3
            CompositionColorGradientStop GradientStop_1_AlmostDarkSlateGray_FF242424()
            {
                return (_gradientStop_1_AlmostDarkSlateGray_FF242424 == null)
                    ? _gradientStop_1_AlmostDarkSlateGray_FF242424 = _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0x24, 0x24, 0x24))
                    : _gradientStop_1_AlmostDarkSlateGray_FF242424;
            }

            // - - Layer aggregator
            // - ShapeGroup: Group 1
            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostOrange_FFFDB705()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xFD, 0xB7, 0x05));
            }

            // Layer aggregator
            // Layer: exclamation-point-1
            CompositionContainerShape ContainerShape_0()
            {
                if (_containerShape_0 != null) { return _containerShape_0; }
                var result = _containerShape_0 = _c.CreateContainerShape();
                // Transforms: exclamation-point-1
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // Layer aggregator
            // Layer: exclamation-point-2
            CompositionContainerShape ContainerShape_1()
            {
                if (_containerShape_1 != null) { return _containerShape_1; }
                var result = _containerShape_1 = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                // Transforms: exclamation-point-2
                result.Shapes.Add(SpriteShape_2());
                return result;
            }

            // - Layer aggregator
            // ShapeGroup: Group 1
            CompositionLinearGradientBrush LinearGradientBrush()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostGold_FFFFDA1C());
                colorStops.Add(GradientStop_1_AlmostOrange_FFFDB705());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(-14.5120001F, -13.7740002F);
                result.EndPoint = new Vector2(13.1529999F, 14.8710003F);
                return result;
            }

            CompositionPath Path_0()
            {
                if (_path_0 != null) { return _path_0; }
                var result = _path_0 = new CompositionPath(Geometry_1());
                return result;
            }

            CompositionPath Path_1()
            {
                if (_path_1 != null) { return _path_1; }
                var result = _path_1 = new CompositionPath(Geometry_4());
                return result;
            }

            CompositionPath Path_2()
            {
                if (_path_2 != null) { return _path_2; }
                var result = _path_2 = new CompositionPath(Geometry_7());
                return result;
            }

            // - Layer aggregator
            // ShapeGroup: Group 1
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - Layer aggregator
            // - Layer: exclamation-point-1
            // Transforms: exclamation-point-1
            // Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                if (_pathGeometry_1 != null) { return _pathGeometry_1; }
                var result = _pathGeometry_1 = _c.CreatePathGeometry();
                return result;
            }

            // - - Layer aggregator
            // - Layer: exclamation-point-2
            // Transforms: exclamation-point-2
            // Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_2()
            {
                if (_pathGeometry_2 != null) { return _pathGeometry_2; }
                var result = _pathGeometry_2 = _c.CreatePathGeometry();
                return result;
            }

            // - - Layer aggregator
            // - Layer: exclamation-point-1
            // Transforms: exclamation-point-1
            CompositionRadialGradientBrush RadialGradientBrush_0()
            {
                var result = _c.CreateRadialGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostDarkSlateGray_FF4A4A4A());
                colorStops.Add(GradientStop_0p531_AlmostDarkSlateGray_FF393939());
                colorStops.Add(GradientStop_0p765_AlmostDarkSlateGray_FF2E2E2E());
                colorStops.Add(GradientStop_1_AlmostDarkSlateGray_FF242424());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.EllipseCenter = new Vector2(-6.875F, -15.3129997F);
                result.EllipseRadius = new Vector2(28.9526615F, 28.9526615F);
                return result;
            }

            // - - Layer aggregator
            // - Layer: exclamation-point-2
            // Transforms: exclamation-point-2
            CompositionRadialGradientBrush RadialGradientBrush_1()
            {
                var result = _c.CreateRadialGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostDarkSlateGray_FF4A4A4A());
                colorStops.Add(GradientStop_0p531_AlmostDarkSlateGray_FF393939());
                colorStops.Add(GradientStop_0p765_AlmostDarkSlateGray_FF2E2E2E());
                colorStops.Add(GradientStop_1_AlmostDarkSlateGray_FF242424());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.EllipseCenter = new Vector2(-6.875F, -15.3129997F);
                result.EllipseRadius = new Vector2(28.9526615F, 28.9526615F);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                if (_spriteShape_0 != null) { return _spriteShape_0; }
                var result = _spriteShape_0 = _c.CreateSpriteShape(PathGeometry_0());
                result.Offset = new Vector2(96F, 96F);
                result.FillBrush = LinearGradientBrush();
                return result;
            }

            // - Layer aggregator
            // Layer: exclamation-point-1
            // Path 2+Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                if (_spriteShape_1 != null) { return _spriteShape_1; }
                var result = _spriteShape_1 = _c.CreateSpriteShape(PathGeometry_1());
                result.Offset = new Vector2(96F, 96F);
                result.FillBrush = RadialGradientBrush_0();
                return result;
            }

            // - Layer aggregator
            // Layer: exclamation-point-2
            // Path 2+Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                if (_spriteShape_2 != null) { return _spriteShape_2; }
                var result = _spriteShape_2 = _c.CreateSpriteShape(PathGeometry_2());
                result.Offset = new Vector2(96F, 96F);
                result.FillBrush = RadialGradientBrush_1();
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            // - - - Layer aggregator
            // - - Layer: exclamation-point-1
            // - Transforms: exclamation-point-1
            // Path 2+Path 1.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.107142858F, Path_0(), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.285714298F, Path_1(), CubicBezierEasingFunction_0());
                // Frame 13.
                result.InsertKeyFrame(0.464285702F, Path_2(), CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: exclamation-point-2
            // - Transforms: exclamation-point-2
            // Path 2+Path 1.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_2(), StepThenHoldEasingFunction());
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, Path_2(), HoldThenStepEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.714285731F, Path_1(), CubicBezierEasingFunction_0());
                // Frame 25.
                result.InsertKeyFrame(0.892857134F, Path_0(), CubicBezierEasingFunction_0());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(192F, 192F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 1
                shapes.Add(SpriteShape_0());
                // Layer: exclamation-point-1
                shapes.Add(ContainerShape_0());
                // Layer: exclamation-point-2
                shapes.Add(ContainerShape_1());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                // Frame 0.
                if (_scaleVector2Animation != null) { return _scaleVector2Animation; }
                var result = _scaleVector2Animation = CreateVector2KeyFrameAnimation(0F, new Vector2(4F, 4F), StepThenHoldEasingFunction());
                // Frame 1.
                result.InsertKeyFrame(0.0357142873F, new Vector2(4F, 4F), HoldThenStepEasingFunction());
                // Frame 6.
                result.InsertKeyFrame(0.214285716F, new Vector2(3.79999995F, 3.79999995F), CubicBezierEasingFunction_0());
                // Frame 11.
                result.InsertKeyFrame(0.392857134F, new Vector2(4.19999981F, 4.19999981F), CubicBezierEasingFunction_0());
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, new Vector2(4F, 4F), CubicBezierEasingFunction_0());
                return result;
            }

            // - Layer aggregator
            // Layer: exclamation-point-1
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 13.
                result.InsertKeyFrame(0.464285702F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                return result;
            }

            // - Layer aggregator
            // Layer: exclamation-point-2
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                return result;
            }

            internal Caution_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(192F, 192F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_0.StartAnimation("Scale", ShapeVisibilityAnimation_0(), AnimationController_0());
                _containerShape_1.StartAnimation("Scale", ShapeVisibilityAnimation_1(), AnimationController_0());
                _pathGeometry_1.StartAnimation("Path", PathKeyFrameAnimation_0(), AnimationController_0());
                _pathGeometry_2.StartAnimation("Path", PathKeyFrameAnimation_1(), AnimationController_0());
                _spriteShape_0.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
                _spriteShape_1.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
                _spriteShape_2.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _containerShape_0.StopAnimation("Scale");
                _containerShape_1.StopAnimation("Scale");
                _pathGeometry_1.StopAnimation("Path");
                _pathGeometry_2.StopAnimation("Path");
                _spriteShape_0.StopAnimation("Scale");
                _spriteShape_1.StopAnimation("Scale");
                _spriteShape_2.StopAnimation("Scale");
            }

        }
    }
}
