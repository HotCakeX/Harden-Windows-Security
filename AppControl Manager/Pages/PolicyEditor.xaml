<?xml version="1.0" encoding="utf-8"?>
<Page
    x:Class="AppControlManager.Pages.PolicyEditor"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:AppControlManager.Pages"
    xmlns:VM="using:AppControlManager.ViewModels"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:customUI="using:AppControlManager.CustomUIElements"
    xmlns:behaviors="using:CommunityToolkit.WinUI.Behaviors"
    xmlns:PolicyEditor="using:AppControlManager.PolicyEditor"
    xmlns:controls="using:CommunityToolkit.WinUI.Controls"
    d:DataContext="{d:DesignInstance Type=VM:PolicyEditorVM}"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:animatedvisuals="using:AnimatedVisuals"
    xmlns:ui="using:CommunityToolkit.WinUI"
    xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    FlowDirection="{x:Bind AppSettings.ApplicationGlobalFlowDirection, Mode=OneWay}"
    mc:Ignorable="d">

    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <controls:WrapPanel Grid.Row="0" VerticalSpacing="4" HorizontalSpacing="4" Orientation="Vertical" Margin="6,0,6,10">

            <TextBlock x:Uid="PolicyEditorPageTitle" TextWrapping="WrapWholeWords" Style="{StaticResource BodyTextBlockStyle}" />

            <HyperlinkButton x:Uid="GuideButtonAtTop" NavigateUri="https://github.com/HotCakeX/Harden-Windows-Security/wiki/PolicyEditor" />

        </controls:WrapPanel>

        <InfoBar Grid.Row="1"
          Title="{x:Bind ViewModel.MainInfoBarTitle, Mode=OneWay}"
          IsOpen="{x:Bind ViewModel.MainInfoBarIsOpen, Mode=TwoWay}"
          Message="{x:Bind ViewModel.MainInfoBarMessage, Mode=OneWay}"
          Severity="{x:Bind ViewModel.MainInfoBarSeverity, Mode=OneWay}"
          IsClosable="{x:Bind ViewModel.MainInfoBarIsClosable, Mode=OneWay}" />

        <Border
            Grid.Row="2"
            Style="{StaticResource GridCardStyle}" Padding="8">

            <controls:WrapPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalSpacing="10" VerticalSpacing="10">

                <ProgressRing IsIndeterminate="True" Visibility="{x:Bind ViewModel.ProgressBarVisibility, Mode=OneWay}" />

                <customUI:ButtonV2 IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}" Click="{x:Bind ViewModel.BrowseForPolicyButton_Click}"
                    VerticalAlignment="Center" HorizontalAlignment="Center" ToolTipService.ToolTip="Browse for an App Control XML policy file">

                    <customUI:ButtonV2.Flyout>
                        <Flyout>

                            <controls:WrapPanel Orientation="Vertical" HorizontalSpacing="15" VerticalSpacing="15">

                                <Button x:Uid="ClearButton" Click="{x:Bind ViewModel.ClearButton_Click}" />

                                <TextBlock x:Uid="ViewSelectedFilesTextBlock" TextWrapping="WrapWholeWords" />

                                <TextBox Text="{x:Bind ViewModel.SelectedPolicyFile, Mode=OneWay}"
                                    TextWrapping="Wrap" AcceptsReturn="True" IsSpellCheckEnabled="False"
                                    MinWidth="400" IsReadOnly="True" />

                            </controls:WrapPanel>

                        </Flyout>
                    </customUI:ButtonV2.Flyout>

                    <customUI:ButtonV2.Content>
                        <StackPanel Orientation="Horizontal">
                            <AnimatedIcon Height="25" Width="25" Margin="-5,-5,0,-5">
                                <AnimatedIcon.Source>
                                    <animatedvisuals:CurlyArrow/>
                                </AnimatedIcon.Source>
                            </AnimatedIcon>
                            <TextBlock x:Uid="BrowseForPolicy" Margin="5,0,0,0" />
                        </StackPanel>
                    </customUI:ButtonV2.Content>

                </customUI:ButtonV2>

                <Button IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Center"
                        ToolTipService.ToolTip="Load the selected App Control policy to the user interface"
                        Click="{x:Bind ViewModel.ProcessData}">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal">
                            <AnimatedIcon Height="25" Width="25" Margin="-5,-5,0,-5">
                                <AnimatedIcon.Source>
                                    <animatedvisuals:Dotsload/>
                                </AnimatedIcon.Source>
                            </AnimatedIcon>
                            <TextBlock x:Uid="LoadPolicy" Margin="5,0,0,0" />
                        </StackPanel>
                    </Button.Content>
                </Button>

                <Button VerticalAlignment="Center" IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}" HorizontalAlignment="Center"
                        ToolTipService.ToolTip="Save the changes made to the List Views back to the policy XML file" Click="{x:Bind ViewModel.SaveChanges}">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal">
                            <AnimatedIcon Height="25" Width="25" Margin="-5,-5,0,-5">
                                <AnimatedIcon.Source>
                                    <animatedvisuals:Confetti/>
                                </AnimatedIcon.Source>
                            </AnimatedIcon>
                            <TextBlock x:Uid="SaveTheChanged" Margin="5,0,0,0" />
                        </StackPanel>
                    </Button.Content>
                </Button>

                <TextBox HorizontalAlignment="Center" VerticalAlignment="Center"
                         IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}" TextChanged="{x:Bind ViewModel.SearchBox_TextChanged}"
                         Text="{x:Bind ViewModel.SearchTextBox, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PlaceholderText="Search the data...  " />

                <ToggleSwitch HorizontalAlignment="Center" VerticalAlignment="Center" Toggled="{x:Bind ViewModel.ChangeTextSelectionsState}" OnContent="Text Selection is Enabled" OffContent="Text Selection is Disabled"
                              ToolTipService.ToolTip="Enable or Disable the ability to be able to select texts in the List View rows" IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"/>


                <Button IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}" VerticalAlignment="Center" HorizontalAlignment="Center"
                       ToolTipService.ToolTip="Clears all of the data loaded on the UI from the selected policy" Click="{x:Bind ViewModel.ClearData}">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal">
                            <AnimatedIcon Height="25" Width="25" Margin="-5,-5,0,-5">
                                <AnimatedIcon.Source>
                                    <animatedvisuals:TrashCan/>
                                </AnimatedIcon.Source>
                            </AnimatedIcon>
                            <TextBlock x:Uid="ClearTheData" Margin="5,0,0,0" />
                        </StackPanel>
                    </Button.Content>
                </Button>

            </controls:WrapPanel>
        </Border>

        <TabView VerticalAlignment="Stretch"
         IsAddTabButtonVisible="False" Grid.Row="3" TabWidthMode="SizeToContent"
         CanReorderTabs="False">
            <!--
            <TabView.Resources>
                <SolidColorBrush x:Key="TabViewBackground" Color="{ThemeResource SystemAccentColorLight2}"/>
            </TabView.Resources>
            -->

            <TabView.TabStripFooter>
                <Button x:Name="DiamondButton"
                        Background="Transparent"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Right"
                        x:Uid="PolicyEditorDiamondButton"
                        Margin="0,0,3,-6"
                        Padding="0"
                        BorderThickness="0">
                    <Button.Content>
                        <AnimatedIcon Height="28" Width="28" Margin="0">
                            <AnimatedIcon.Source>
                                <animatedvisuals:SparklingDiamond/>
                            </AnimatedIcon.Source>
                        </AnimatedIcon>
                    </Button.Content>
                    <Button.Flyout>
                        <Flyout x:Name="DiamondButtonFlyout">
                            <ScrollViewer VerticalScrollBarVisibility="Visible" VerticalScrollMode="Enabled" Padding="8" IsVerticalRailEnabled="True">
                                <StackPanel MaxWidth="400">
                                    <TextBlock Text="File-based Rules" Margin="0,0,0,10" TextWrapping="Wrap" Style="{StaticResource SubtitleTextBlockStyle}" />
                                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
                                        <Run Text="They encompass both the " />
                                        <Run Text="Allow" FontWeight="Bold" Foreground="Violet"/>
                                        <Run Text=" and " />
                                        <Run Text="Deny" FontWeight="Bold" Foreground="Violet"/>
                                        <Run Text=" classifications for the following rule types: "/>
                                        <Run Text="File Path, Hash, File Publisher, WHQL File Publisher, WildCard File Path, Package Family Name, Signed Version, File Name"/>
                                    </TextBlock>
                                    <TextBlock Text="{x:Bind ViewModel.AllowRulesCount, Mode=OneWay}" IsTextSelectionEnabled="True"/>
                                    <TextBlock Text="{x:Bind ViewModel.DenyRulesCount, Mode=OneWay}" IsTextSelectionEnabled="True"/>
                                    <TextBlock Text="{x:Bind ViewModel.FileRulesCount, Mode=OneWay}" IsTextSelectionEnabled="True"/>
                                    <TextBlock Text="{x:Bind ViewModel.FileAttributesCount, Mode=OneWay}" IsTextSelectionEnabled="True"/>
                                    <TextBlock Text="{x:Bind ViewModel.FilePublishersCount, Mode=OneWay}" IsTextSelectionEnabled="True"/>
                                    <TextBlock Text="{x:Bind ViewModel.WHQLFilePublishersCount, Mode=OneWay}" IsTextSelectionEnabled="True"/>
                                    <MenuFlyoutSeparator Margin="0,15,0,15"/>
                                    <TextBlock Text="Signature-based Rules" Margin="0,0,0,10" TextWrapping="Wrap" Style="{StaticResource SubtitleTextBlockStyle}"/>
                                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
                                        <Run Text="They encompass both the " />
                                        <Run Text="Allow" FontWeight="Bold" Foreground="Violet"/>
                                        <Run Text=" and " />
                                        <Run Text="Deny" FontWeight="Bold" Foreground="Violet"/>
                                        <Run Text=" classifications for the following rule types: "/>
                                        <Run Text="Publisher, Leaf Certificate, PCA Certificate, Root Certificate, WHQL Publisher, WHQL"/>
                                    </TextBlock>
                                    <TextBlock Text="{x:Bind ViewModel.WHQLPublishersCount, Mode=OneWay}" IsTextSelectionEnabled="True"/>
                                    <TextBlock Text="{x:Bind ViewModel.GenericSignersCount, Mode=OneWay}" IsTextSelectionEnabled="True"/>
                                    <TextBlock Text="{x:Bind ViewModel.UpdatePolicySignersCount, Mode=OneWay}" IsTextSelectionEnabled="True"/>
                                    <TextBlock Text="{x:Bind ViewModel.SupplementalPolicySignersCount, Mode=OneWay}" IsTextSelectionEnabled="True"/>
                                </StackPanel>
                            </ScrollViewer>
                        </Flyout>
                    </Button.Flyout>
                </Button>
            </TabView.TabStripFooter>

            <!-- File-based rules tab -->
            <TabViewItem Header="{x:Bind ViewModel.FileBasedCollectionTabItemHeader, Mode=OneWay}" IsClosable="False" MinWidth="280" MinHeight="40">

                <TabViewItem.IconSource>
                    <BitmapIconSource UriSource="/Assets/External/file.png" ShowAsMonochrome="False" />
                </TabViewItem.IconSource>
                <TabViewItem.Content>

                    <Grid>

                        <win:Grid.ChildrenTransitions>
                            <win:EntranceThemeTransition FromVerticalOffset="50" />
                            <win:RepositionThemeTransition IsStaggeringEnabled="False" />
                        </win:Grid.ChildrenTransitions>

                        <customUI:ListViewV2
                        RegistryKey="PolicyEditor_FileBasedRules"
                        IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                        SelectionMode="Extended"
                        ItemsSource="{x:Bind ViewModel.FileRulesCollection, Mode=OneWay}">

                            <customUI:ListViewV2.Header>

                                <Border CornerRadius="5" Background="Black">
                                    <interactivity:Interaction.Behaviors>
                                        <customUI:StickyHeaderBehaviorV2/>
                                    </interactivity:Interaction.Behaviors>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth1, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth2, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth3, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth4, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth5, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth6, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth7, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth8, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth9, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth10, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth11, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth12, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth13, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.FileBasedColumnWidth14, Mode=OneWay}" />
                                        </Grid.ColumnDefinitions>
                                        <TextBlock x:Uid="IDHeader" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="0" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock x:Uid="FriendlyNameHeader" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="1" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock Text="Hash" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="2" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock x:Uid="FileNameHeader" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="3" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock x:Uid="InternalNameHeader" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="4" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock x:Uid="FileDescriptionHeader" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="5" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock x:Uid="ProductNameHeader" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="6" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock x:Uid="FilePathHeader" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="7" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock x:Uid="MinimumFileVersionHeader" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="8" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock x:Uid="MaximumFileVersionHeader" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="9" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock x:Uid="PackageFamilyNameHeader" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="10" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock x:Uid="PackageVersionHeader" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="11" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock Text="App IDs" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="12" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock Text="Type" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="13" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                    </Grid>
                                </Border>
                            </customUI:ListViewV2.Header>

                            <!-- DataTemplate for ListView items -->
                            <customUI:ListViewV2.ItemTemplate>
                                <DataTemplate x:DataType="PolicyEditor:FileBasedRulesForListView">
                                    <!-- Setting Background="Transparent" on the Grid makes it hit-test visible, meaning that even areas without any child elements (like empty spaces in the column) will respond to pointer events.  -->
                                    <Grid Background="Transparent">

                                        <Grid.ContextFlyout>
                                            <MenuFlyout>

                                                <MenuFlyoutItem x:Uid="DeleteRow" Click="{x:Bind ParentViewModel.FileBasedRulesListView_DeleteItems}">
                                                    <MenuFlyoutItem.Icon>
                                                        <FontIcon Glyph="&#xE74D;" />
                                                    </MenuFlyoutItem.Icon>
                                                </MenuFlyoutItem>

                                            </MenuFlyout>
                                        </Grid.ContextFlyout>

                                        <Grid.ColumnDefinitions>
                                            <!-- Accessing the ColumnWidth variables in the ViewModel class through the reference
                                                that we include in every instance of the class that the "x:DataType" uses.
                                                This enables us to use compiled binding instead of "Binding". -->
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth1, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth2, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth3, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth4, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth5, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth6, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth7, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth8, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth9, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth10, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth11, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth12, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth13, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.FileBasedColumnWidth14, Mode=OneWay}" />
                                        </Grid.ColumnDefinitions>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind Id}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="0"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind FriendlyName}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="1"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind Hash}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="2"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind FileName}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="3"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind InternalName}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="4"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind FileDescription}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="5"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind ProductName}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="6"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind FilePath}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="7"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind MinimumFileVersion}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="8"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind MaximumFileVersion}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="9"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind PackageFamilyName}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="10"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind PackageVersion}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="11"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind AppIDs}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="12"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind Type}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="13"/>
                                    </Grid>
                                </DataTemplate>
                            </customUI:ListViewV2.ItemTemplate>
                        </customUI:ListViewV2>

                    </Grid>

                </TabViewItem.Content>
            </TabViewItem>

            <!-- Signature-based rules tab -->
            <TabViewItem Header="{x:Bind ViewModel.SignatureBasedCollectionTabItemHeader, Mode=OneWay}" IsClosable="False" MinWidth="300">
                <TabViewItem.IconSource>
                    <BitmapIconSource UriSource="/Assets/External/signature.png" ShowAsMonochrome="False" />
                </TabViewItem.IconSource>
                <TabViewItem.Content>

                    <Grid>

                        <win:Grid.ChildrenTransitions>
                            <win:EntranceThemeTransition FromVerticalOffset="50" />
                            <win:RepositionThemeTransition IsStaggeringEnabled="False" />
                        </win:Grid.ChildrenTransitions>

                        <customUI:ListViewV2
                        RegistryKey="PolicyEditor_SignatureBasedRules"
                        SelectionMode="Extended"
                        IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                        ItemsSource="{x:Bind ViewModel.SignatureRulesCollection, Mode=OneWay}">

                            <customUI:ListViewV2.Header>

                                <Border CornerRadius="5" Background="Black">
                                    <interactivity:Interaction.Behaviors>
                                        <customUI:StickyHeaderBehaviorV2/>
                                    </interactivity:Interaction.Behaviors>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="{x:Bind ViewModel.SignatureBasedColumnWidth1, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.SignatureBasedColumnWidth2, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.SignatureBasedColumnWidth3, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.SignatureBasedColumnWidth4, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.SignatureBasedColumnWidth5, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.SignatureBasedColumnWidth6, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ViewModel.SignatureBasedColumnWidth7, Mode=OneWay}" />
                                        </Grid.ColumnDefinitions>
                                        <TextBlock x:Uid="IDHeader" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="0" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock Text="Name" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="1" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock Text="Cert Root" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="2" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock Text="Cert Publisher" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="3" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock Text="Cert OEM ID" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="4" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock Text="Cert EKU" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="5" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                        <TextBlock Text="Cert Issuer" Foreground="LightGray" HorizontalAlignment="Stretch" Grid.Column="6" FontWeight="Bold" Margin="10,0,2,0" Padding="5"/>
                                    </Grid>
                                </Border>
                            </customUI:ListViewV2.Header>

                            <!-- DataTemplate for ListView items -->
                            <customUI:ListViewV2.ItemTemplate>
                                <DataTemplate x:DataType="PolicyEditor:SignatureBasedRulesForListView">
                                    <!-- Setting Background="Transparent" on the Grid makes it hit-test visible, meaning that even areas without any child elements (like empty spaces in the column) will respond to pointer events.  -->
                                    <Grid Background="Transparent">

                                        <Grid.ContextFlyout>
                                            <MenuFlyout>

                                                <MenuFlyoutItem x:Uid="DeleteRow" Click="{x:Bind ParentViewModel.SignatureBasedRulesListView_DeleteItems}">
                                                    <MenuFlyoutItem.Icon>
                                                        <FontIcon Glyph="&#xE74D;" />
                                                    </MenuFlyoutItem.Icon>
                                                </MenuFlyoutItem>

                                            </MenuFlyout>
                                        </Grid.ContextFlyout>

                                        <Grid.ColumnDefinitions>
                                            <!-- Accessing the ColumnWidth variables in the ViewModel class through the reference
                                        that we include in every instance of the class that the "x:DataType" uses.
                                        This enables us to use compiled binding instead of "Binding". -->
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.SignatureBasedColumnWidth1, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.SignatureBasedColumnWidth2, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.SignatureBasedColumnWidth3, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.SignatureBasedColumnWidth4, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.SignatureBasedColumnWidth5, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.SignatureBasedColumnWidth6, Mode=OneWay}" />
                                            <ColumnDefinition Width="{x:Bind ParentViewModel.SignatureBasedColumnWidth7, Mode=OneWay}" />
                                        </Grid.ColumnDefinitions>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind Id}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="0"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind Name}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="1"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind CertRoot}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="2"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind CertPublisher}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="3"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind CertOemID}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="4"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind CertificateEKU}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="5"/>
                                        <TextBlock IsTextSelectionEnabled="{x:Bind ParentViewModel.TextsAreSelectableToggleState, Mode=OneWay}" Text="{x:Bind CertIssuer}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="6"/>
                                    </Grid>
                                </DataTemplate>
                            </customUI:ListViewV2.ItemTemplate>
                        </customUI:ListViewV2>

                    </Grid>
                </TabViewItem.Content>
            </TabViewItem>


            <TabViewItem x:Uid="PolicyDetails" IsClosable="False" Visibility="Visible" MinWidth="200">
                <TabViewItem.IconSource>
                    <BitmapIconSource UriSource="/Assets/External/Sparkle.png" ShowAsMonochrome="False" />
                </TabViewItem.IconSource>
                <TabViewItem.Content>

                    <ScrollViewer>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <StackPanel HorizontalAlignment="Stretch"
                                    Spacing="{StaticResource SettingsCardSpacing}" Grid.Row="0" Margin="0,40,0,0">

                                <win:StackPanel.ChildrenTransitions>
                                    <win:EntranceThemeTransition FromVerticalOffset="50" />
                                    <win:RepositionThemeTransition IsStaggeringEnabled="False" />
                                </win:StackPanel.ChildrenTransitions>

                                <controls:SettingsCard x:Uid="PolicyEditorPolicyNameSettingsCard"                                    
                                                       HeaderIcon="{ui:BitmapIcon Source=ms-appx:///Assets/External/Name.png}"
                                                       IsClickEnabled="False">

                                    <TextBox IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                                             x:Uid="PolicyEditorPolicyName"
                                             Text="{x:Bind ViewModel.PolicyNameTextBox, Mode=TwoWay}" />

                                </controls:SettingsCard>

                                <controls:SettingsCard x:Uid="PolicyEditorPolicyIDSettingsCard"
                                                       HeaderIcon="{ui:BitmapIcon Source=ms-appx:///Assets/External/ID.png}"
                                                       IsClickEnabled="False">

                                    <TextBox IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                                             x:Uid="PolicyEditorPolicyID"
                                             Text="{x:Bind ViewModel.PolicyIDTextBox, Mode=TwoWay}" />

                                </controls:SettingsCard>

                                <controls:SettingsCard x:Uid="PolicyEditorBasePolicyIDSettingsCard"
                                                       HeaderIcon="{ui:BitmapIcon Source=ms-appx:///Assets/External/BasePolicyID.png}"
                                                       IsClickEnabled="False">

                                    <TextBox IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                                             x:Uid="PolicyEditorBasePolicyID"
                                             Text="{x:Bind ViewModel.PolicyBaseIDTextBox, Mode=TwoWay}" />

                                </controls:SettingsCard>

                                <controls:SettingsCard x:Uid="PolicyEditorPolicyVersionSettingsCard"
                                                       HeaderIcon="{ui:BitmapIcon Source=ms-appx:///Assets/External/Version.png}"
                                                       IsClickEnabled="False">

                                    <TextBox IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                                             x:Uid="PolicyEditorPolicyVersion"
                                             Text="{x:Bind ViewModel.PolicyVersionTextBox, Mode=TwoWay}" />

                                </controls:SettingsCard>

                                <customUI:SettingsCardV2 x:Uid="PolicyEditorPolicyTypeSettingsCard"
                                                         IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                                                         HeaderIcon="{ui:BitmapIcon Source=ms-appx:///Assets/External/PolicyType.png}">

                                    <ComboBox IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                                              x:Uid="PolicyEditorPolicyType"
                                              ItemsSource="{x:Bind ViewModel.ComboBoxSource, Mode=OneTime}"
                                              SelectedItem="{x:Bind ViewModel.PolicyTypeComboBox, Mode=TwoWay}"/>

                                </customUI:SettingsCardV2>

                                <controls:SettingsCard x:Uid="PolicyEditorPolicyInfoIDSettingsCard"
                                                       HeaderIcon="{ui:BitmapIcon Source=ms-appx:///Assets/External/PolicyIDInfo.png}"
                                                       IsClickEnabled="False">

                                    <TextBox IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                                             x:Uid="PolicyEditorPolicyInfoID"
                                             Text="{x:Bind ViewModel.PolicyInfoIDTextBox, Mode=TwoWay}" />

                                </controls:SettingsCard>

                                <customUI:SettingsCardV2 x:Uid="PolicyEditorHVCILevelSettingsCard"
                                                         IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                                                         HeaderIcon="{ui:BitmapIcon Source=ms-appx:///Assets/External/HVCIOption.png}">

                                    <ComboBox IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                                              x:Uid="PolicyEditorHVCILevel"
                                              SelectedItem="{x:Bind ViewModel.HVCIOptionComboBox, Mode=TwoWay}">
                                        <ComboBox.Items>
                                            <x:String>Enabled - Strict</x:String>
                                            <x:String>Enabled</x:String>
                                            <x:String>Debug Mode</x:String>
                                            <x:String>Disable is Allowed</x:String>
                                            <x:String>None</x:String>
                                        </ComboBox.Items>
                                    </ComboBox>

                                </customUI:SettingsCardV2>

                            </StackPanel>

                        </Grid>

                    </ScrollViewer>

                </TabViewItem.Content>
            </TabViewItem>


            <TabViewItem Header="Custom Policy Settings (Coming Soon)" IsClosable="False" Visibility="Visible" IsEnabled="False" MinWidth="260">
                <TabViewItem.IconSource>
                    <BitmapIconSource UriSource="/Assets/External/setting.png" ShowAsMonochrome="False" />
                </TabViewItem.IconSource>
                <TabViewItem.Content>
                    <StackPanel Padding="12">
                        <TextBlock Text="Custom Policy Settings (Coming Soon)" Style="{ThemeResource TitleTextBlockStyle}"/>
                    </StackPanel>
                </TabViewItem.Content>
            </TabViewItem>

        </TabView>

    </Grid>
</Page>
