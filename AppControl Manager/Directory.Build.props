<Project>
   <!-- https://aka.ms/dotnet/msbuild/customize -->
   <!-- https://learn.microsoft.com/visualstudio/msbuild/msbuild-reserved-and-well-known-properties -->

   <!-- .NET SDK projects only -->
   <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.csproj'">
       <TargetFramework>net10.0-windows10.0.26100.0</TargetFramework>
       <TargetPlatformMinVersion>10.0.22621.0</TargetPlatformMinVersion>
       <!-- https://learn.microsoft.com/dotnet/standard/frameworks#support-older-os-versions -->
       <SupportedOSPlatformVersion>10.0.22621.0</SupportedOSPlatformVersion>
       <!-- https://learn.microsoft.com/dotnet/core/project-sdk/msbuild-props#invariantglobalization -->
       <InvariantGlobalization>true</InvariantGlobalization>
       <!-- https://learn.microsoft.com/dotnet/core/tools/sdk-errors/netsdk1100 -->
       <!-- To satisfy the Dependency Graph action on GitHub -->
       <EnableWindowsTargeting>true</EnableWindowsTargeting>
       <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>
       <Platforms>x64;arm64</Platforms>
       <RuntimeIdentifiers>win-x64;win-arm64</RuntimeIdentifiers>
       <PublishProfile>win-$(Platform).pubxml</PublishProfile>
       <Nullable>enable</Nullable>
       <RepositoryUrl>https://github.com/HotCakeX/Harden-Windows-Security</RepositoryUrl>
       <ErrorReport>send</ErrorReport>
       <LangVersion>preview</LangVersion>
       <NeutralLanguage>en-US</NeutralLanguage>
       <RepositoryType>GitHub</RepositoryType>
       <!-- https://learn.microsoft.com/dotnet/core/project-sdk/msbuild-props#satelliteresourcelanguages -->
       <SatelliteResourceLanguages>en-US,he-IL</SatelliteResourceLanguages>
       <!-- https://learn.microsoft.com/dotnet/core/project-sdk/msbuild-props#rollforward -->
       <RollForward>LatestMajor</RollForward>
       <PackageProjectUrl>https://github.com/HotCakeX/Harden-Windows-Security</PackageProjectUrl>
       <!-- Can't use and don't need Ready2Run when using Native AOT -->
       <PublishReadyToRun>false</PublishReadyToRun>
       <IlcMaxVectorTBitWidth>512</IlcMaxVectorTBitWidth>
       <ImplicitUsings>disable</ImplicitUsings>
       <!-- https://learn.microsoft.com/dotnet/csharp/language-reference/unsafe-code -->
       <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
       <CheckForOverflowUnderflow>True</CheckForOverflowUnderflow>
       <!-- https://learn.microsoft.com/dotnet/core/deploying/native-aot/security#control-flow-guard -->
       <ControlFlowGuard>Guard</ControlFlowGuard>
       <!-- https://learn.microsoft.com/dotnet/core/deploying/native-aot/security#control-flow-enforcement-technology-shadow-stack-net-9 -->
       <CetCompat>true</CetCompat>
       <!--
            Defining the "HasPackageAndPublishMenuAddedByProject" property here allows the Solution
            Explorer "Package and Publish" context menu entry to be enabled for this project even if
            the Windows App SDK Nuget package has not yet been restored.
        -->
       <HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
       <GenerateAssemblyInfo>True</GenerateAssemblyInfo>
       <!-- WASDK isn't a .NET library so it can't use these features and cannot be affected
            We won't get warnings for these in compile time if a code or library relies on them.
            We can get NotSupportedException exception during runtime instead.
        -->
       <EnableUnsafeUTF7Encoding>false</EnableUnsafeUTF7Encoding>
       <TrimmerRemoveSymbols>true</TrimmerRemoveSymbols>
       <EnableUnsafeBinaryFormatterSerialization>false</EnableUnsafeBinaryFormatterSerialization>
       <XmlResolverIsNetworkingEnabledByDefault>false</XmlResolverIsNetworkingEnabledByDefault>
       <DebuggerSupport>false</DebuggerSupport>
       <!-- Disabled by default in the default ILC.exe config -->
       <EventSourceSupport>false</EventSourceSupport>
       <GenerateDocumentationFile>false</GenerateDocumentationFile>
       <!-- https://learn.microsoft.com/dotnet/core/extensions/configuration-generator -->
       <EnableConfigurationBindingGenerator>true</EnableConfigurationBindingGenerator>
       <!-- https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/advanced#subsystemversion -->
       <SubsystemVersion>6.04</SubsystemVersion>
       <!-- https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/security#highentropyva -->
       <HighEntropyVA>true</HighEntropyVA>
       <!-- https://learn.microsoft.com/dotnet/core/project-sdk/msbuild-props#optimizeimplicitlytriggeredbuild -->
	   <OptimizeImplicitlyTriggeredBuild>True</OptimizeImplicitlyTriggeredBuild>
	   <!-- https://learn.microsoft.com/en-us/dotnet/standard/native-interop/disabled-marshalling -->
	   <!-- https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#disableruntimemarshalling -->
	   <!-- https://github.com/dotnet/runtime/blob/main/docs/design/libraries/LibraryImportGenerator/Compatibility.md#bool-marshalling -->
	   <!-- https://learn.microsoft.com/en-us/dotnet/standard/native-interop/type-marshalling -->
	   <!-- Disabling runtime marshaling is better because of predictability, and problems arise during compilation rather than runtime. -->
	   <!-- It's also a best practice to disable runtime marshaling so we will be explicit rather than relying on implicit details. -->
	   <DisableRuntimeMarshalling>True</DisableRuntimeMarshalling>
   </PropertyGroup>

    <!-- .NET SDK projects only -->
	<ItemGroup Condition="'$(MSBuildProjectExtension)' == '.csproj'">
		<!--
        The default parameters passed to the ILC.exe during compilation
        https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/BuildIntegration/Microsoft.NETCore.Native.targets

        We can pass the parameters displayed by the - -help switch of the ilc.exe using the syntax below
        "C:\Users\HotCakeX\.nuget\packages\runtime.win-x64.microsoft.dotnet.ilcompiler\9.0.2\tools\ilc.exe"

        We can see what parameters were used by the NAOT code generator, ILC, by inspecting the response file located at:
        "Harden-Windows-Security\AppControl Manager\obj\x64\Release\net9.0-windows10.0.26100.0\win-x64\native\AppControlManager.ilc.rsp"

        -->

        <!-- The logs generated by the following parameters will be included in the binlog file specified by the -bl:X64MSBuildLog.binlog parameter on the CLI -->
		<IlcArg Include="--debug" />
		<IlcArg Include="--verbose" />

		<!--  <IlcArg Include="- -methodbodyfolding" /> -->

		<!--
            https://learn.microsoft.com/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibraryexw
            https://learn.microsoft.com/cpp/build/reference/dependentloadflag
            https://learn.microsoft.com/dotnet/core/deploying/native-aot/interop#direct-pinvoke-calls
            Without setting this, the result of the "dumpbin.exe /loadconfig HardenSystemSecurity.exe" will show: 0000 Dependent Load Flag
            After setting it we'll see: 0800 Dependent Load Flag.

            The dll names are case-insensitive.
            LibraryImport doesn't need the ".dll" extension.

            There are many items DirectPInvoked by default when Native AOT compiling: https://github.com/dotnet/runtimelab/issues/976#issuecomment-1322391689
			https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/BuildIntegration/Microsoft.NETCore.Native.Windows.targets
			https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/BuildIntegration/WindowsAPIs.txt
        -->
		<LinkerArg Include="/DEPENDENTLOADFLAG:0x800" />

        <!-- Each individual Project inheriting from this Directory.Build.props defines its own list of Direct PInvokes -->
		<!-- <DirectPInvoke Include="USER32" /> -->
		<!-- <DirectPInvoke Include="ADVAPI32" /> -->

	</ItemGroup>


   <!-- C++ projects only - Global Project Settings -->
   <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.vcxproj'">
       <VCProjectVersion>18.0</VCProjectVersion>
       <Keyword>Win32Proj</Keyword>
       <WindowsTargetPlatformVersion>10.0.26100.0</WindowsTargetPlatformVersion>
       <PlatformToolset>v145</PlatformToolset>
       <CharacterSet>Unicode</CharacterSet>
       <SpectreMitigation>false</SpectreMitigation>
       <RunCodeAnalysis>true</RunCodeAnalysis>
   </PropertyGroup>
   <!-- C++ projects only - Shared compiler & linker defaults -->
   <ItemDefinitionGroup Condition="'$(MSBuildProjectExtension)' == '.vcxproj'">
       <ClCompile>
           <ConformanceMode>true</ConformanceMode>
           <LanguageStandard>stdcpp23</LanguageStandard>
           <LanguageStandard_C>stdc17</LanguageStandard_C>
           <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
           <SDLCheck>true</SDLCheck>
           <WarningLevel>Level4</WarningLevel>
           <ControlFlowGuard>Guard</ControlFlowGuard>
       </ClCompile>
   </ItemDefinitionGroup>
</Project>