//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.2.250604.1+b02a3ee244
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile Activity.json
//       
//       Input file:
//           Activity.json (42079 bytes created 17:18+03:00 Jul 26 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    56 |
// |--------------------------+-------|
// | Expression animators     |     3 |
// | KeyFrame animators       |     4 |
// | Reference parameters     |     3 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     2 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     3 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |     3 |
// |--------------------------+-------|
// | Brushes                  |     3 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        activity
    // Frame rate:  24 fps
    // Frame count: 28
    // Duration:    1166.7 mS
    // _____________________________________________________________________________________________
    // |           Marker           |           Constant           | Frame |   mS   |   Progress   |
    // |____________________________|______________________________|_______|________|______________|
    // | NormalToPressed_Start      | M_NormalToPressed_Start      |     0 |    0.0 | 0F           |
    // | NormalToPressed_End        | M_NormalToPressed_End        |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_Start | M_PointerOverToPressed_Start |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    19 |  791.7 | 0.680357158F |
    // | PressedToNormal_Start      | M_PressedToNormal_Start      |    20 |  833.3 | 0.716071427F |
    // | PressedToNormal_End        | M_PressedToNormal_End        |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    28 | 1166.7 | 1F           |
    // ---------------------------------------------------------------------------------------------
    sealed partial class Activity
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 1.167 seconds.
        internal const long c_durationTicks = 11666666;

        // Marker: NormalToPressed_Start.
        internal const float M_NormalToPressed_Start = 0F;

        // Marker: NormalToPressed_End.
        internal const float M_NormalToPressed_End = 0.323214293F;

        // Marker: PointerOverToPressed_Start.
        internal const float M_PointerOverToPressed_Start = 0.323214293F;

        // Marker: PointerOverToPressed_End.
        internal const float M_PointerOverToPressed_End = 0.680357158F;

        // Marker: PressedToNormal_Start.
        internal const float M_PressedToNormal_Start = 0.716071427F;

        // Marker: PressedToNormal_End.
        internal const float M_PressedToNormal_End = 1F;

        // Marker: PressedToPointerOver_Start.
        internal const float M_PressedToPointerOver_Start = 1F;

        // Marker: PressedToPointerOver_End.
        internal const float M_PressedToPointerOver_End = 1F;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            var res = 
                new Activity_AnimatedVisual(
                    compositor
                    );
                res.CreateAnimations();
                return res;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 28d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 24d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(11666666);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 28d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPressed_Start", 0d },
                { "NormalToPressed_End", 0.323214285714286 },
                { "PointerOverToPressed_Start", 0.323214285714286 },
                { "PointerOverToPressed_End", 0.680357142857143 },
                { "PressedToNormal_Start", 0.716071428571429 },
                { "PressedToNormal_End", 1d },
                { "PressedToPointerOver_Start", 1d },
                { "PressedToPointerOver_End", 1d },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class Activity_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 11666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            CompositionColorBrush _animatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_0;
            CompositionColorBrush _animatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_1;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            CubicBezierEasingFunction _cubicBezierEasingFunction_3;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ColorKeyFrameAnimation CreateColorKeyFrameAnimation(float initialProgress, Color initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InterpolationColorSpace = CompositionColorSpace.Rgb;
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-21F, -0.93900001F));
                    builder.AddLine(new Vector2(-12F, -0.93900001F));
                    builder.AddLine(new Vector2(-10.4309998F, -4.92199993F));
                    builder.AddLine(new Vector2(-6.45699978F, 6.06099987F));
                    builder.AddLine(new Vector2(-1.53999996F, -12.9879999F));
                    builder.AddLine(new Vector2(3.65499997F, 12.9879999F));
                    builder.AddLine(new Vector2(7.59299994F, -4.96600008F));
                    builder.AddLine(new Vector2(10.6129999F, 4.01800013F));
                    builder.AddLine(new Vector2(12.6059999F, -0.93900001F));
                    builder.AddLine(new Vector2(21F, -0.93900001F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, -2F));
                    builder.AddCubicBezier(new Vector2(-1.10399997F, -2F), new Vector2(-2F, -1.10399997F), new Vector2(-2F, 0F));
                    builder.AddCubicBezier(new Vector2(-2F, 1.10399997F), new Vector2(-1.10399997F, 2F), new Vector2(0F, 2F));
                    builder.AddCubicBezier(new Vector2(1.10399997F, 2F), new Vector2(2F, 1.10399997F), new Vector2(2F, 0F));
                    builder.AddCubicBezier(new Vector2(2F, -1.10399997F), new Vector2(1.10399997F, -2F), new Vector2(0F, -2F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - Layer aggregator
            // -  Offset:<0.75, 21.75>
            // Color
            ColorKeyFrameAnimation ColorAnimation_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_0()
            {
                // Frame 0.
                var result = CreateColorKeyFrameAnimation(0F, Color.FromArgb(0xFF, 0xDD, 0x2C, 0x00), StepThenHoldEasingFunction());
                // Frame 3.
                // AlmostOrangeRed_FFDD2C00
                result.InsertKeyFrame(0.107142858F, Color.FromArgb(0xFF, 0xDD, 0x2C, 0x00), HoldThenStepEasingFunction());
                // Frame 5.
                // TransparentAlmostOrangeRed_00DD2C00
                result.InsertKeyFrame(0.178571433F, Color.FromArgb(0x00, 0xDD, 0x2C, 0x00), CubicBezierEasingFunction_1());
                // Frame 13.
                // TransparentAlmostOrangeRed_00DD2C00
                result.InsertKeyFrame(0.464285702F, Color.FromArgb(0x00, 0xDD, 0x2C, 0x00), CubicBezierEasingFunction_2());
                // Frame 15.
                // AlmostOrangeRed_FFDD2C00
                result.InsertKeyFrame(0.535714269F, Color.FromArgb(0xFF, 0xDD, 0x2C, 0x00), CubicBezierEasingFunction_3());
                return result;
            }

            // - - Layer aggregator
            // -  Offset:<42.75, 21.75>
            // Color
            ColorKeyFrameAnimation ColorAnimation_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_1()
            {
                // Frame 0.
                var result = CreateColorKeyFrameAnimation(0F, Color.FromArgb(0xFF, 0xDD, 0x2C, 0x00), StepThenHoldEasingFunction());
                // Frame 11.
                // AlmostOrangeRed_FFDD2C00
                result.InsertKeyFrame(0.392857134F, Color.FromArgb(0xFF, 0xDD, 0x2C, 0x00), HoldThenStepEasingFunction());
                // Frame 13.
                // TransparentAlmostOrangeRed_00DD2C00
                result.InsertKeyFrame(0.464285702F, Color.FromArgb(0x00, 0xDD, 0x2C, 0x00), CubicBezierEasingFunction_1());
                // Frame 23.
                // TransparentAlmostOrangeRed_00DD2C00
                result.InsertKeyFrame(0.821428597F, Color.FromArgb(0x00, 0xDD, 0x2C, 0x00), CubicBezierEasingFunction_2());
                // Frame 25.
                // AlmostOrangeRed_FFDD2C00
                result.InsertKeyFrame(0.892857134F, Color.FromArgb(0xFF, 0xDD, 0x2C, 0x00), CubicBezierEasingFunction_3());
                return result;
            }

            // - Layer aggregator
            // Offset:<0.75, 21.75>
            CompositionColorBrush AnimatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_0()
            {
                if (_animatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_0 != null) { return _animatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_0; }
                var result = _animatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_0 = _c.CreateColorBrush();
                return result;
            }

            // - Layer aggregator
            // Offset:<42.75, 21.75>
            CompositionColorBrush AnimatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_1()
            {
                if (_animatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_1 != null) { return _animatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_1; }
                var result = _animatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_1 = _c.CreateColorBrush();
                return result;
            }

            // - Layer aggregator
            // Offset:<-2, 6.9509983>
            CompositionColorBrush ColorBrush_AlmostTomato_FFF44336()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xF4, 0x43, 0x36));
            }

            CompositionPathGeometry PathGeometry_0()
            {
                if (_pathGeometry_0 != null) { return _pathGeometry_0; }
                var result = _pathGeometry_0 = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 1F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(_pathGeometry_0, "TrimStart", "Min(my.TStart,my.TEnd)", "my", _pathGeometry_0);
                BindProperty(_pathGeometry_0, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", _pathGeometry_0);
                return result;
            }

            CompositionPathGeometry PathGeometry_1()
            {
                return (_pathGeometry_1 == null)
                    ? _pathGeometry_1 = _c.CreatePathGeometry(new CompositionPath(Geometry_1()))
                    : _pathGeometry_1;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<24, 24.939>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(1F, 0F, 0F, 1F, 24F, 24.9389992F));;
                result.StrokeBrush = ColorBrush_AlmostTomato_FFF44336();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<3, 24>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 3F, 24F), AnimatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_0());;
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<45, 24>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 45F, 24F), AnimatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_1());;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F))
                    : _cubicBezierEasingFunction_1;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return (_cubicBezierEasingFunction_2 == null)
                    ? _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0F), new Vector2(0.666999996F, 1F))
                    : _cubicBezierEasingFunction_2;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_3()
            {
                return (_cubicBezierEasingFunction_3 == null)
                    ? _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0F), new Vector2(0.833000004F, 1F))
                    : _cubicBezierEasingFunction_3;
            }

            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_1_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 1F, StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.107142858F, 1F, HoldThenStepEasingFunction());
                // Frame 13.
                result.InsertKeyFrame(0.464285702F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.44600001F, 0F), new Vector2(0.833000004F, 1F)));
                // Frame 14.
                result.InsertKeyFrame(0.5F, 0F, CubicBezierEasingFunction_0());
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, 0F, CubicBezierEasingFunction_0());
                // Frame 25.
                result.InsertKeyFrame(0.892857134F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.574999988F, 1F)));
                return result;
            }

            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.107142858F, 0F, HoldThenStepEasingFunction());
                // Frame 13.
                result.InsertKeyFrame(0.464285702F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.44600001F, 0F), new Vector2(0.833000004F, 0.833000004F)));
                // Frame 14.
                result.InsertKeyFrame(0.5F, 0F, CubicBezierEasingFunction_0());
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, 0F, CubicBezierEasingFunction_0());
                // Frame 25.
                result.InsertKeyFrame(0.892857134F, 0F, _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0F), new Vector2(0.574999988F, 1F)));
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                var shapes = result.Shapes;
                // Offset:<-2, 6.9509983>
                shapes.Add(SpriteShape_0());
                // Offset:<0.75, 21.75>
                shapes.Add(SpriteShape_1());
                // Offset:<42.75, 21.75>
                shapes.Add(SpriteShape_2());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            internal Activity_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(48F, 48F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _animatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_0.StartAnimation("Color", ColorAnimation_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_0(), AnimationController_0());
                _animatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_1.StartAnimation("Color", ColorAnimation_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_1(), AnimationController_0());
                _pathGeometry_0.StartAnimation("TStart", TStartScalarAnimation_0_to_0(), AnimationController_0());
                _pathGeometry_0.StartAnimation("TEnd", TEndScalarAnimation_1_to_1(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _animatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_0.StopAnimation("Color");
                _animatedColorBrush_AlmostOrangeRed_FFDD2C00_to_AlmostOrangeRed_FFDD2C00_1.StopAnimation("Color");
                _pathGeometry_0.StopAnimation("TStart");
                _pathGeometry_0.StopAnimation("TEnd");
            }

        }
    }
}
