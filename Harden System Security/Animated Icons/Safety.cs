//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.1.240821.1+077322fa26
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile safety.json
//       
//       Input file:
//           safety.json (41787 bytes created 20:53+03:00 Jul 7 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    48 |
// |--------------------------+-------|
// | Expression animators     |     1 |
// | KeyFrame animators       |     4 |
// | Reference parameters     |     1 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |     2 |
// |--------------------------+-------|
// | Brushes                  |     2 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        shield
    // Frame rate:  24 fps
    // Frame count: 28
    // Duration:    1166.7 mS
    // _____________________________________________________________________________________________
    // |           Marker           |           Constant           | Frame |   mS   |   Progress   |
    // |____________________________|______________________________|_______|________|______________|
    // | NormalToPressed_Start      | M_NormalToPressed_Start      |     0 |    0.0 | 0F           |
    // | NormalToPressed_End        | M_NormalToPressed_End        |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_Start | M_PointerOverToPressed_Start |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    19 |  791.7 | 0.680357158F |
    // | PressedToNormal_Start      | M_PressedToNormal_Start      |    20 |  833.3 | 0.716071427F |
    // | PressedToNormal_End        | M_PressedToNormal_End        |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    28 | 1166.7 | 1F           |
    // ---------------------------------------------------------------------------------------------
    sealed partial class Safety
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 1.167 seconds.
        internal const long c_durationTicks = 11666666;

        // Marker: NormalToPressed_Start.
        internal const float M_NormalToPressed_Start = 0F;

        // Marker: NormalToPressed_End.
        internal const float M_NormalToPressed_End = 0.323214293F;

        // Marker: PointerOverToPressed_Start.
        internal const float M_PointerOverToPressed_Start = 0.323214293F;

        // Marker: PointerOverToPressed_End.
        internal const float M_PointerOverToPressed_End = 0.680357158F;

        // Marker: PressedToNormal_Start.
        internal const float M_PressedToNormal_Start = 0.716071427F;

        // Marker: PressedToNormal_End.
        internal const float M_PressedToNormal_End = 1F;

        // Marker: PressedToPointerOver_Start.
        internal const float M_PressedToPointerOver_Start = 1F;

        // Marker: PressedToPointerOver_End.
        internal const float M_PressedToPointerOver_End = 1F;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            var res = 
                new Safety_AnimatedVisual(
                    compositor
                    );
                res.CreateAnimations();
                return res;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 28d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 24d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(11666666);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 28d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPressed_Start", 0d },
                { "NormalToPressed_End", 0.323214285714286 },
                { "PointerOverToPressed_Start", 0.323214285714286 },
                { "PointerOverToPressed_End", 0.680357142857143 },
                { "PressedToNormal_Start", 0.716071428571429 },
                { "PressedToNormal_End", 1d },
                { "PressedToPointerOver_Start", 1d },
                { "PressedToPointerOver_End", 1d },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class Safety_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 11666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            CompositionSpriteShape _spriteShape_0;
            CompositionSpriteShape _spriteShape_1;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            CubicBezierEasingFunction _cubicBezierEasingFunction_3;
            CubicBezierEasingFunction _cubicBezierEasingFunction_4;
            CubicBezierEasingFunction _cubicBezierEasingFunction_5;
            CubicBezierEasingFunction _cubicBezierEasingFunction_6;
            CubicBezierEasingFunction _cubicBezierEasingFunction_7;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // - - - Shape tree root for layer: shield 
            // - - ShapeGroup: down
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, -20F));
                    builder.AddLine(new Vector2(-18F, -12F));
                    builder.AddLine(new Vector2(-18F, -4.97399998F));
                    builder.AddCubicBezier(new Vector2(-18F, 6.35699987F), new Vector2(-10.7489996F, 16.4169998F), new Vector2(0F, 20F));
                    builder.AddCubicBezier(new Vector2(10.7489996F, 16.4169998F), new Vector2(18F, 6.35699987F), new Vector2(18F, -4.97399998F));
                    builder.AddLine(new Vector2(18F, -12F));
                    builder.AddLine(new Vector2(0F, -20F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer: shield 
            // - - ShapeGroup: up
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 15.6820002F));
                    builder.AddCubicBezier(new Vector2(-8.42700005F, 12.3009996F), new Vector2(-14F, 4.13999987F), new Vector2(-14F, -5.03299999F));
                    builder.AddLine(new Vector2(-14F, -9.45899963F));
                    builder.AddLine(new Vector2(0F, -15.6820002F));
                    builder.AddLine(new Vector2(14F, -9.45899963F));
                    builder.AddLine(new Vector2(14F, -5.03200006F));
                    builder.AddCubicBezier(new Vector2(14F, 4.13999987F), new Vector2(8.42700005F, 12.3009996F), new Vector2(0F, 15.6820002F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - Shape tree root for layer: shield 
            // ShapeGroup: down
            CompositionColorBrush ColorBrush_AlmostBlueViolet_FF6C18FF()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x6C, 0x18, 0xFF));
            }

            // - Shape tree root for layer: shield 
            // ShapeGroup: up
            CompositionColorBrush ColorBrush_AlmostMediumBlue_FF2000C4()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x20, 0x00, 0xC4));
            }

            // - Shape tree root for layer: shield 
            // ShapeGroup: down
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - Shape tree root for layer: shield 
            // ShapeGroup: up
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // Shape tree root for layer: shield 
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                if (_spriteShape_0 != null) { return _spriteShape_0; }
                var result = _spriteShape_0 = _c.CreateSpriteShape(PathGeometry_0());
                result.Offset = new Vector2(24F, 24F);
                result.FillBrush = ColorBrush_AlmostBlueViolet_FF6C18FF();
                return result;
            }

            // Shape tree root for layer: shield 
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                if (_spriteShape_1 != null) { return _spriteShape_1; }
                var result = _spriteShape_1 = _c.CreateSpriteShape(PathGeometry_1());
                result.Offset = new Vector2(24F, 24F);
                result.FillBrush = ColorBrush_AlmostMediumBlue_FF2000C4();
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Shape tree root for layer: shield
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.39199999F, 0.317999989F), new Vector2(0.666999996F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.363000005F, 0F), new Vector2(0.833000004F, 1F))
                    : _cubicBezierEasingFunction_1;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return (_cubicBezierEasingFunction_2 == null)
                    ? _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0F), new Vector2(0.833000004F, 1F))
                    : _cubicBezierEasingFunction_2;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_3()
            {
                return (_cubicBezierEasingFunction_3 == null)
                    ? _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.689999998F, 1F))
                    : _cubicBezierEasingFunction_3;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_4()
            {
                return (_cubicBezierEasingFunction_4 == null)
                    ? _cubicBezierEasingFunction_4 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.768999994F, 0.990999997F))
                    : _cubicBezierEasingFunction_4;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_5()
            {
                return (_cubicBezierEasingFunction_5 == null)
                    ? _cubicBezierEasingFunction_5 = _c.CreateCubicBezierEasingFunction(new Vector2(0.280999988F, 0.0219999999F), new Vector2(0.833000004F, 1F))
                    : _cubicBezierEasingFunction_5;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_6()
            {
                return (_cubicBezierEasingFunction_6 == null)
                    ? _cubicBezierEasingFunction_6 = _c.CreateCubicBezierEasingFunction(new Vector2(0.444000006F, 0.0130000003F), new Vector2(0.762000024F, 0.990999997F))
                    : _cubicBezierEasingFunction_6;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_7()
            {
                return (_cubicBezierEasingFunction_7 == null)
                    ? _cubicBezierEasingFunction_7 = _c.CreateCubicBezierEasingFunction(new Vector2(0.246000007F, 0F), new Vector2(0.207000002F, 1F))
                    : _cubicBezierEasingFunction_7;
            }

            // - Shape tree root for layer: shield 
            // ShapeGroup: down
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.107142858F, 0F, HoldThenStepEasingFunction());
                // Frame 6.
                result.InsertKeyFrame(0.214285716F, 10F, CubicBezierEasingFunction_0());
                // Frame 12.
                result.InsertKeyFrame(0.428571433F, -9F, CubicBezierEasingFunction_1());
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, 3F, CubicBezierEasingFunction_2());
                // Frame 20.
                result.InsertKeyFrame(0.714285731F, -3F, CubicBezierEasingFunction_2());
                // Frame 26.
                result.InsertKeyFrame(0.928571403F, 0F, CubicBezierEasingFunction_2());
                return result;
            }

            // - Shape tree root for layer: shield 
            // ShapeGroup: up
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 4.
                result.InsertKeyFrame(0.142857149F, 0F, HoldThenStepEasingFunction());
                // Frame 7.
                result.InsertKeyFrame(0.25F, 10F, CubicBezierEasingFunction_0());
                // Frame 13.
                result.InsertKeyFrame(0.464285702F, -9F, CubicBezierEasingFunction_1());
                // Frame 18.
                result.InsertKeyFrame(0.642857134F, 3F, CubicBezierEasingFunction_2());
                // Frame 21.
                result.InsertKeyFrame(0.75F, -3F, CubicBezierEasingFunction_2());
                // Frame 27.
                result.InsertKeyFrame(0.964285731F, 0F, CubicBezierEasingFunction_2());
                return result;
            }

            // Shape tree root for layer: shield
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                var shapes = result.Shapes;
                // ShapeGroup: down
                shapes.Add(SpriteShape_0());
                // ShapeGroup: up
                shapes.Add(SpriteShape_1());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Shape tree root for layer: shield 
            // ShapeGroup: down
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.107142858F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 6.
                result.InsertKeyFrame(0.214285716F, new Vector2(0.899999976F, 0.899999976F), CubicBezierEasingFunction_3());
                // Frame 12.
                result.InsertKeyFrame(0.428571433F, new Vector2(1.13F, 1.13F), CubicBezierEasingFunction_4());
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, new Vector2(0.949999988F, 0.949999988F), CubicBezierEasingFunction_5());
                // Frame 20.
                result.InsertKeyFrame(0.714285731F, new Vector2(1.02999997F, 1.02999997F), CubicBezierEasingFunction_6());
                // Frame 26.
                result.InsertKeyFrame(0.928571403F, new Vector2(1F, 1F), CubicBezierEasingFunction_7());
                return result;
            }

            // - Shape tree root for layer: shield 
            // ShapeGroup: up
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 4.
                result.InsertKeyFrame(0.142857149F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 7.
                result.InsertKeyFrame(0.25F, new Vector2(0.899999976F, 0.899999976F), CubicBezierEasingFunction_3());
                // Frame 13.
                result.InsertKeyFrame(0.464285702F, new Vector2(1.13F, 1.13F), CubicBezierEasingFunction_4());
                // Frame 18.
                result.InsertKeyFrame(0.642857134F, new Vector2(0.949999988F, 0.949999988F), CubicBezierEasingFunction_5());
                // Frame 21.
                result.InsertKeyFrame(0.75F, new Vector2(1.02999997F, 1.02999997F), CubicBezierEasingFunction_6());
                // Frame 27.
                result.InsertKeyFrame(0.964285731F, new Vector2(1F, 1F), CubicBezierEasingFunction_7());
                return result;
            }

            internal Safety_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(48F, 48F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _spriteShape_0.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_0(), AnimationController_0());
                _spriteShape_0.StartAnimation("Scale", ScaleVector2Animation_0(), AnimationController_0());
                _spriteShape_1.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_1(), AnimationController_0());
                _spriteShape_1.StartAnimation("Scale", ScaleVector2Animation_1(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _spriteShape_0.StopAnimation("RotationAngleInDegrees");
                _spriteShape_0.StopAnimation("Scale");
                _spriteShape_1.StopAnimation("RotationAngleInDegrees");
                _spriteShape_1.StopAnimation("Scale");
            }

        }
    }
}
