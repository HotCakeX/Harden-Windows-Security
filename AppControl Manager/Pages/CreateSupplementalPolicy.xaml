<?xml version="1.0" encoding="utf-8"?>
<Page
    x:Class="AppControlManager.Pages.CreateSupplementalPolicy"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:AppControlManager.Pages"
    xmlns:others="using:AppControlManager.Others"
    xmlns:ani="using:CommunityToolkit.WinUI.Animations"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:behaviors="using:CommunityToolkit.WinUI.Behaviors"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="using:CommunityToolkit.WinUI"
    xmlns:customUI="using:AppControlManager.CustomUIElements"
    xmlns:controls="using:CommunityToolkit.WinUI.Controls"
    xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:animatedvisuals="using:AnimatedVisuals"
    FlowDirection="{x:Bind AppSettings.ApplicationGlobalFlowDirection, Mode=OneWay}"
    mc:Ignorable="d">

    <ScrollView>

        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <Grid.Resources>

                <!-- For the Packaged Apps ListView Grouping -->
                <CollectionViewSource x:Name="PackagedAppsCollectionViewSource"
                                      Source="{x:Bind ViewModel.PFNBasedAppsListItemsSource, Mode=OneWay}"
                                      IsSourceGrouped="True"/>

                <!-- Defines a single App that is displayed in the ListView -->
                <DataTemplate x:Key="PackagedAppsListViewTemplate" x:DataType="others:PackagedAppView">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Border CornerRadius="15"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                BorderThickness="0"
                                Grid.RowSpan="3"
                                Grid.Column="0">
                            <Image Width ="32"
                                   Height="32"
                                   Margin="6"
                                   Source="{x:Bind Logo}" />
                        </Border>

                        <TextBlock Grid.Column="1"
                                   Grid.Row="0"
                                   Text="{x:Bind DisplayName}"
                                   x:Phase="1"
                                   Style="{ThemeResource BaseTextBlockStyle}"
                                   Margin="12,6,0,0"/>

                        <TextBlock Grid.Column="1"
                                   Grid.Row="1"
                                   Text="{x:Bind Version}"
                                   x:Phase="2"
                                   Style="{ThemeResource BodyTextBlockStyle}"
                                   Margin="12,6,0,0"/>

                        <TextBlock Grid.Column="1"
                                   Grid.Row="2"
                                   Text="{x:Bind PackageFamilyName}"
                                   x:Phase="2"
                                   Style="{ThemeResource BodyTextBlockStyle}"
                                   Margin="12,0,0,6"/>
                    </Grid>
                </DataTemplate>

            </Grid.Resources>

            <controls:WrapPanel Grid.Row="0" VerticalSpacing="4" HorizontalSpacing="4" Orientation="Vertical" Margin="6,0,6,10">

                <TextBlock x:Uid="CreateSupplementalPolicyPageTitle" TextWrapping="WrapWholeWords" Style="{StaticResource BodyTextBlockStyle}" />

                <HyperlinkButton x:Uid="GuideButtonAtTop" NavigateUri="https://github.com/HotCakeX/Harden-Windows-Security/wiki/Create-Supplemental-App-Control-Policy" />

            </controls:WrapPanel>
            <!--
            <Border Grid.Row="1" ui:Effects.Shadow="{StaticResource BorderShadow}" BorderThickness="0" Margin="15,0,15,0">
                <ani:Explicit.Animations>
                    <ani:AnimationSet x:Name="ShadowEnterAnimation">
                        <ani:BlurRadiusDropShadowAnimation To="20"/>
                    </ani:AnimationSet>

                    <ani:AnimationSet x:Name="ShadowExitAnimation">
                        <ani:BlurRadiusDropShadowAnimation To="10"/>
                    </ani:AnimationSet>
                </ani:Explicit.Animations>
                <interactivity:Interaction.Behaviors>
                    <interactivity:EventTriggerBehavior EventName="PointerEntered">
                        <behaviors:StartAnimationAction Animation="{x:Bind ShadowEnterAnimation}"/>
                    </interactivity:EventTriggerBehavior>
                    <interactivity:EventTriggerBehavior EventName="PointerExited">
                        <behaviors:StartAnimationAction Animation="{x:Bind ShadowExitAnimation}"/>
                    </interactivity:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>

            -->
            <Border x:Name="AnimatedBorder"
                Grid.Row="1"
                ui:Effects.Shadow="{StaticResource BorderShadow}"
                BorderThickness="0"
                Margin="15,0,15,0"
                PointerEntered="{x:Bind OnBorderPointerEntered}"
                PointerExited="{x:Bind OnBorderPointerExited}">

                <ani:Explicit.Animations>
                    <ani:AnimationSet x:Name="ShadowEnterAnimation">
                        <ani:BlurRadiusDropShadowAnimation To="20"/>
                    </ani:AnimationSet>

                    <ani:AnimationSet x:Name="ShadowExitAnimation">
                        <ani:BlurRadiusDropShadowAnimation To="10"/>
                    </ani:AnimationSet>
                </ani:Explicit.Animations>

                <Border Height="60" Background="{StaticResource SmokeFillColorDefaultBrush}" BorderThickness="0" CornerRadius="18">

                    <Grid Margin="10,0,0,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="230" Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <StackPanel Orientation="Horizontal" Grid.Column="0" Grid.ColumnSpan="1" Margin="0,0,10,0" VerticalAlignment="Center">

                            <TextBlock x:Uid="Mode" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,0,5,0" FontWeight="Bold" />

                            <ComboBox SelectedIndex="{x:Bind ViewModel.OperationModeComboBoxSelectedIndex, Mode=TwoWay}"
                          x:Uid="PolicyCreationOperationModeComboBox">
                                <ComboBoxItem x:Uid="CreateNewPolicyComboBoxItem"/>
                                <ComboBoxItem x:Uid="AddToExistingPolicyComboBoxItem"/>
                            </ComboBox>

                        </StackPanel>

                        <Border Grid.Column="1" Grid.ColumnSpan="1" Background="Transparent" BorderThickness="0" CornerRadius="18">

                            <controls:WrapPanel HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalSpacing="15">

                                <customUI:ButtonV2 x:Uid="SelectPolicyFileToAddRulesToButton"
                                       Margin="15,0,0,0"
                                       Click="{x:Bind ViewModel.PolicyFileToMergeWithButton_Click}"
                                       IsEnabled="{x:Bind ViewModel.PolicyFileToMergeWithPickerButtonIsEnabled, Mode=OneWay}">

                                    <customUI:ButtonV2.Flyout>
                                        <Flyout>

                                            <controls:WrapPanel Orientation="Vertical" HorizontalSpacing="15" VerticalSpacing="15">

                                                <Button x:Uid="ClearButton" Click="{x:Bind ViewModel.ClearPolicyFileToMergeWith}" />

                                                <TextBlock x:Uid="ViewSelectedFilesTextBlock" TextWrapping="WrapWholeWords" />

                                                <TextBox Text="{x:Bind ViewModel.PolicyFileToMergeWith, Mode=OneWay}"
                                                    TextWrapping="Wrap" AcceptsReturn="True" IsSpellCheckEnabled="False"
                                                    MinWidth="400" IsReadOnly="True" />

                                            </controls:WrapPanel>

                                        </Flyout>
                                    </customUI:ButtonV2.Flyout>

                                </customUI:ButtonV2>

                            </controls:WrapPanel>

                        </Border>

                    </Grid>
                </Border>

            </Border>

            <StackPanel HorizontalAlignment="Stretch" Spacing="{StaticResource SettingsCardSpacing}" Grid.Row="2" Margin="0,40,0,0">

                <win:StackPanel.ChildrenTransitions>
                    <win:EntranceThemeTransition FromVerticalOffset="50" />
                    <win:RepositionThemeTransition IsStaggeringEnabled="False" />
                </win:StackPanel.ChildrenTransitions>

                <!-- Files and Folders Scan -->
                <controls:SettingsExpander x:Uid="SupplementalFilesAndFoldersSettingsCard"
                                           HeaderIcon="{ui:FontIcon Glyph=&#xE71D;}"
                                           IsExpanded="{x:Bind ViewModel.FilesAndFoldersSettingsExpanderIsExpanded, Mode=TwoWay}">

                    <controls:SettingsExpander.ItemsHeader>
                        <customUI:InfoBarV2
                            x:Uid="CurrentStatusInfoBar"
                            BorderThickness="0"
                            CornerRadius="0"
                            IsIconVisible="True"
                            Title="{x:Bind ViewModel.FilesAndFoldersInfoBarTitle, Mode=OneWay}"
                            Message="{x:Bind ViewModel.FilesAndFoldersInfoBarMessage, Mode=OneWay}"
                            IsOpen="{x:Bind ViewModel.FilesAndFoldersInfoBarIsOpen, Mode=TwoWay}"
                            IsClosable="{x:Bind ViewModel.FilesAndFoldersInfoBarIsClosable, Mode=OneWay}"
                            Severity="{x:Bind ViewModel.FilesAndFoldersInfoBarSeverity, Mode=OneWay}">
                            <customUI:InfoBarV2.ActionButton>
                                <Button x:Uid="OpenInPolicyEditorButton" Visibility="{x:Bind ViewModel.FilesAndFoldersInfoBarActionButtonVisibility, Mode=OneWay}" Click="{x:Bind ViewModel.OpenInPolicyEditor_FilesAndFolders}" />
                            </customUI:InfoBarV2.ActionButton>
                        </customUI:InfoBarV2>
                    </controls:SettingsExpander.ItemsHeader>


                    <controls:WrapPanel Orientation="Horizontal" HorizontalSpacing="6" VerticalSpacing="10">

                        <customUI:AnimatedCancellableButton x:Uid="CreateSupplementalPolicyButton"
                                Style="{StaticResource AccentButtonStyle}"
                                Margin="0,0,15,0"
                                Click="{x:Bind ViewModel.CreateFilesAndFoldersSupplementalPolicyButton_Click}"
                                CancelMethod="{x:Bind ViewModel.FilesAndFoldersCancellableButton.Cancel}"
                                ExternalOperationInProgress="{x:Bind ViewModel.FilesAndFoldersCancellableButton.IsOperationInProgress, Mode=OneWay}"
                                ExternalIsCancelState="{x:Bind ViewModel.FilesAndFoldersCancellableButton.IsCancelState, Mode=OneWay}"
                                ExternalIsCancellingState="{x:Bind ViewModel.FilesAndFoldersCancellableButton.IsCancellingState, Mode=OneWay}"
                                ExternalIsAnimating="{x:Bind ViewModel.FilesAndFoldersCancellableButton.IsAnimating, Mode=OneWay}"
                                ExternalButtonContent="{x:Bind ViewModel.FilesAndFoldersCancellableButton.ButtonContent, Mode=OneWay}"
                                ExternalOriginalText="{x:Bind ViewModel.FilesAndFoldersCancellableButton.OriginalText, Mode=OneWay}"
                                ExternalInternalIsCancelState="{x:Bind ViewModel.FilesAndFoldersCancellableButton.InternalIsCancelState, Mode=OneWay}"
                                ExternalInternalIsCancellingState="{x:Bind ViewModel.FilesAndFoldersCancellableButton.InternalIsCancellingState, Mode=OneWay}"
                                ExternalInternalIsAnimating="{x:Bind ViewModel.FilesAndFoldersCancellableButton.InternalIsAnimating, Mode=OneWay}"
                                ExternalInternalIsOperationInProgress="{x:Bind ViewModel.FilesAndFoldersCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
                                ExternalInternalSuppressExternalClick="{x:Bind ViewModel.FilesAndFoldersCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
                                ExternalShadowAnimationRunning="{x:Bind ViewModel.FilesAndFoldersCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
                                ExternalOperationStarted="{x:Bind ViewModel.FilesAndFoldersCancellableButton.OperationStarted, Mode=OneWay}" />

                        <ToggleButton IsChecked="{x:Bind ViewModel.FilesAndFoldersDeployButton, Mode=TwoWay}"
                                      IsEnabled="{x:Bind ViewModel.FilesAndFoldersElementsAreEnabled, Mode=OneWay}"
                                      x:Uid="DeployAfterCreationButton"
                                      Margin="0,0,15,0" />

                    </controls:WrapPanel>

                    <controls:SettingsExpander.Items>

                        <customUI:SettingsCardV3 Visibility="{x:Bind ViewModel.FilesAndFoldersBrowseForFilesSettingsCardVisibility, Mode=OneWay}"
                                                 x:Uid="BrowseForFilesPolicyCreationSettingsCard">

                            <Button IsEnabled="{x:Bind ViewModel.FilesAndFoldersElementsAreEnabled, Mode=OneWay}"
                                    x:Uid="FileBrowseButton"
                                    Click="{x:Bind ViewModel.FilesAndFoldersBrowseForFilesButton_Click}">

                                <Button.Flyout>
                                    <Flyout>

                                        <controls:WrapPanel Orientation="Vertical" HorizontalSpacing="15" VerticalSpacing="15">

                                            <Button x:Uid="ClearButton" Click="{x:Bind ViewModel.FilesAndFoldersBrowseForFilesButton_Flyout_Clear_Click}" />

                                            <TextBlock x:Uid="ViewSelectedFilesTextBlock" TextWrapping="WrapWholeWords" />

                                            <ListBox MinWidth="400" SelectionMode="Single" ItemsSource="{x:Bind ViewModel.filesAndFoldersFilePaths, Mode=OneWay}" />

                                        </controls:WrapPanel>

                                    </Flyout>
                                </Button.Flyout>

                            </Button>

                        </customUI:SettingsCardV3>

                        <customUI:SettingsCardV3 x:Uid="BrowseForFoldersPolicyCreationSettingsCard">

                            <Button IsEnabled="{x:Bind ViewModel.FilesAndFoldersElementsAreEnabled, Mode=OneWay}"
                                    x:Uid="FolderBrowseButton"
                                    Click="{x:Bind ViewModel.FilesAndFoldersBrowseForFoldersButton_Click}">

                                <Button.Flyout>
                                    <Flyout>

                                        <controls:WrapPanel Orientation="Vertical" HorizontalSpacing="15" VerticalSpacing="15">

                                            <Button x:Uid="ClearButton" Click="{x:Bind ViewModel.FilesAndFoldersBrowseForFoldersButton_Flyout_Clear_Click}" />

                                            <TextBlock x:Uid="ViewSelectedFoldersTextBlock" TextWrapping="WrapWholeWords" />

                                            <ListBox MinWidth="400" SelectionMode="Single" ItemsSource="{x:Bind ViewModel.filesAndFoldersFolderPaths, Mode=OneWay}" />

                                        </controls:WrapPanel>

                                    </Flyout>
                                </Button.Flyout>

                            </Button>

                        </customUI:SettingsCardV3>

                        <controls:SettingsCard Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                               x:Uid="SupplementalPolicyNameSettingsCard"
                                               IsClickEnabled="False"
                                               IsActionIconVisible="False">
                            <TextBox IsEnabled="{x:Bind ViewModel.FilesAndFoldersElementsAreEnabled, Mode=OneWay}"
                                     Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                     Text="{x:Bind ViewModel.FilesAndFoldersSupplementalPolicyName, Mode=TwoWay}"
                                     x:Uid="SupplementalPolicyNameTextBox"/>
                        </controls:SettingsCard>

                        <customUI:SettingsCardV3 Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                                 x:Uid="BasePolicyFileSelectionSettingsCard">

                            <Button IsEnabled="{x:Bind ViewModel.FilesAndFoldersElementsAreEnabled, Mode=OneWay}"
                                    x:Name="FilesAndFoldersBrowseForBasePolicyButton"
                                    Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                    x:Uid="PickPolicyFileButton"
                                    Click="{x:Bind ViewModel.FilesAndFoldersBrowseForBasePolicyButton_Click}">

                                <Button.Flyout>
                                    <Flyout x:Name="FilesAndFoldersBrowseForBasePolicyButton_FlyOut">

                                        <controls:WrapPanel Orientation="Vertical" HorizontalSpacing="15" VerticalSpacing="15">

                                            <Button x:Uid="ClearButton" Click="{x:Bind ViewModel.FilesAndFoldersBrowseForBasePolicyButton_Flyout_Clear_Click}" />

                                            <TextBlock x:Uid="ViewSelectedBasePolicyTextBlock" TextWrapping="WrapWholeWords" />

                                            <TextBox Text="{x:Bind ViewModel.FilesAndFoldersBasePolicyPath, Mode=OneWay}"
                                                     TextWrapping="Wrap"
                                                     AcceptsReturn="True"
                                                     IsSpellCheckEnabled="False"
                                                     MinWidth="400"
                                                     IsReadOnly="True" />

                                        </controls:WrapPanel>

                                    </Flyout>
                                </Button.Flyout>

                                <Button.Content>
                                    <controls:WrapPanel Orientation="Horizontal">

                                        <AnimatedIcon Visibility="{x:Bind ViewModel.FilesAndFoldersBasePolicyLightAnimatedIconVisibility, Mode=OneWay}" Height="20" Margin="0,0,5,0" Width="20">
                                            <AnimatedIcon.Source>
                                                <animatedvisuals:Light/>
                                            </AnimatedIcon.Source>
                                        </AnimatedIcon>

                                        <TextBlock x:Uid="BrowseTextBlock" />

                                    </controls:WrapPanel>
                                </Button.Content>

                            </Button>

                        </customUI:SettingsCardV3>

                        <customUI:SettingsCardV2 x:Uid="SelectScanLevelSettingsCard">

                            <ComboBox IsEnabled="{x:Bind ViewModel.FilesAndFoldersElementsAreEnabled, Mode=OneWay}"
                                      SelectedItem="{x:Bind ViewModel.FilesAndFoldersScanLevelComboBoxSelectedItem, Mode=TwoWay}">
                                <x:String>File Publisher</x:String>
                                <x:String>Publisher</x:String>
                                <x:String>Hash</x:String>
                                <x:String>File Path</x:String>
                                <x:String>WildCard Folder Path</x:String>
                            </ComboBox>

                        </customUI:SettingsCardV2>

                        <customUI:SettingsCardV2 x:Uid="ScalabilitySettingsCard">

                            <controls:WrapPanel Orientation="Horizontal" HorizontalSpacing="10" VerticalSpacing="10">

                                <ProgressRing IsIndeterminate="False"
                                              Value="{x:Bind ViewModel.FilesAndFoldersProgressRingValue, Mode=OneWay}" />

                                <!-- Scalability Button with RadialGauge Flyout -->
                                <Button IsEnabled="{x:Bind ViewModel.FilesAndFoldersElementsAreEnabled, Mode=OneWay}"
                                        x:Uid="ScalabilityButton"
                                        Content="{x:Bind ViewModel.FilesAndFoldersScalabilityButtonContent, Mode=OneWay}">
                                    <Button.Flyout>
                                        <Flyout>
                                            <StackPanel>
                                                <customUI:ColorRadialGaugeV2
                                                    StepSize="1"
                                                    TickSpacing="2"
                                                    ScaleWidth="12"
                                                    NeedleWidth="0"
                                                    NeedleLength="0"
                                                    TickLength="8"
                                                    TickWidth="0"
                                                    ScalePadding="5"
                                                    TickPadding="24"
                                                    Width="200"
                                                    Maximum="120"
                                                    Minimum="2"
                                                    Value="{x:Bind ViewModel.FilesAndFoldersScalabilityRadialGaugeValue, Mode=TwoWay}"
                                                    IsEnabled="{x:Bind ViewModel.FilesAndFoldersElementsAreEnabled, Mode=OneWay}"
                                                    ValueStringFormat="N0"/>
                                            </StackPanel>
                                        </Flyout>
                                    </Button.Flyout>
                                </Button>

                            </controls:WrapPanel>

                        </customUI:SettingsCardV2>

                        <controls:SettingsCard x:Uid="ViewDetectedFilesDetailsSettingsCard"
                            HeaderIcon="{ui:FontIcon Glyph=&#xE83B;}"
                            IsClickEnabled="True" IsActionIconVisible="True"
                            Click="{x:Bind ViewModel.FilesAndFoldersViewFileDetailsSettingsCard_Click}">

                        </controls:SettingsCard>

                    </controls:SettingsExpander.Items>

                </controls:SettingsExpander>

                <!-- Certificate -->
                <controls:SettingsExpander x:Uid="CertificatesSettingsExpander"
                    IsExpanded="{x:Bind ViewModel.CertificatesBasedSettingsExpanderIsExpanded, Mode=TwoWay}"
                    HeaderIcon="{ui:FontIcon Glyph=&#xEB95;}">

                    <controls:SettingsExpander.ItemsHeader>
                        <customUI:InfoBarV2
                            x:Uid="CurrentStatusInfoBar"
                            BorderThickness="0"
                            CornerRadius="0"
                            IsIconVisible="True"
                            Title="{x:Bind ViewModel.CertificatesBasedInfoBarTitle, Mode=OneWay}"
                            Message="{x:Bind ViewModel.CertificatesBasedInfoBarMessage, Mode=OneWay}"
                            IsOpen="{x:Bind ViewModel.CertificatesBasedInfoBarIsOpen, Mode=TwoWay}"
                            IsClosable="{x:Bind ViewModel.CertificatesBasedInfoBarIsClosable, Mode=OneWay}"
                            Severity="{x:Bind ViewModel.CertificatesBasedInfoBarSeverity, Mode=OneWay}">
                            <customUI:InfoBarV2.ActionButton>
                                <Button x:Uid="OpenInPolicyEditorButton" Visibility="{x:Bind ViewModel.CertificatesInfoBarActionButtonVisibility, Mode=OneWay}" Click="{x:Bind ViewModel.OpenInPolicyEditor_Certificates}" />
                            </customUI:InfoBarV2.ActionButton>
                        </customUI:InfoBarV2>
                    </controls:SettingsExpander.ItemsHeader>

                    <controls:WrapPanel Orientation="Horizontal" HorizontalSpacing="6" VerticalSpacing="10">

                        <Button Click="{x:Bind ViewModel.CreateCertificatesSupplementalPolicyButton_Click}"
                                IsEnabled="{x:Bind ViewModel.CertificatesBasedElementsAreEnabled, Mode=OneWay}"
                                x:Uid="CreateSupplementalPolicyButton"
                                Style="{StaticResource AccentButtonStyle}"
                                Margin="0,0,15,0" />

                        <ToggleButton x:Uid="DeployAfterCreationButton"
                                      IsEnabled="{x:Bind ViewModel.CertificatesBasedElementsAreEnabled, Mode=OneWay}"
                                      IsChecked="{x:Bind ViewModel.CertificatesBasedDeployButton, Mode=TwoWay}"
                                      Margin="0,0,15,0" />

                    </controls:WrapPanel>

                    <controls:SettingsExpander.Items>

                        <customUI:SettingsCardV3 x:Uid="BrowseForCertificatesSettingsCard"
                                                 IsClickEnabled="True"
                                                 IsActionIconVisible="False">

                            <Button x:Uid="FileBrowseButton"
                                    IsEnabled="{x:Bind ViewModel.CertificatesBasedElementsAreEnabled, Mode=OneWay}"
                                    Click="{x:Bind ViewModel.CertificatesBrowseForCertsButton_Click}" />

                        </customUI:SettingsCardV3>

                        <controls:SettingsCard Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}" x:Uid="SupplementalPolicyNameSettingsCard" IsClickEnabled="False" IsActionIconVisible="False">
                            <TextBox Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                     Text="{x:Bind ViewModel.CertificatesBasedSupplementalPolicyName, Mode=TwoWay}"
                                     IsEnabled="{x:Bind ViewModel.CertificatesBasedElementsAreEnabled, Mode=OneWay}"
                                     x:Uid="SupplementalPolicyNameTextBox"/>
                        </controls:SettingsCard>

                        <customUI:SettingsCardV3 Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                                 x:Uid="BasePolicyFileSelectionSettingsCard">

                            <Button x:Name="CertificatesBrowseForBasePolicyButton"
                                    Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                    IsEnabled="{x:Bind ViewModel.CertificatesBasedElementsAreEnabled, Mode=OneWay}"
                                    x:Uid="PickPolicyFileButton"
                                    Click="{x:Bind ViewModel.CertificatesBrowseForBasePolicyButton_Click}">

                                <Button.Flyout>
                                    <Flyout x:Name="CertificatesBrowseForBasePolicyButton_FlyOut">

                                        <controls:WrapPanel Orientation="Vertical" HorizontalSpacing="15" VerticalSpacing="15">

                                            <Button x:Uid="ClearButton" Click="{x:Bind ViewModel.CertificatesBrowseForBasePolicyButton_Flyout_Clear_Click}" />

                                            <TextBlock x:Uid="ViewSelectedBasePolicyTextBlock" TextWrapping="WrapWholeWords" />

                                            <TextBox Text="{x:Bind ViewModel.CertificatesBasedBasePolicyPath, Mode=OneWay}"
                                                     TextWrapping="Wrap"
                                                     AcceptsReturn="True"
                                                     IsSpellCheckEnabled="False"
                                                     MinWidth="400"
                                                     IsReadOnly="True" />

                                        </controls:WrapPanel>

                                    </Flyout>
                                </Button.Flyout>

                                <Button.Content>
                                    <controls:WrapPanel Orientation="Horizontal">

                                        <AnimatedIcon Visibility="{x:Bind ViewModel.CertificatesBasePolicyPathLightAnimatedIconVisibility, Mode=OneWay}" Height="20" Margin="0,0,5,0" Width="20">
                                            <AnimatedIcon.Source>
                                                <animatedvisuals:Light/>
                                            </AnimatedIcon.Source>
                                        </AnimatedIcon>

                                        <TextBlock x:Uid="BrowseTextBlock" />

                                    </controls:WrapPanel>
                                </Button.Content>

                            </Button>

                        </customUI:SettingsCardV3>

                        <controls:SettingsCard x:Uid="SigningScenariosSettingsCard"
                                               IsClickEnabled="False"
                                               IsActionIconVisible="False">

                            <RadioButtons x:Uid="SigningScenariosRadioButtons"
                                          IsEnabled="{x:Bind ViewModel.CertificatesBasedElementsAreEnabled, Mode=OneWay}">
                                <RadioButton x:Uid="UserModeRadioButton" IsChecked="{x:Bind ViewModel.CertificatesBasedUserModeOption, Mode=TwoWay}"/>
                                <RadioButton x:Uid="KernelModeRadioButton" IsChecked="{x:Bind ViewModel.CertificatesBasedKernelModeOption, Mode=TwoWay}"/>
                            </RadioButtons>

                        </controls:SettingsCard>

                    </controls:SettingsExpander.Items>

                </controls:SettingsExpander>

                <!-- ISG -->
                <controls:SettingsExpander
                    Description="Create a Supplemental policy that only enables the usage of the Intelligent Security Graph to automatically authorize reputable apps and files"
                    Header="ISG"
                    IsExpanded="{x:Bind ViewModel.ISGSettingsExpanderIsExpanded, Mode=TwoWay}"
                    HeaderIcon="{ui:FontIcon Glyph=&#xE734;}">

                    <controls:SettingsExpander.ItemsHeader>
                        <customUI:InfoBarV2
                            x:Uid="CurrentStatusInfoBar"
                            BorderThickness="0"
                            CornerRadius="0"
                            IsIconVisible="True"
                            Title="{x:Bind ViewModel.ISGInfoBarTitle, Mode=OneWay}"
                            Message="{x:Bind ViewModel.ISGInfoBarMessage, Mode=OneWay}"
                            IsOpen="{x:Bind ViewModel.ISGInfoBarIsOpen, Mode=TwoWay}"
                            IsClosable="{x:Bind ViewModel.ISGInfoBarIsClosable, Mode=OneWay}"
                            Severity="{x:Bind ViewModel.ISGInfoBarSeverity, Mode=OneWay}">
                            <customUI:InfoBarV2.ActionButton>
                                <Button x:Uid="OpenInPolicyEditorButton" Visibility="{x:Bind ViewModel.ISGInfoBarActionButtonVisibility, Mode=OneWay}" Click="{x:Bind ViewModel.OpenInPolicyEditor_ISG}" />
                            </customUI:InfoBarV2.ActionButton>
                        </customUI:InfoBarV2>
                    </controls:SettingsExpander.ItemsHeader>

                    <controls:WrapPanel Orientation="Horizontal" HorizontalSpacing="6" VerticalSpacing="10">

                        <Button Click="{x:Bind ViewModel.CreateISGSupplementalPolicyButton_Click}"
                                IsEnabled="{x:Bind ViewModel.ISGElementsAreEnabled, Mode=OneWay}"
                                x:Uid="CreateSupplementalPolicyButton"
                                Style="{StaticResource AccentButtonStyle}"
                                Margin="0,0,15,0" />

                        <ToggleButton IsChecked="{x:Bind ViewModel.ISGBasedDeployButton, Mode=TwoWay}"
                                      IsEnabled="{x:Bind ViewModel.ISGElementsAreEnabled, Mode=OneWay}"
                                      x:Uid="DeployAfterCreationButton"
                                      Margin="0,0,15,0" />

                    </controls:WrapPanel>

                    <controls:SettingsExpander.Items>

                        <controls:SettingsCard Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}" x:Uid="SupplementalPolicyNameSettingsCard" IsClickEnabled="False" IsActionIconVisible="False">
                            <TextBox Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                     IsEnabled="{x:Bind ViewModel.ISGElementsAreEnabled, Mode=OneWay}"
                                     Text="{x:Bind ViewModel.ISGBasedSupplementalPolicyName, Mode=TwoWay}"
                                     x:Uid="SupplementalPolicyNameTextBox"/>
                        </controls:SettingsCard>

                        <customUI:SettingsCardV3 Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                                 IsEnabled="{x:Bind ViewModel.ISGElementsAreEnabled, Mode=OneWay}"
                                                 x:Uid="BasePolicyFileSelectionSettingsCard">

                            <Button Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                    IsEnabled="{x:Bind ViewModel.ISGElementsAreEnabled, Mode=OneWay}"
                                    x:Name="ISGBrowseForBasePolicyButton"
                                    Click="{x:Bind ViewModel.ISGBrowseForBasePolicyButton_Click}"
                                    x:Uid="PickPolicyFileButton">

                                <Button.Flyout>
                                    <Flyout x:Name="ISGBrowseForBasePolicyButton_FlyOut">

                                        <controls:WrapPanel Orientation="Vertical" HorizontalSpacing="15" VerticalSpacing="15">

                                            <Button x:Uid="ClearButton" Click="{x:Bind ViewModel.ISGBrowseForBasePolicyButton_Flyout_Clear_Click}" />

                                            <TextBlock x:Uid="ViewSelectedBasePolicyTextBlock" TextWrapping="WrapWholeWords" />

                                            <TextBox Text="{x:Bind ViewModel.ISGBasedBasePolicyPath, Mode=OneWay}"
                                                TextWrapping="Wrap" AcceptsReturn="True" IsSpellCheckEnabled="False"
                                                MinWidth="400" IsReadOnly="True" />

                                        </controls:WrapPanel>

                                    </Flyout>
                                </Button.Flyout>

                                <Button.Content>
                                    <controls:WrapPanel Orientation="Horizontal">

                                        <AnimatedIcon Visibility="{x:Bind ViewModel.ISGBasePolicyPathLightAnimatedIconVisibility, Mode=OneWay}" Height="20" Margin="0,0,5,0" Width="20">
                                            <AnimatedIcon.Source>
                                                <animatedvisuals:Light/>
                                            </AnimatedIcon.Source>
                                        </AnimatedIcon>

                                        <TextBlock x:Uid="BrowseTextBlock" />

                                    </controls:WrapPanel>
                                </Button.Content>

                            </Button>

                        </customUI:SettingsCardV3>

                    </controls:SettingsExpander.Items>

                </controls:SettingsExpander>

                <!-- Strict Kernel-Mode -->
                <controls:SettingsExpander x:Uid="StrictKernelModeSettingsExpander"
                    IsExpanded="{x:Bind ViewModel.StrictKernelModeSettingsExpanderIsExpanded, Mode=TwoWay}"
                    HeaderIcon="{ui:FontIcon Glyph=&#xE945;}">

                    <controls:SettingsExpander.ItemsHeader>
                        <customUI:InfoBarV2
                            x:Uid="CurrentStatusInfoBar"
                            BorderThickness="0"
                            CornerRadius="0"
                            IsIconVisible="True"
                            Title="{x:Bind ViewModel.StrictKernelModeInfoBarTitle, Mode=OneWay}"
                            Message="{x:Bind ViewModel.StrictKernelModeInfoBarMessage, Mode=OneWay}"
                            IsOpen="{x:Bind ViewModel.StrictKernelModeInfoBarIsOpen, Mode=TwoWay}"
                            IsClosable="{x:Bind ViewModel.StrictKernelModeInfoBarIsClosable, Mode=OneWay}"
                            Severity="{x:Bind ViewModel.StrictKernelModeInfoBarSeverity, Mode=OneWay}">
                            <customUI:InfoBarV2.ActionButton>
                                <Button x:Uid="OpenInPolicyEditorButton" Visibility="{x:Bind ViewModel.StrictKernelModeInfoBarActionButtonVisibility, Mode=OneWay}" Click="{x:Bind ViewModel.OpenInPolicyEditor_StrictKernelMode}" />
                            </customUI:InfoBarV2.ActionButton>
                        </customUI:InfoBarV2>
                    </controls:SettingsExpander.ItemsHeader>

                    <controls:WrapPanel Orientation="Horizontal" HorizontalSpacing="6" VerticalSpacing="10">

                        <Button x:Uid="CreateSupplementalPolicyButton"
                                Style="{StaticResource AccentButtonStyle}"
                                Margin="0,0,15,0"
                                IsEnabled="{x:Bind ViewModel.StrictKernelModeElementsAreEnabled, Mode=OneWay}"
                                Click="{x:Bind ViewModel.StrictKernelModeCreateButton_Click}" />

                        <ToggleButton x:Uid="DeployAfterCreationButton"
                                      IsChecked="{x:Bind ViewModel.StrictKernelModeShouldDeploy, Mode=TwoWay}"
                                      IsEnabled="{x:Bind ViewModel.StrictKernelModeElementsAreEnabled, Mode=OneWay}"
                                      Margin="0,0,15,0" />

                    </controls:WrapPanel>

                    <controls:SettingsExpander.Items>

                        <customUI:SettingsCardV2 x:Uid="AutoDriverDetectionSettingsCard">

                            <controls:WrapPanel Orientation="Horizontal" HorizontalSpacing="10" VerticalSpacing="10">

                                <ProgressRing
                                    IsIndeterminate="False"
                                    Value="{x:Bind ViewModel.DriverAutoDetectionProgressRingValue,Mode=OneWay}" />

                                <Button Content="Begin"
                                        IsEnabled="{x:Bind ViewModel.StrictKernelModeElementsAreEnabled, Mode=OneWay}"
                                        Click="{x:Bind ViewModel.DriverAutoDetector}" />

                            </controls:WrapPanel>

                        </customUI:SettingsCardV2>

                        <controls:SettingsCard x:Uid="ScanEventLogsForStrictKernelPolicySettingsCard"
                                               IsClickEnabled="False"
                                               IsActionIconVisible="False" >

                            <controls:WrapPanel Orientation="Vertical" HorizontalSpacing="10" VerticalSpacing="10">

                                <Button Click="{x:Bind ViewModel.StrictKernelModeScanButton_Click}"
                                        IsEnabled="{x:Bind ViewModel.StrictKernelModeElementsAreEnabled, Mode=OneWay}"
                                        HorizontalAlignment="Center"
                                        x:Uid="ScanForAllKernelModeLogs" />

                                <Button Click="{x:Bind ViewModel.StrictKernelModeScanSinceLastRebootButton_Click}"
                                        IsEnabled="{x:Bind ViewModel.StrictKernelModeElementsAreEnabled, Mode=OneWay}"
                                        HorizontalAlignment="Center"
                                        x:Uid="ScanForKernelModeLogsSinceReboot" />

                            </controls:WrapPanel>

                        </controls:SettingsCard>

                        <customUI:SettingsCardV3 Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                                 x:Uid="BasePolicyFileSelectionSettingsCard">

                            <Button x:Name="StrictKernelModeBrowseForBasePolicyButton"
                                    Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                    IsEnabled="{x:Bind ViewModel.StrictKernelModeElementsAreEnabled, Mode=OneWay}"
                                    x:Uid="PickPolicyFileButton"
                                    Click="{x:Bind ViewModel.StrictKernelModeBrowseForBasePolicyButton_Click}">

                                <Button.Flyout>
                                    <Flyout x:Name="StrictKernelModeBrowseForBasePolicyButton_FlyOut">

                                        <controls:WrapPanel Orientation="Vertical" HorizontalSpacing="15" VerticalSpacing="15">

                                            <Button x:Uid="ClearButton" Click="{x:Bind ViewModel.StrictKernelModeBrowseForBasePolicyButton_Flyout_Clear_Click}" />

                                            <TextBlock x:Uid="ViewSelectedBasePolicyTextBlock" TextWrapping="WrapWholeWords" />

                                            <TextBox Text="{x:Bind ViewModel.StrictKernelModeBasePolicyPath, Mode=OneWay}"
                                                TextWrapping="Wrap" AcceptsReturn="True" IsSpellCheckEnabled="False"
                                                MinWidth="400" IsReadOnly="True" />

                                        </controls:WrapPanel>

                                    </Flyout>
                                </Button.Flyout>

                                <Button.Content>
                                    <controls:WrapPanel Orientation="Horizontal">

                                        <AnimatedIcon Visibility="{x:Bind ViewModel.StrictKernelModeBasePolicyLightAnimatedIconVisibility, Mode=OneWay}" Height="20" Margin="0,0,5,0" Width="20">
                                            <AnimatedIcon.Source>
                                                <animatedvisuals:Light/>
                                            </AnimatedIcon.Source>
                                        </AnimatedIcon>

                                        <TextBlock x:Uid="BrowseTextBlock" />

                                    </controls:WrapPanel>
                                </Button.Content>

                            </Button>

                        </customUI:SettingsCardV3>

                        <controls:SettingsCard Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                               x:Uid="SupplementalPolicyNameSettingsCard"
                                               IsClickEnabled="False"
                                               IsActionIconVisible="False">
                            <TextBox Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                     IsEnabled="{x:Bind ViewModel.StrictKernelModeElementsAreEnabled, Mode=OneWay}"
                                     Text="{x:Bind ViewModel.StrictKernelModePolicyName, Mode=TwoWay}"
                                     x:Uid="SupplementalPolicyNameTextBox"/>
                        </controls:SettingsCard>

                        <controls:SettingsCard x:Uid="ViewStrictKernelModeDetailsSettingsCard"
                            HeaderIcon="{ui:FontIcon Glyph=&#xE83B;}"
                            IsClickEnabled="True" IsActionIconVisible="True"
                            Click="{x:Bind ViewModel.DetectedKernelModeFilesDetailsSettingsCard_Click}">

                        </controls:SettingsCard>

                    </controls:SettingsExpander.Items>

                </controls:SettingsExpander>

                <!-- Package Family Name (PFN) -->
                <controls:SettingsExpander x:Uid="PFNSupplementalPolicySettingsExpander"
                    HeaderIcon="{ui:FontIcon Glyph=&#xE8F1;}"
                    IsExpanded="{x:Bind ViewModel.PFNBasedSettingsExpanderIsExpanded, Mode=TwoWay}"
                    Expanded="{x:Bind ViewModel.PFNSettingsCard_Expanded}">

                    <controls:SettingsExpander.ItemsHeader>
                        <customUI:InfoBarV2
                            x:Uid="CurrentStatusInfoBar"
                            BorderThickness="0"
                            CornerRadius="0"
                            IsIconVisible="True"
                            Title="{x:Bind ViewModel.PFNInfoBarTitle, Mode=OneWay}"
                            Message="{x:Bind ViewModel.PFNInfoBarMessage, Mode=OneWay}"
                            IsOpen="{x:Bind ViewModel.PFNInfoBarIsOpen, Mode=TwoWay}"
                            IsClosable="{x:Bind ViewModel.PFNInfoBarIsClosable, Mode=OneWay}"
                            Severity="{x:Bind ViewModel.PFNInfoBarSeverity, Mode=OneWay}">
                            <customUI:InfoBarV2.ActionButton>
                                <Button x:Uid="OpenInPolicyEditorButton" Visibility="{x:Bind ViewModel.PFNInfoBarActionButtonVisibility, Mode=OneWay}" Click="{x:Bind ViewModel.OpenInPolicyEditor_PFN}" />
                            </customUI:InfoBarV2.ActionButton>
                        </customUI:InfoBarV2>
                    </controls:SettingsExpander.ItemsHeader>

                    <controls:WrapPanel Orientation="Horizontal" HorizontalSpacing="6" VerticalSpacing="10">

                        <customUI:AnimatedCancellableButton x:Uid="CreateSupplementalPolicyButton"
                                Style="{StaticResource AccentButtonStyle}"
                                Margin="0,0,15,0"
                                Click="{x:Bind ViewModel.CreatePFNSupplementalPolicyButton_Click}"
                                CancelMethod="{x:Bind ViewModel.PFNBasedCancellableButton.Cancel}"
                                ExternalOperationInProgress="{x:Bind ViewModel.PFNBasedCancellableButton.IsOperationInProgress, Mode=OneWay}"
                                ExternalIsCancelState="{x:Bind ViewModel.PFNBasedCancellableButton.IsCancelState, Mode=OneWay}"
                                ExternalIsCancellingState="{x:Bind ViewModel.PFNBasedCancellableButton.IsCancellingState, Mode=OneWay}"
                                ExternalIsAnimating="{x:Bind ViewModel.PFNBasedCancellableButton.IsAnimating, Mode=OneWay}"
                                ExternalButtonContent="{x:Bind ViewModel.PFNBasedCancellableButton.ButtonContent, Mode=OneWay}"
                                ExternalOriginalText="{x:Bind ViewModel.PFNBasedCancellableButton.OriginalText, Mode=OneWay}"
                                ExternalInternalIsCancelState="{x:Bind ViewModel.PFNBasedCancellableButton.InternalIsCancelState, Mode=OneWay}"
                                ExternalInternalIsCancellingState="{x:Bind ViewModel.PFNBasedCancellableButton.InternalIsCancellingState, Mode=OneWay}"
                                ExternalInternalIsAnimating="{x:Bind ViewModel.PFNBasedCancellableButton.InternalIsAnimating, Mode=OneWay}"
                                ExternalInternalIsOperationInProgress="{x:Bind ViewModel.PFNBasedCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
                                ExternalInternalSuppressExternalClick="{x:Bind ViewModel.PFNBasedCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
                                ExternalShadowAnimationRunning="{x:Bind ViewModel.PFNBasedCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
                                ExternalOperationStarted="{x:Bind ViewModel.PFNBasedCancellableButton.OperationStarted, Mode=OneWay}" />

                        <ToggleButton IsEnabled="{x:Bind ViewModel.PFNElementsAreEnabled, Mode=OneWay}"
                                      IsChecked="{x:Bind ViewModel.PFNBasedShouldDeploy, Mode=TwoWay}"
                                      x:Uid="DeployAfterCreationButton"
                                      Margin="0,0,15,0" />

                    </controls:WrapPanel>

                    <controls:SettingsExpander.Items>

                        <controls:SettingsCard Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                               x:Uid="SupplementalPolicyNameSettingsCard"
                                               IsClickEnabled="False"
                                               IsActionIconVisible="False">
                            <TextBox Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                     IsEnabled="{x:Bind ViewModel.PFNElementsAreEnabled, Mode=OneWay}"
                                     Text="{x:Bind ViewModel.PFNBasedSupplementalPolicyName, Mode=TwoWay}"
                                     x:Uid="SupplementalPolicyNameTextBox"/>
                        </controls:SettingsCard>

                        <customUI:SettingsCardV3 Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                                 x:Uid="BasePolicyFileSelectionSettingsCard">

                            <Button Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                    IsEnabled="{x:Bind ViewModel.PFNElementsAreEnabled, Mode=OneWay}"
                                    x:Uid="PickPolicyFileButton"
                                    x:Name="PFNBrowseForBasePolicyButton"
                                    Click="{x:Bind ViewModel.PFNBrowseForBasePolicyButton_Click}">

                                <Button.Flyout>
                                    <Flyout x:Name="PFNBrowseForBasePolicyButton_FlyOut">

                                        <controls:WrapPanel Orientation="Vertical" HorizontalSpacing="15" VerticalSpacing="15">

                                            <Button x:Uid="ClearButton" Click="{x:Bind ViewModel.PFNBasePolicyClearButton_Click}"/>

                                            <TextBlock x:Uid="ViewSelectedBasePolicyTextBlock" TextWrapping="WrapWholeWords" />

                                            <TextBox Text="{x:Bind ViewModel.PFNBasePolicyPath, Mode=OneWay}"
                                                TextWrapping="Wrap" AcceptsReturn="True" IsSpellCheckEnabled="False"
                                                MinWidth="400" IsReadOnly="True" />

                                        </controls:WrapPanel>

                                    </Flyout>
                                </Button.Flyout>

                                <Button.Content>
                                    <controls:WrapPanel Orientation="Horizontal">

                                        <AnimatedIcon Visibility="{x:Bind ViewModel.PFNBasePolicyPathLightAnimatedIconVisibility, Mode=OneWay}" Height="20" Margin="0,0,5,0" Width="20">
                                            <AnimatedIcon.Source>
                                                <animatedvisuals:Light/>
                                            </AnimatedIcon.Source>
                                        </AnimatedIcon>

                                        <TextBlock x:Uid="BrowseTextBlock" />

                                    </controls:WrapPanel>
                                </Button.Content>

                            </Button>

                        </customUI:SettingsCardV3>

                        <controls:SettingsCard x:Uid="PackageFamilyNamesSelectionSettingsCard"
                                               IsEnabled="{x:Bind ViewModel.PFNElementsAreEnabled, Mode=OneWay}"
                                               IsClickEnabled="False"
                                               IsActionIconVisible="False">

                            <controls:WrapPanel Orientation="Horizontal">

                                <controls:WrapPanel VerticalAlignment="Center" Orientation="Vertical" Margin="0,0,15,0" VerticalSpacing="15" HorizontalSpacing="10">

                                    <TextBox Text="{x:Bind ViewModel.PFNBasedSearchKeywordForAppsList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PlaceholderText="Search among the apps"/>

                                    <TextBlock x:Uid="SelectedAppsTextBlock" Text="{x:Bind ViewModel.PFNBasedSelectedItemsCount, Mode=OneWay}" HorizontalAlignment="Center"/>
                                    <Button x:Uid="RefreshButton" HorizontalAlignment="Center" Click="{x:Bind ViewModel.PFNRefreshAppsListButton_Click}" />
                                    <Button x:Uid="SelectAllButton" HorizontalAlignment="Center" Click="{x:Bind ViewModel.PFNSelectAllAppsListButton_Click}" />
                                    <Button x:Uid="RemoveSelectionsButton" HorizontalAlignment="Center" Click="{x:Bind ViewModel.PFNRemoveSelectionAppsListButton_Click}" />

                                </controls:WrapPanel>

                                <RefreshContainer RefreshRequested="{x:Bind ViewModel.PFNRefreshAppsListButton_Click}">

                                    <customUI:ListViewV3
                                        BorderThickness="1"
                                        CornerRadius="5"
                                        RegistryKey="SupplementalPolicy_PFNBasedRules"
                                        ItemsSource="{x:Bind PackagedAppsCollectionViewSource.View, Mode=OneWay}"
                                        BorderBrush="{ThemeResource SystemControlForegroundBaseMediumLowBrush}"
                                        Width="450"
                                        Height="400"
                                        SelectionChanged="{x:Bind ViewModel.PFNPackagedAppsListView_SelectionChanged}"
                                        HorizontalAlignment="Left"
                                        SelectionMode="Multiple"
                                        ItemTemplate="{StaticResource PackagedAppsListViewTemplate}">

                                        <customUI:ListViewV3.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <ItemsStackPanel AreStickyGroupHeadersEnabled="True"/>
                                            </ItemsPanelTemplate>
                                        </customUI:ListViewV3.ItemsPanel>
                                        <customUI:ListViewV3.GroupStyle>
                                            <GroupStyle >
                                                <GroupStyle.HeaderTemplate>
                                                    <DataTemplate x:DataType="others:GroupInfoListForPackagedAppView">
                                                        <Border AutomationProperties.AccessibilityView="Raw">
                                                            <TextBlock Text="{x:Bind Key}" Style="{ThemeResource TitleTextBlockStyle}" AutomationProperties.AccessibilityView="Raw"/>
                                                        </Border>
                                                    </DataTemplate>
                                                </GroupStyle.HeaderTemplate>
                                            </GroupStyle>
                                        </customUI:ListViewV3.GroupStyle>

                                    </customUI:ListViewV3>

                                </RefreshContainer>

                            </controls:WrapPanel>

                        </controls:SettingsCard>

                    </controls:SettingsExpander.Items>

                </controls:SettingsExpander>

                <!-- Custom File Path Rules -->
                <controls:SettingsExpander
                        x:Uid="SupplementalPolicyCustomPatternBasedFileRuleSettingsExpander"
                        IsExpanded="{x:Bind ViewModel.CustomFilePathRulesSettingsExpanderIsExpanded, Mode=TwoWay}"
                        HeaderIcon="{ui:FontIcon Glyph=&#xE8A1;}">

                    <controls:SettingsExpander.ItemsHeader>
                        <customUI:InfoBarV2
                            x:Uid="CurrentStatusInfoBar"
                            BorderThickness="0"
                            CornerRadius="0"
                            IsIconVisible="True"
                            Title="{x:Bind ViewModel.CustomFilePathRulesInfoBarTitle, Mode=OneWay}"
                            IsOpen="{x:Bind ViewModel.CustomFilePathRulesInfoBarIsOpen, Mode=TwoWay}"
                            Message="{x:Bind ViewModel.CustomFilePathRulesInfoBarMessage, Mode=OneWay}"
                            IsClosable="{x:Bind ViewModel.CustomFilePathRulesInfoBarIsClosable, Mode=OneWay}"
                            Severity="{x:Bind ViewModel.CustomFilePathRulesInfoBarSeverity, Mode=OneWay}">
                            <customUI:InfoBarV2.ActionButton>
                                <Button x:Uid="OpenInPolicyEditorButton" Visibility="{x:Bind ViewModel.CustomFilePathRulesInfoBarActionButtonVisibility, Mode=OneWay}" Click="{x:Bind ViewModel.OpenInPolicyEditor_CustomPatternBasedFileRule}" />
                            </customUI:InfoBarV2.ActionButton>
                        </customUI:InfoBarV2>
                    </controls:SettingsExpander.ItemsHeader>

                    <controls:WrapPanel Orientation="Horizontal" HorizontalSpacing="6" VerticalSpacing="10">

                        <customUI:AnimatedCancellableButton x:Uid="CreateSupplementalPolicyButton"
                                    Style="{StaticResource AccentButtonStyle}"
                                    Margin="0,0,15,0"
                                    Click="{x:Bind ViewModel.CreateCustomPatternBasedFileRuleSupplementalPolicyButton_Click}"
                                    CancelMethod="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.Cancel}"
                                    ExternalOperationInProgress="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.IsOperationInProgress, Mode=OneWay}"
                                    ExternalIsCancelState="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.IsCancelState, Mode=OneWay}"
                                    ExternalIsCancellingState="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.IsCancellingState, Mode=OneWay}"
                                    ExternalIsAnimating="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.IsAnimating, Mode=OneWay}"
                                    ExternalButtonContent="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.ButtonContent, Mode=OneWay}"
                                    ExternalOriginalText="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.OriginalText, Mode=OneWay}"
                                    ExternalInternalIsCancelState="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.InternalIsCancelState, Mode=OneWay}"
                                    ExternalInternalIsCancellingState="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.InternalIsCancellingState, Mode=OneWay}"
                                    ExternalInternalIsAnimating="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.InternalIsAnimating, Mode=OneWay}"
                                    ExternalInternalIsOperationInProgress="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
                                    ExternalInternalSuppressExternalClick="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
                                    ExternalShadowAnimationRunning="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
                                    ExternalOperationStarted="{x:Bind ViewModel.PatternBasedFileRuleCancellableButton.OperationStarted, Mode=OneWay}" />

                        <ToggleButton IsChecked="{x:Bind ViewModel.CustomPatternBasedFileRuleBasedDeployButton, Mode=TwoWay}"
                                      IsEnabled="{x:Bind ViewModel.CustomFilePathRulesElementsAreEnabled, Mode=OneWay}"
                                      x:Uid="DeployAfterCreationButton"
                                      Margin="0,0,15,0" />

                    </controls:WrapPanel>

                    <controls:SettingsExpander.Items>

                        <controls:SettingsCard Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}" x:Uid="SupplementalPolicyNameSettingsCard" IsClickEnabled="False" IsActionIconVisible="False">
                            <TextBox Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                     IsEnabled="{x:Bind ViewModel.CustomFilePathRulesElementsAreEnabled, Mode=OneWay}"
                                     Text="{x:Bind ViewModel.CustomPatternBasedFileRuleBasedSupplementalPolicyName, Mode=TwoWay}"
                                     x:Uid="SupplementalPolicyNameTextBox"/>
                        </controls:SettingsCard>

                        <customUI:SettingsCardV3 Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                                 x:Uid="BasePolicyFileSelectionSettingsCard">

                            <Button Visibility="{x:Bind ViewModel.BasePolicyElementsVisibility, Mode=OneWay}"
                                    IsEnabled="{x:Bind ViewModel.CustomFilePathRulesElementsAreEnabled, Mode=OneWay}"
                                    x:Name="CustomPatternBasedFileRuleBrowseForBasePolicyButton"
                                    Click="{x:Bind ViewModel.CustomPatternBasedFileRuleBrowseForBasePolicyButton_Click}"
                                    x:Uid="PickPolicyFileButton">

                                <Button.Flyout>
                                    <Flyout x:Name="CustomPatternBasedFileRuleBrowseForBasePolicyButton_FlyOut">

                                        <controls:WrapPanel Orientation="Vertical" HorizontalSpacing="15" VerticalSpacing="15">

                                            <Button x:Uid="ClearButton" Click="{x:Bind ViewModel.CustomPatternBasedFileRuleBrowseForBasePolicyButton_Flyout_Clear_Click}" />

                                            <TextBlock x:Uid="ViewSelectedBasePolicyTextBlock" TextWrapping="WrapWholeWords" />

                                            <TextBox Text="{x:Bind ViewModel.CustomPatternBasedFileRuleBasedBasePolicyPath, Mode=OneWay}"
                                                 TextWrapping="Wrap" AcceptsReturn="True" IsSpellCheckEnabled="False"
                                                 MinWidth="400" IsReadOnly="True" />

                                        </controls:WrapPanel>

                                    </Flyout>
                                </Button.Flyout>

                                <Button.Content>
                                    <controls:WrapPanel Orientation="Horizontal">

                                        <!--

                                        <AnimatedIcon x:Name="CustomPatternBasedFileRuleBasePolicyPathLightAnimatedIcon" Height="20" Margin="0,0,5,0" Width="20">
                                            <AnimatedIcon.Source>
                                                <animatedvisuals:Light/>
                                            </AnimatedIcon.Source>
                                        </AnimatedIcon>

                                        -->

                                        <TextBlock x:Uid="BrowseTextBlock" />

                                    </controls:WrapPanel>
                                </Button.Content>

                            </Button>

                        </customUI:SettingsCardV3>

                        <controls:SettingsCard x:Uid="SupplementalPolicyCustomPatternBasedFileRuleActualPatternSettingsCard" IsClickEnabled="False" IsActionIconVisible="False">
                            <TextBox Text="{x:Bind ViewModel.SupplementalPolicyCustomPatternBasedCustomPatternTextBox, Mode=TwoWay}"
                                     IsEnabled="{x:Bind ViewModel.CustomFilePathRulesElementsAreEnabled, Mode=OneWay}"
                                     x:Uid="SupplementalPolicyCustomPatternBasedCustomPatternTextBox"
                                     TextWrapping="Wrap"
                                     MaxWidth="400"/>
                        </controls:SettingsCard>

                        <controls:SettingsCard x:Uid="CustomPatternBasedFileRuleInfoSettingsCard"
                                               IsClickEnabled="True"
                                               Click="{x:Bind ViewModel.SupplementalPolicyCustomPatternBasedFileRuleSettingsCard_Click}"
                                               IsActionIconVisible="True"/>

                    </controls:SettingsExpander.Items>

                </controls:SettingsExpander>

            </StackPanel>

        </Grid>
    </ScrollView>
</Page>
