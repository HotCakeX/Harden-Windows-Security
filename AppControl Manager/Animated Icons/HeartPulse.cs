//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.1.240821.1+077322fa26
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile HeartPulse.json
//       
//       Input file:
//           HeartPulse.json (58801 bytes created 14:55+02:00 Nov 17 2024)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    86 |
// |--------------------------+-------|
// | Expression animators     |     3 |
// | KeyFrame animators       |     7 |
// | Reference parameters     |     3 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     3 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     5 |
// | ShapeVisuals             |     3 |
// |--------------------------+-------|
// | ContainerShapes          |     1 |
// | CompositionSpriteShapes  |     4 |
// |--------------------------+-------|
// | Brushes                  |     5 |
// | Gradient stops           |     4 |
// | CompositionVisualSurface |     2 |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas;
using Microsoft.Graphics.Canvas.Effects;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        heart-with-pulse
    // Frame rate:  24 fps
    // Frame count: 28
    // Duration:    1166.7 mS
    // _____________________________________________________________________________________________
    // |           Marker           |           Constant           | Frame |   mS   |   Progress   |
    // |____________________________|______________________________|_______|________|______________|
    // | NormalToPressed_Start      | M_NormalToPressed_Start      |     0 |    0.0 | 0F           |
    // | NormalToPressed_End        | M_NormalToPressed_End        |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_Start | M_PointerOverToPressed_Start |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    19 |  791.7 | 0.680357158F |
    // | PressedToNormal_Start      | M_PressedToNormal_Start      |    20 |  833.3 | 0.716071427F |
    // | PressedToNormal_End        | M_PressedToNormal_End        |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    28 | 1166.7 | 1F           |
    // ---------------------------------------------------------------------------------------------
    sealed partial class HeartPulse
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 1.167 seconds.
        internal const long c_durationTicks = 11666666;

        // Marker: NormalToPressed_Start.
        internal const float M_NormalToPressed_Start = 0F;

        // Marker: NormalToPressed_End.
        internal const float M_NormalToPressed_End = 0.323214293F;

        // Marker: PointerOverToPressed_Start.
        internal const float M_PointerOverToPressed_Start = 0.323214293F;

        // Marker: PointerOverToPressed_End.
        internal const float M_PointerOverToPressed_End = 0.680357158F;

        // Marker: PressedToNormal_Start.
        internal const float M_PressedToNormal_Start = 0.716071427F;

        // Marker: PressedToNormal_End.
        internal const float M_PressedToNormal_End = 1F;

        // Marker: PressedToPointerOver_Start.
        internal const float M_PressedToPointerOver_Start = 1F;

        // Marker: PressedToPointerOver_End.
        internal const float M_PressedToPointerOver_End = 1F;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            var res =
                new HeartPulse_AnimatedVisual(
                    compositor
                    );
            res.CreateAnimations();
            return res;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 28d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 24d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(11666666);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 28d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPressed_Start", 0d },
                { "NormalToPressed_End", 0.323214285714286 },
                { "PointerOverToPressed_Start", 0.323214285714286 },
                { "PointerOverToPressed_End", 0.680357142857143 },
                { "PressedToNormal_Start", 0.716071428571429 },
                { "PressedToNormal_End", 1d },
                { "PressedToPointerOver_Start", 1d },
                { "PressedToPointerOver_End", 1d },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class HeartPulse_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 11666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            CompositionColorBrush _colorBrush_White;
            CompositionContainerShape _containerShape;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            CompositionSpriteShape _spriteShape_0;
            CompositionSpriteShape _spriteShape_1;
            CompositionSpriteShape _spriteShape_3;
            ContainerVisual _containerVisual_2;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _scaleVector2Animation_0;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector3KeyFrameAnimation CreateVector3KeyFrameAnimation(float initialProgress, Vector3 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector3KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, -12.2460003F));
                    builder.AddCubicBezier(new Vector2(0F, -12.2460003F), new Vector2(4.70100021F, -17.4960003F), new Vector2(10.5F, -17.4960003F));
                    builder.AddCubicBezier(new Vector2(16.2989998F, -17.4960003F), new Vector2(21F, -12.7309999F), new Vector2(21F, -6.99599981F));
                    builder.AddCubicBezier(new Vector2(21F, 2.87299991F), new Vector2(5.53399992F, 14.1420002F), new Vector2(1.14699996F, 17.1389999F));
                    builder.AddCubicBezier(new Vector2(0.451999992F, 17.6140003F), new Vector2(-0.451999992F, 17.6140003F), new Vector2(-1.14699996F, 17.1389999F));
                    builder.AddCubicBezier(new Vector2(-5.53399992F, 14.1420002F), new Vector2(-21F, 2.87299991F), new Vector2(-21F, -6.99599981F));
                    builder.AddCubicBezier(new Vector2(-21F, -12.7309999F), new Vector2(-16.2989998F, -17.4960003F), new Vector2(-10.5F, -17.4960003F));
                    builder.AddCubicBezier(new Vector2(-4.70100021F, -17.4960003F), new Vector2(0F, -12.2460003F), new Vector2(0F, -12.2460003F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-12.3950005F, 0.986000001F));
                    builder.AddLine(new Vector2(-8.7869997F, 0.986000001F));
                    builder.AddLine(new Vector2(-6.53200006F, -2.9920001F));
                    builder.AddLine(new Vector2(-2.87199998F, 2.625F));
                    builder.AddLine(new Vector2(1.05400002F, -8.45400047F));
                    builder.AddLine(new Vector2(3.46799994F, 8.45400047F));
                    builder.AddLine(new Vector2(8.01599979F, -3.84200001F));
                    builder.AddLine(new Vector2(10.4890003F, 3.73099995F));
                    builder.AddLine(new Vector2(12.6599998F, 0.986000001F));
                    builder.AddLine(new Vector2(17.8430004F, 0.964999974F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - PreComp layer: Pre-comp 1
            // - - - - - Transforms for Pre-comp 1 Scale(0.25,0.25,0), Offset(-96,-96.496,0)
            // - - - - Layer aggregator
            // - - - Layer: circle
            // - - ShapeGroup: Group 1
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-2F, 0F));
                    builder.AddCubicBezier(new Vector2(-2F, 1.10500002F), new Vector2(-1.10500002F, 2F), new Vector2(0F, 2F));
                    builder.AddCubicBezier(new Vector2(1.10500002F, 2F), new Vector2(2F, 1.10500002F), new Vector2(2F, 0F));
                    builder.AddCubicBezier(new Vector2(2F, -1.10500002F), new Vector2(1.10500002F, -2F), new Vector2(0F, -2F));
                    builder.AddCubicBezier(new Vector2(-1.10500002F, -2F), new Vector2(-2F, -1.10500002F), new Vector2(-2F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_White()
            {
                return (_colorBrush_White == null)
                    ? _colorBrush_White = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF))
                    : _colorBrush_White;
            }

            // - - Shape tree root for layer: heart
            // - ShapeGroup: Group 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostTomato_FFF44F5A()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0xF4, 0x4F, 0x5A));
            }

            // - - Shape tree root for layer: heart
            // - ShapeGroup: Group 1
            // Stop 1
            CompositionColorGradientStop GradientStop_0p221_AlmostTomato_FFF04652()
            {
                return _c.CreateColorGradientStop(0.221000001F, Color.FromArgb(0xFF, 0xF0, 0x46, 0x52));
            }

            // - - Shape tree root for layer: heart
            // - ShapeGroup: Group 1
            // Stop 2
            CompositionColorGradientStop GradientStop_0p443_AlmostTomato_FFED3C49()
            {
                return _c.CreateColorGradientStop(0.442999989F, Color.FromArgb(0xFF, 0xED, 0x3C, 0x49));
            }

            // - - Shape tree root for layer: heart
            // - ShapeGroup: Group 1
            // Stop 3
            CompositionColorGradientStop GradientStop_1_AlmostCrimson_FFE41F2F()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xE4, 0x1F, 0x2F));
            }

            // - - PreComp layer: Pre-comp 1
            // - Transforms for Pre-comp 1 Scale(0.25,0.25,0), Offset(-96,-96.496,0)
            // Layer aggregator
            // Layer: circle
            CompositionContainerShape ContainerShape()
            {
                if (_containerShape != null) { return _containerShape; }
                var result = _containerShape = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                // ShapeGroup: Group 1
                result.Shapes.Add(SpriteShape_3());
                return result;
            }

            CompositionEffectBrush EffectBrush()
            {
                var effectFactory = EffectFactory();
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            CompositionEffectFactory EffectFactory()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationOut;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var result = _c.CreateEffectFactory(compositeEffect);
                return result;
            }

            // - Shape tree root for layer: heart
            // ShapeGroup: Group 1
            CompositionLinearGradientBrush LinearGradientBrush()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostTomato_FFF44F5A());
                colorStops.Add(GradientStop_0p221_AlmostTomato_FFF04652());
                colorStops.Add(GradientStop_0p443_AlmostTomato_FFED3C49());
                colorStops.Add(GradientStop_1_AlmostCrimson_FFE41F2F());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(-9.69999981F, -20.3040009F);
                result.EndPoint = new Vector2(10.0380001F, 16.0990009F);
                return result;
            }

            CompositionPathGeometry PathGeometry_0()
            {
                return (_pathGeometry_0 == null)
                    ? _pathGeometry_0 = _c.CreatePathGeometry(new CompositionPath(Geometry_0()))
                    : _pathGeometry_0;
            }

            CompositionPathGeometry PathGeometry_1()
            {
                if (_pathGeometry_1 != null) { return _pathGeometry_1; }
                var result = _pathGeometry_1 = _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(_pathGeometry_1, "TrimStart", "Min(my.TStart,my.TEnd)", "my", _pathGeometry_1);
                BindProperty(_pathGeometry_1, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", _pathGeometry_1);
                return result;
            }

            // - - - - PreComp layer: Pre-comp 1
            // - - - Transforms for Pre-comp 1 Scale(0.25,0.25,0), Offset(-96,-96.496,0)
            // - - Layer aggregator
            // - Layer: circle
            // ShapeGroup: Group 1
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // Shape tree root for layer: heart 2
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                if (_spriteShape_0 != null) { return _spriteShape_0; }
                var result = _spriteShape_0 = _c.CreateSpriteShape(PathGeometry_0());
                result.Offset = new Vector2(96F, 97.9820023F);
                result.FillBrush = ColorBrush_White();
                return result;
            }

            // Shape tree root for layer: heart
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                if (_spriteShape_1 != null) { return _spriteShape_1; }
                var result = _spriteShape_1 = _c.CreateSpriteShape(PathGeometry_0());
                result.Offset = new Vector2(96F, 97.9820023F);
                result.FillBrush = LinearGradientBrush();
                return result;
            }

            // - - PreComp layer: Pre-comp 1
            // - Transforms for Pre-comp 1 Scale(0.25,0.25,0), Offset(-96,-96.496,0)
            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<68.681, 96.054>, Scale:<4, 4>
                var result = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(4F, 0F, 0F, 4F, 68.6809998F, 96.0540009F)); ;
                result.StrokeBrush = ColorBrush_White();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // - - - PreComp layer: Pre-comp 1
            // - - Transforms for Pre-comp 1 Scale(0.25,0.25,0), Offset(-96,-96.496,0)
            // - Layer aggregator
            // Layer: circle
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                if (_spriteShape_3 != null) { return _spriteShape_3; }
                var result = _spriteShape_3 = _c.CreateSpriteShape(PathGeometry_2());
                result.Offset = new Vector2(140F, 100F);
                result.FillBrush = ColorBrush_White();
                return result;
            }

            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(192F, 192F);
                return result;
            }

            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_1();
                result.SourceSize = new Vector2(192F, 192F);
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: heart
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // PreComp layer: Pre-comp 1
                result.Children.InsertAtTop(ContainerVisual_2());
                return result;
            }

            // Transforms for heart
            ContainerVisual ContainerVisual_2()
            {
                if (_containerVisual_2 != null) { return _containerVisual_2; }
                var result = _containerVisual_2 = _c.CreateContainerVisual();
                result.Offset = new Vector3(96F, 97.9820023F, 0F);
                // Transforms for Pre-comp 1 Scale(0.25,0.25,0), Offset(-96,-96.496,0)
                result.Children.InsertAtTop(ContainerVisual_3());
                return result;
            }

            // PreComp layer: Pre-comp 1
            // Transforms for Pre-comp 1 Scale(0.25,0.25,0), Offset(-96,-96.496,0)
            ContainerVisual ContainerVisual_3()
            {
                var result = _c.CreateContainerVisual();
                result.Clip = InsetClip_0();
                result.Size = new Vector2(192F, 192F);
                // Offset:<-24, -24.496002>, Scale:<0.25, 0.25>
                result.TransformMatrix = new Matrix4x4(0.25F, 0F, 0F, 0F, 0F, 0.25F, 0F, 0F, 0F, 0F, 0F, 0F, -24F, -24.4960022F, 0F, 1F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // Shape tree root for layer: heart 2
                children.InsertAtTop(ShapeVisual_0());
                children.InsertAtTop(SpriteVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            // - PreComp layer: Pre-comp 1
            // Transforms for Pre-comp 1 Scale(0.25,0.25,0), Offset(-96,-96.496,0)
            InsetClip InsetClip_0()
            {
                var result = _c.CreateInsetClip();
                return result;
            }

            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_0_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 14.
                result.InsertKeyFrame(0.5F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 14.
                result.InsertKeyFrame(0.5F, 0F, HoldThenStepEasingFunction());
                // Frame 28.
                result.InsertKeyFrame(1F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // Shape tree root for layer: heart 2
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(192F, 192F);
                // ShapeGroup: Group 1
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // Shape tree root for layer: heart
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(192F, 192F);
                // ShapeGroup: Group 1
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // - PreComp layer: Pre-comp 1
            // Transforms for Pre-comp 1 Scale(0.25,0.25,0), Offset(-96,-96.496,0)
            // Layer aggregator
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(192F, 192F);
                var shapes = result.Shapes;
                // Scale:4,4, Offset:<68.681, 96.054>
                shapes.Add(SpriteShape_2());
                // Layer: circle
                shapes.Add(ContainerShape());
                return result;
            }

            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(192F, 192F);
                result.Brush = EffectBrush();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                if (_scaleVector2Animation_0 != null) { return _scaleVector2Animation_0; }
                var result = _scaleVector2Animation_0 = CreateVector2KeyFrameAnimation(0F, new Vector2(4F, 4F), HoldThenStepEasingFunction());
                // Frame 14.
                result.InsertKeyFrame(0.5F, new Vector2(3.79999995F, 3.79999995F), CubicBezierEasingFunction_0());
                // Frame 28.
                result.InsertKeyFrame(1F, new Vector2(4F, 4F), CubicBezierEasingFunction_0());
                return result;
            }

            // - - - - PreComp layer: Pre-comp 1
            // - - - Transforms for Pre-comp 1 Scale(0.25,0.25,0), Offset(-96,-96.496,0)
            // - - Layer aggregator
            // - Layer: circle
            // ShapeGroup: Group 1
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(2F, 2F), StepThenHoldEasingFunction());
                // Frame 14.
                result.InsertKeyFrame(0.5F, new Vector2(2F, 2F), HoldThenStepEasingFunction());
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, new Vector2(3.5999999F, 3.5999999F), CubicBezierEasingFunction_0());
                // Frame 27.
                result.InsertKeyFrame(0.964285731F, new Vector2(3.5999999F, 3.5999999F), CubicBezierEasingFunction_0());
                // Frame 28.
                result.InsertKeyFrame(1F, new Vector2(2F, 2F), CubicBezierEasingFunction_0());
                return result;
            }

            // - - - PreComp layer: Pre-comp 1
            // - - Transforms for Pre-comp 1 Scale(0.25,0.25,0), Offset(-96,-96.496,0)
            // - Layer aggregator
            // Layer: circle
            Vector2KeyFrameAnimation ShapeVisibilityAnimation()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 14.
                result.InsertKeyFrame(0.5F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                return result;
            }

            // PreComp layer: Pre-comp 1
            // Scale
            Vector3KeyFrameAnimation ScaleVector3Animation()
            {
                // Frame 0.
                var result = CreateVector3KeyFrameAnimation(0F, new Vector3(4F, 4F, 1F), HoldThenStepEasingFunction());
                // Frame 14.
                result.InsertKeyFrame(0.5F, new Vector3(3.79999995F, 3.79999995F, 1F), CubicBezierEasingFunction_0());
                // Frame 28.
                result.InsertKeyFrame(1F, new Vector3(4F, 4F, 1F), CubicBezierEasingFunction_0());
                return result;
            }

            internal HeartPulse_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(192F, 192F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape.StartAnimation("Scale", ShapeVisibilityAnimation(), AnimationController_0());
                _pathGeometry_1.StartAnimation("TStart", TStartScalarAnimation_0_to_1(), AnimationController_0());
                _pathGeometry_1.StartAnimation("TEnd", TEndScalarAnimation_0_to_1(), AnimationController_0());
                _spriteShape_0.StartAnimation("Scale", ScaleVector2Animation_0(), AnimationController_0());
                _spriteShape_1.StartAnimation("Scale", ScaleVector2Animation_0(), AnimationController_0());
                _spriteShape_3.StartAnimation("Scale", ScaleVector2Animation_1(), AnimationController_0());
                _containerVisual_2.StartAnimation("Scale", ScaleVector3Animation(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _containerShape.StopAnimation("Scale");
                _pathGeometry_1.StopAnimation("TStart");
                _pathGeometry_1.StopAnimation("TEnd");
                _spriteShape_0.StopAnimation("Scale");
                _spriteShape_1.StopAnimation("Scale");
                _spriteShape_3.StopAnimation("Scale");
                _containerVisual_2.StopAnimation("Scale");
            }

        }
    }
}
