<?xml version="1.0" encoding="utf-8"?>
<Page
    x:Class="HardenWindowsSecurity.Pages.Protect"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:HardenWindowsSecurity.Pages"
    xmlns:ui="using:CommunityToolkit.WinUI"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ani="using:CommunityToolkit.WinUI.Animations"
    xmlns:customUI="using:AppControlManager.CustomUIElements"
    xmlns:others="using:AppControlManager.Others"
    xmlns:Protect="using:HardenWindowsSecurity.Protect"
    xmlns:controls="using:CommunityToolkit.WinUI.Controls"
    xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    FlowDirection="{x:Bind ViewModel.AppSettings.ApplicationGlobalFlowDirection, Mode=OneWay}"
    mc:Ignorable="d">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Grid.Resources>

            <!-- For the Protection ListView Grouping -->
            <CollectionViewSource x:Name="ProtectionCategoriesCollectionViewSource"
                                  Source="{x:Bind ViewModel.ProtectionCategoriesListItemsSource, Mode=OneWay}"
                                  IsSourceGrouped="True"/>

            <!-- Defines a single Protection category that is displayed in the ListView -->
            <DataTemplate x:Key="ProtectionCategoryListViewTemplate"
                          x:DataType="Protect:ProtectionCategoryListViewItem">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <Border CornerRadius="15"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"
                            BorderThickness="0"
                            Grid.RowSpan="3"
                            Grid.Column="0">
                        <Image Width ="36"
                               Height="36"
                               Margin="6"
                               ToolTipService.ToolTip="{x:Bind Title}"
                               AutomationProperties.HelpText="{x:Bind Title}"
                               Source="{x:Bind Logo}" />
                    </Border>

                    <TextBlock Grid.Column="1"
                               Grid.Row="0"
                               Text="{x:Bind Title}"
                               ToolTipService.ToolTip="{x:Bind Title}"
                               AutomationProperties.HelpText="{x:Bind Title}"
                               x:Phase="1"
                               Style="{ThemeResource BaseTextBlockStyle}"
                               Margin="12,6,0,0"/>

                    <TextBlock Grid.Column="1"
                               Grid.Row="1"
                               Text="{x:Bind Subtitle}"
                               ToolTipService.ToolTip="{x:Bind Subtitle}"
                               AutomationProperties.HelpText="{x:Bind Subtitle}"
                               x:Phase="2"
                               Style="{ThemeResource BodyTextBlockStyle}"
                               Margin="12,6,0,0"/>

                    <!-- Sub-categories as vertical list of checkboxes -->
                    <ItemsControl Grid.Column="1"
                                  Grid.Row="2"
                                  ItemsSource="{x:Bind SubCategories}"
                                  Margin="12,6,0,6">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate x:DataType="Protect:SubCategoryDefinition">
                                <CheckBox Content="{x:Bind Description}"
                                          IsChecked="True"
                                          ToolTipService.ToolTip="{x:Bind Description}"
                                          AutomationProperties.HelpText="{x:Bind Description}" />
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </Grid>
            </DataTemplate>

        </Grid.Resources>

        <controls:WrapPanel Grid.Row="0" VerticalSpacing="4" HorizontalSpacing="4" Orientation="Vertical" Margin="6,0,6,10">

            <TextBlock x:Uid="ProtectPageTitle" TextWrapping="WrapWholeWords" Style="{StaticResource BodyTextBlockStyle}" />

            <HyperlinkButton x:Uid="GuideButtonAtTop" NavigateUri="https://github.com/HotCakeX/Harden-Windows-Security" />

        </controls:WrapPanel>

        <Border x:Name="AnimatedBorder"
                Grid.Row="1"
                ui:Effects.Shadow="{StaticResource BorderShadow}"
                Background="Transparent"
                BorderThickness="0"
                Margin="15,0,15,0"
                PointerEntered="{x:Bind OnBorderPointerEntered}"
                PointerExited="{x:Bind OnBorderPointerExited}">

            <ani:Explicit.Animations>
                <ani:AnimationSet x:Name="ShadowEnterAnimation">
                    <ani:BlurRadiusDropShadowAnimation To="20"/>
                </ani:AnimationSet>

                <ani:AnimationSet x:Name="ShadowExitAnimation">
                    <ani:BlurRadiusDropShadowAnimation To="10"/>
                </ani:AnimationSet>
            </ani:Explicit.Animations>

            <Border BorderThickness="0"
                    Padding="5"
                    CornerRadius="18">

                <controls:WrapPanel Orientation="Horizontal"
                            Margin="10"
                            HorizontalSpacing="15"
                            VerticalSpacing="12"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center">

                    <TextBlock x:Uid="ProtectionPresets" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="4,0,4,0" FontWeight="Bold" />

                    <ComboBox x:Uid="ProtectionPresetsComboBox"
                              IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}"
                              SelectedIndex="{x:Bind ViewModel.ProtectionPresetsSelectedIndex, Mode=TwoWay}">
                        <ComboBoxItem x:Uid="BasicProtectionPresetComboBoxItem"/>
                        <ComboBoxItem x:Uid="RecommendedProtectionPresetComboBoxItem"/>
                        <ComboBoxItem x:Uid="CompleteProtectionPresetComboBoxItem"/>
                    </ComboBox>

                    <!-- Apply Selected Button -->
                    <customUI:AnimatedCancellableButton x:Uid="ProtectPageApplySelectedButton"
									IsEnabled="{x:Bind ViewModel.IsApplyButtonEnabled, Mode=OneWay}"
									CancelMethod="{x:Bind ViewModel.ApplySelectedCancellableButton.Cancel, Mode=OneWay}"
									ExternalOperationInProgress="{x:Bind ViewModel.ApplySelectedCancellableButton.IsOperationInProgress, Mode=OneWay}"
									ExternalIsCancelState="{x:Bind ViewModel.ApplySelectedCancellableButton.IsCancelState, Mode=OneWay}"
									ExternalIsCancellingState="{x:Bind ViewModel.ApplySelectedCancellableButton.IsCancellingState, Mode=OneWay}"
									ExternalIsAnimating="{x:Bind ViewModel.ApplySelectedCancellableButton.IsAnimating, Mode=OneWay}"
									ExternalButtonContent="{x:Bind ViewModel.ApplySelectedCancellableButton.ButtonContent, Mode=OneWay}"
									ExternalOriginalText="{x:Bind ViewModel.ApplySelectedCancellableButton.OriginalText, Mode=OneWay}"
									ExternalInternalIsCancelState="{x:Bind ViewModel.ApplySelectedCancellableButton.InternalIsCancelState, Mode=OneWay}"
									ExternalInternalIsCancellingState="{x:Bind ViewModel.ApplySelectedCancellableButton.InternalIsCancellingState, Mode=OneWay}"
									ExternalInternalIsAnimating="{x:Bind ViewModel.ApplySelectedCancellableButton.InternalIsAnimating, Mode=OneWay}"
									ExternalInternalIsOperationInProgress="{x:Bind ViewModel.ApplySelectedCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
									ExternalInternalSuppressExternalClick="{x:Bind ViewModel.ApplySelectedCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
									ExternalShadowAnimationRunning="{x:Bind ViewModel.ApplySelectedCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
									ExternalOperationStarted="{x:Bind ViewModel.ApplySelectedCancellableButton.OperationStarted, Mode=OneWay}"
									Click="{x:Bind ViewModel.ApplySelectedCategories}"/>

                    <!-- Verify Selected Button -->
                    <customUI:AnimatedCancellableButton x:Uid="ProtectPageVerifySelectedButton"
									IsEnabled="{x:Bind ViewModel.IsVerifyButtonEnabled, Mode=OneWay}"
									CancelMethod="{x:Bind ViewModel.VerifySelectedCancellableButton.Cancel, Mode=OneWay}"
									ExternalOperationInProgress="{x:Bind ViewModel.VerifySelectedCancellableButton.IsOperationInProgress, Mode=OneWay}"
									ExternalIsCancelState="{x:Bind ViewModel.VerifySelectedCancellableButton.IsCancelState, Mode=OneWay}"
									ExternalIsCancellingState="{x:Bind ViewModel.VerifySelectedCancellableButton.IsCancellingState, Mode=OneWay}"
									ExternalIsAnimating="{x:Bind ViewModel.VerifySelectedCancellableButton.IsAnimating, Mode=OneWay}"
									ExternalButtonContent="{x:Bind ViewModel.VerifySelectedCancellableButton.ButtonContent, Mode=OneWay}"
									ExternalOriginalText="{x:Bind ViewModel.VerifySelectedCancellableButton.OriginalText, Mode=OneWay}"
									ExternalInternalIsCancelState="{x:Bind ViewModel.VerifySelectedCancellableButton.InternalIsCancelState, Mode=OneWay}"
									ExternalInternalIsCancellingState="{x:Bind ViewModel.VerifySelectedCancellableButton.InternalIsCancellingState, Mode=OneWay}"
									ExternalInternalIsAnimating="{x:Bind ViewModel.VerifySelectedCancellableButton.InternalIsAnimating, Mode=OneWay}"
									ExternalInternalIsOperationInProgress="{x:Bind ViewModel.VerifySelectedCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
									ExternalInternalSuppressExternalClick="{x:Bind ViewModel.VerifySelectedCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
									ExternalShadowAnimationRunning="{x:Bind ViewModel.VerifySelectedCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
									ExternalOperationStarted="{x:Bind ViewModel.VerifySelectedCancellableButton.OperationStarted, Mode=OneWay}"
									Click="{x:Bind ViewModel.VerifySelectedCategories}"/>

                    <!-- Remove Selected Button -->
                    <customUI:AnimatedCancellableButton x:Uid="ProtectPageRemoveSelectedButton"
									IsEnabled="{x:Bind ViewModel.IsRemoveButtonEnabled, Mode=OneWay}"
									CancelMethod="{x:Bind ViewModel.RemoveSelectedCancellableButton.Cancel, Mode=OneWay}"
									ExternalOperationInProgress="{x:Bind ViewModel.RemoveSelectedCancellableButton.IsOperationInProgress, Mode=OneWay}"
									ExternalIsCancelState="{x:Bind ViewModel.RemoveSelectedCancellableButton.IsCancelState, Mode=OneWay}"
									ExternalIsCancellingState="{x:Bind ViewModel.RemoveSelectedCancellableButton.IsCancellingState, Mode=OneWay}"
									ExternalIsAnimating="{x:Bind ViewModel.RemoveSelectedCancellableButton.IsAnimating, Mode=OneWay}"
									ExternalButtonContent="{x:Bind ViewModel.RemoveSelectedCancellableButton.ButtonContent, Mode=OneWay}"
									ExternalOriginalText="{x:Bind ViewModel.RemoveSelectedCancellableButton.OriginalText, Mode=OneWay}"
									ExternalInternalIsCancelState="{x:Bind ViewModel.RemoveSelectedCancellableButton.InternalIsCancelState, Mode=OneWay}"
									ExternalInternalIsCancellingState="{x:Bind ViewModel.RemoveSelectedCancellableButton.InternalIsCancellingState, Mode=OneWay}"
									ExternalInternalIsAnimating="{x:Bind ViewModel.RemoveSelectedCancellableButton.InternalIsAnimating, Mode=OneWay}"
									ExternalInternalIsOperationInProgress="{x:Bind ViewModel.RemoveSelectedCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
									ExternalInternalSuppressExternalClick="{x:Bind ViewModel.RemoveSelectedCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
									ExternalShadowAnimationRunning="{x:Bind ViewModel.RemoveSelectedCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
									ExternalOperationStarted="{x:Bind ViewModel.RemoveSelectedCancellableButton.OperationStarted, Mode=OneWay}"
									Click="{x:Bind ViewModel.RemoveSelectedCategories}"/>

                </controls:WrapPanel>

            </Border>

        </Border>

        <customUI:InfoBarV2 Grid.Row="2"
                     Margin="15"
                     IsOpen="{x:Bind ViewModel.MainInfoBarIsOpen, Mode=TwoWay}"
                     Message="{x:Bind ViewModel.MainInfoBarMessage, Mode=OneWay}"
                     Severity="{x:Bind ViewModel.MainInfoBarSeverity, Mode=OneWay}"
                     IsClosable="{x:Bind ViewModel.MainInfoBarIsClosable, Mode=OneWay}"/>

        <ListView Grid.Row="3"
                  BorderThickness="1"
                  x:Name="ProtectionCategoriesListView"
                  Margin="0,20,0,10"
                  CornerRadius="10"
                  Loaded="{x:Bind ViewModel.ProtectionCategoriesListView_Loaded}"
                  ItemsSource="{x:Bind ProtectionCategoriesCollectionViewSource.View, Mode=OneWay}"
                  BorderBrush="{ThemeResource SystemControlForegroundBaseMediumLowBrush}"
                  HorizontalAlignment="Center"
                  SelectionMode="Multiple"
                  SelectionChanged="{x:Bind ViewModel.ListView_SelectionChanged}"
                  ItemTemplate="{StaticResource ProtectionCategoryListViewTemplate}">
            <ListView.ItemsPanel>
                <ItemsPanelTemplate>
                    <ItemsStackPanel AreStickyGroupHeadersEnabled="True"/>
                </ItemsPanelTemplate>
            </ListView.ItemsPanel>
            <ListView.GroupStyle>
                <GroupStyle>
                    <GroupStyle.HeaderTemplate>
                        <DataTemplate x:DataType="Protect:GroupInfoListForProtectionCategories">
                            <Border AutomationProperties.AccessibilityView="Raw">
                                <TextBlock Text="{x:Bind Key}" Style="{ThemeResource TitleTextBlockStyle}" AutomationProperties.AccessibilityView="Raw"/>
                            </Border>
                        </DataTemplate>
                    </GroupStyle.HeaderTemplate>
                </GroupStyle>
            </ListView.GroupStyle>
        </ListView>

    </Grid>
</Page>
