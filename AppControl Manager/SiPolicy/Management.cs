// MIT License
//
// Copyright (c) 2023-Present - Violet Hansen - (aka HotCakeX on GitHub) - Email Address: spynetgirl@outlook.com
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// See here for more information: https://github.com/HotCakeX/Harden-Windows-Security/blob/main/LICENSE
//

using System;
using System.IO;
using System.Xml;
using AppControlManager.Main;
using AppControlManager.Others;
using AppControlManager.XMLOps;

namespace AppControlManager.SiPolicy;

internal static class Management
{

	/// <summary>
	/// This class uses the auto-generated code from the XSD schema to initialize the SiPolicy object
	/// By accepting a string path to a valid XML file
	/// Native AOT/Trimming compatible
	///
	/// Generated by the following command:
	/// . "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64\xsd.exe" "C:\Windows\schemas\CodeIntegrity\cipolicy.xsd" /classes /namespace:AppControlManager.SiPolicy /language:CS
	/// </summary>
	/// <param name="xmlFilePath"></param>
	/// <param name="XmlObj"></param>
	/// <returns></returns>
	/// <exception cref="InvalidOperationException"></exception>
	internal static SiPolicy Initialize(string? xmlFilePath, XmlDocument? XmlObj)
	{
		if (!string.IsNullOrEmpty(xmlFilePath) && !CiPolicyTest.TestCiPolicy(xmlFilePath))
		{
			throw new InvalidOperationException(string.Format(GlobalVars.GetStr("XmlFileNotCompliantWithSchema"), xmlFilePath));
		}

		/*

		XmlSerializer serializer = new(typeof(SiPolicy));

		// Use XmlReader with secure settings
		XmlReaderSettings settings = new()
		{
			DtdProcessing = DtdProcessing.Prohibit, // Disable DTD processing
			XmlResolver = null,                     // Prevent external entity resolution
			Async = true // Async
		};

		using XmlReader reader = XmlReader.Create(xmlFilePath, settings);

		if (serializer.Deserialize(reader) is not SiPolicy policy)
		{
			throw new InvalidOperationException($"Could not instantiate the XML file '{xmlFilePath}'");
		}

		return policy;

		*/

		return CustomDeserialization.DeserializeSiPolicy(xmlFilePath, XmlObj);
	}

	/// <summary>
	/// Converts a Code Integrity policy to CIP binary file.
	/// </summary>
	/// <param name="xmlFilePath"></param>
	/// <param name="XmlObj"></param>
	/// <param name="BinPath"></param>
	internal static void ConvertXMLToBinary(string? xmlFilePath, XmlDocument? XmlObj, string BinPath)
	{
		if (File.Exists(BinPath))
			File.Delete(BinPath);

		SiPolicy policyObj = Initialize(xmlFilePath, XmlObj);
		using FileStream honeyStream = new(BinPath, FileMode.Create, FileAccess.ReadWrite);
		BinaryOpsForward.ConvertPolicyToBinary(policyObj, honeyStream);
	}

	/// <summary>
	/// Saves the SiPolicy object to a XML file.
	/// Uses custom hand made serialization logic that is compatible with Native AOT compilation
	/// </summary>
	/// <param name="policy"></param>
	/// <param name="filePath"></param>
	internal static void SavePolicyToFile(SiPolicy policy, string filePath)
	{
		XmlDocument xmlObj = CustomSerialization.CreateXmlFromSiPolicy(policy);

		xmlObj.Save(filePath);

		CloseEmptyXmlNodesSemantic.Close(filePath);

		/*

		XmlSerializer serializer = new(typeof(SiPolicy));

		// Create XmlSerializerNamespaces to include only the desired namespace
		XmlSerializerNamespaces namespaces = new();
		namespaces.Add(string.Empty, GlobalVars.SiPolicyNamespace); // Default namespace without prefix

		XmlWriterSettings settings = new()
		{
			Indent = true,                // Format the XML for readability
			NewLineOnAttributes = false,  // Keep attributes on the same line
			Async = true,                 // Async support for better performance with large files
			OmitXmlDeclaration = false,   // Include the XML declaration
			Encoding = System.Text.Encoding.UTF8 // Ensure UTF-8 encoding
		};

		using XmlWriter writer = XmlWriter.Create(filePath, settings);
		serializer.Serialize(writer, policy, namespaces);

		*/

		if (!CiPolicyTest.TestCiPolicy(filePath))
		{
			throw new InvalidOperationException($"The XML file '{filePath}' created at the end is not compliant with the CI policy schema");
		}
	}

}
