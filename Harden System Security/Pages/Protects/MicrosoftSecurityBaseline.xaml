<?xml version="1.0" encoding="utf-8"?>
<Page
    x:Class="HardenSystemSecurity.Pages.Protects.MicrosoftSecurityBaseline"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:HardenSystemSecurity.Pages.Protects"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="using:CommunityToolkit.WinUI"
    xmlns:ani="using:CommunityToolkit.WinUI.Animations"
    xmlns:customUI="using:AppControlManager.CustomUIElements"
    xmlns:others="using:AppControlManager.Others"
    xmlns:Protect="using:HardenSystemSecurity.Protect"
    xmlns:controls="using:CommunityToolkit.WinUI.Controls"
    xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:viewModels="using:HardenSystemSecurity.ViewModels"
    xmlns:animatedvisuals="using:AnimatedVisuals"
    xmlns:GroupPolicy="using:HardenSystemSecurity.GroupPolicy"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    FlowDirection="{x:Bind ViewModel.AppSettings.ApplicationGlobalFlowDirection, Mode=OneWay}"
    mc:Ignorable="d">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <controls:WrapPanel Style="{StaticResource PageHeaderWrapPanelStyle}">

            <TextBlock x:Uid="MicrosoftSecurityBaselinePageTitle" TextWrapping="WrapWholeWords" Style="{StaticResource BodyTextBlockStyle}" />

            <customUI:GuideButton NavigateUri="https://github.com/HotCakeX/Harden-Windows-Security/wiki/Microsoft-Security-Baselines" />

        </controls:WrapPanel>

        <customUI:InfoBarV2 Grid.Row="1"
                            IsOpen="{x:Bind ViewModel.MainInfoBarIsOpen, Mode=TwoWay}"
                            Message="{x:Bind ViewModel.MainInfoBarMessage, Mode=OneWay}"
                            Severity="{x:Bind ViewModel.MainInfoBarSeverity, Mode=OneWay}"
                            IsClosable="{x:Bind ViewModel.MainInfoBarIsClosable, Mode=OneWay}" />

        <Border Grid.Row="2" Margin="0,10,0,10" Style="{StaticResource GridCardStyle}" Padding="8">

            <controls:WrapPanel Orientation="Horizontal" HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                HorizontalSpacing="10"
                                VerticalSpacing="10">

                <ProgressRing IsActive="True"
                              Visibility="{x:Bind ViewModel.ProgressBarVisibility, Mode=OneWay}"
                              VerticalAlignment="Center" />

                <!-- Apply All Button -->
                <customUI:AnimatedCancellableButton
                    IsEnabled="{x:Bind ViewModel.IsApplyButtonEnabled, Mode=OneWay}"
                    CancelMethod="{x:Bind ViewModel.ApplyAllCancellableButton.Cancel, Mode=OneWay}"
                    ExternalOperationInProgress="{x:Bind ViewModel.ApplyAllCancellableButton.IsOperationInProgress, Mode=OneWay}"
                    ExternalIsCancelState="{x:Bind ViewModel.ApplyAllCancellableButton.IsCancelState, Mode=OneWay}"
                    ExternalIsCancellingState="{x:Bind ViewModel.ApplyAllCancellableButton.IsCancellingState, Mode=OneWay}"
                    ExternalIsAnimating="{x:Bind ViewModel.ApplyAllCancellableButton.IsAnimating, Mode=OneWay}"
                    ExternalButtonContent="{x:Bind ViewModel.ApplyAllCancellableButton.ButtonContent, Mode=OneWay}"
                    ExternalOriginalText="{x:Bind ViewModel.ApplyAllCancellableButton.OriginalText, Mode=OneWay}"
                    ExternalInternalIsCancelState="{x:Bind ViewModel.ApplyAllCancellableButton.InternalIsCancelState, Mode=OneWay}"
                    ExternalInternalIsCancellingState="{x:Bind ViewModel.ApplyAllCancellableButton.InternalIsCancellingState, Mode=OneWay}"
                    ExternalInternalIsAnimating="{x:Bind ViewModel.ApplyAllCancellableButton.InternalIsAnimating, Mode=OneWay}"
                    ExternalInternalIsOperationInProgress="{x:Bind ViewModel.ApplyAllCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
                    ExternalInternalSuppressExternalClick="{x:Bind ViewModel.ApplyAllCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
                    ExternalShadowAnimationRunning="{x:Bind ViewModel.ApplyAllCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
                    ExternalOperationStarted="{x:Bind ViewModel.ApplyAllCancellableButton.OperationStarted, Mode=OneWay}"
                    Click="{x:Bind ViewModel.ApplySecurityBaseline}"/>

                <!-- Remove All Button -->
                <customUI:AnimatedCancellableButton
                    IsEnabled="{x:Bind ViewModel.IsRemoveButtonEnabled, Mode=OneWay}"
                    CancelMethod="{x:Bind ViewModel.RemoveAllCancellableButton.Cancel, Mode=OneWay}"
                    ExternalOperationInProgress="{x:Bind ViewModel.RemoveAllCancellableButton.IsOperationInProgress, Mode=OneWay}"
                    ExternalIsCancelState="{x:Bind ViewModel.RemoveAllCancellableButton.IsCancelState, Mode=OneWay}"
                    ExternalIsCancellingState="{x:Bind ViewModel.RemoveAllCancellableButton.IsCancellingState, Mode=OneWay}"
                    ExternalIsAnimating="{x:Bind ViewModel.RemoveAllCancellableButton.IsAnimating, Mode=OneWay}"
                    ExternalButtonContent="{x:Bind ViewModel.RemoveAllCancellableButton.ButtonContent, Mode=OneWay}"
                    ExternalOriginalText="{x:Bind ViewModel.RemoveAllCancellableButton.OriginalText, Mode=OneWay}"
                    ExternalInternalIsCancelState="{x:Bind ViewModel.RemoveAllCancellableButton.InternalIsCancelState, Mode=OneWay}"
                    ExternalInternalIsCancellingState="{x:Bind ViewModel.RemoveAllCancellableButton.InternalIsCancellingState, Mode=OneWay}"
                    ExternalInternalIsAnimating="{x:Bind ViewModel.RemoveAllCancellableButton.InternalIsAnimating, Mode=OneWay}"
                    ExternalInternalIsOperationInProgress="{x:Bind ViewModel.RemoveAllCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
                    ExternalInternalSuppressExternalClick="{x:Bind ViewModel.RemoveAllCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
                    ExternalShadowAnimationRunning="{x:Bind ViewModel.RemoveAllCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
                    ExternalOperationStarted="{x:Bind ViewModel.RemoveAllCancellableButton.OperationStarted, Mode=OneWay}"
                    Click="{x:Bind ViewModel.RemoveSecurityBaseline}"/>

                <!-- Verify All Button -->
                <customUI:AnimatedCancellableButton
                    IsEnabled="{x:Bind ViewModel.IsVerifyButtonEnabled, Mode=OneWay}"
                    CancelMethod="{x:Bind ViewModel.VerifyAllCancellableButton.Cancel, Mode=OneWay}"
                    ExternalOperationInProgress="{x:Bind ViewModel.VerifyAllCancellableButton.IsOperationInProgress, Mode=OneWay}"
                    ExternalIsCancelState="{x:Bind ViewModel.VerifyAllCancellableButton.IsCancelState, Mode=OneWay}"
                    ExternalIsCancellingState="{x:Bind ViewModel.VerifyAllCancellableButton.IsCancellingState, Mode=OneWay}"
                    ExternalIsAnimating="{x:Bind ViewModel.VerifyAllCancellableButton.IsAnimating, Mode=OneWay}"
                    ExternalButtonContent="{x:Bind ViewModel.VerifyAllCancellableButton.ButtonContent, Mode=OneWay}"
                    ExternalOriginalText="{x:Bind ViewModel.VerifyAllCancellableButton.OriginalText, Mode=OneWay}"
                    ExternalInternalIsCancelState="{x:Bind ViewModel.VerifyAllCancellableButton.InternalIsCancelState, Mode=OneWay}"
                    ExternalInternalIsCancellingState="{x:Bind ViewModel.VerifyAllCancellableButton.InternalIsCancellingState, Mode=OneWay}"
                    ExternalInternalIsAnimating="{x:Bind ViewModel.VerifyAllCancellableButton.InternalIsAnimating, Mode=OneWay}"
                    ExternalInternalIsOperationInProgress="{x:Bind ViewModel.VerifyAllCancellableButton.InternalIsOperationInProgress, Mode=OneWay}"
                    ExternalInternalSuppressExternalClick="{x:Bind ViewModel.VerifyAllCancellableButton.InternalSuppressExternalClick, Mode=OneWay}"
                    ExternalShadowAnimationRunning="{x:Bind ViewModel.VerifyAllCancellableButton.ShadowAnimationRunning, Mode=OneWay}"
                    ExternalOperationStarted="{x:Bind ViewModel.VerifyAllCancellableButton.OperationStarted, Mode=OneWay}"
                    Click="{x:Bind ViewModel.VerifySecurityBaseline}"/>

                <Button x:Uid="ClearDataButton" IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}" Click="{x:Bind ViewModel.ClearData}">
                    <Button.ContentTemplate>
                        <DataTemplate x:DataType="x:String">
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <FontIcon Glyph="&#xED62;" FontSize="16"/>
                                <TextBlock Text="{x:Bind}"/>
                            </StackPanel>
                        </DataTemplate>
                    </Button.ContentTemplate>
                </Button>

                <Button x:Uid="ExportToJsonButton" IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}" Click="{x:Bind ViewModel.ExportToJson}">
                    <Button.ContentTemplate>
                        <DataTemplate x:DataType="x:String">
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <FontIcon Glyph="&#xE74E;" FontSize="16"/>
                                <TextBlock Text="{x:Bind}"/>
                            </StackPanel>
                        </DataTemplate>
                    </Button.ContentTemplate>
                </Button>

                <Button IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}"
                        x:Uid="DownloadURLButton"
                        VerticalAlignment="Center">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal" Spacing="7">
                            <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}"
                                      Glyph="&#xE774;"/>
                            <TextBlock x:Uid="DownloadURLButtonText"
                                       VerticalAlignment="Center"/>
                        </StackPanel>
                    </Button.Content>
                    <Button.Flyout>
                        <Flyout>
                            <StackPanel Orientation="Vertical"
                                        Spacing="10"
                                        HorizontalAlignment="Center">
                                <TextBox Text="{x:Bind ViewModel.DownloadURL, Mode=TwoWay}"
                                         MaxWidth="250"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Top"
                                         TextWrapping="Wrap"/>

                                <Button x:Uid="ResetURLButton"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Bottom"
                                        Click="{x:Bind ViewModel.ResetToDefaultUrl}"/>
                            </StackPanel>
                        </Flyout>
                    </Button.Flyout>
                </Button>

                <!-- Total chip -->
                <Border CornerRadius="8"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Center"
                        Padding="10,6"
                        BorderThickness="1"
                        BorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                        Background="{ThemeResource CardBackgroundFillColorDefaultBrush}">
                    <StackPanel Orientation="Horizontal" Spacing="6" VerticalAlignment="Center">
                        <FontIcon Glyph="&#xE8A9;" Foreground="{ThemeResource AccentTextFillColorPrimaryBrush}" />
                        <TextBlock VerticalAlignment="Center">
                            <Run x:Uid="TotalText" />
                            <Run Text="{x:Bind ViewModel.VerificationResults.Count, Mode=OneWay}" FontWeight="SemiBold" />
                        </TextBlock>
                    </StackPanel>
                </Border>

                <TextBox Width="300"
                         IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}"
                         x:Uid="SearchBoxTextBox"
                         Text="{x:Bind ViewModel.SearchKeyword, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                         VerticalAlignment="Center"
                         VerticalContentAlignment="Center" />

            </controls:WrapPanel>
        </Border>

        <customUI:ListViewV2 Grid.Row="3"
                             RegistryKey="MicrosoftSecurityBaseline"
                             IsEnabled="{x:Bind ViewModel.ElementsAreEnabled, Mode=OneWay}"
                             ItemsSource="{x:Bind ViewModel.VerificationResults, Mode=OneWay}"
                             SelectionMode="Extended">

            <customUI:ListViewV2.Header>

                <Border CornerRadius="5" Background="Black">
                    <interactivity:Interaction.Behaviors>
                        <customUI:StickyHeaderBehaviorV2/>
                    </interactivity:Interaction.Behaviors>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth1, Mode=TwoWay}" MinWidth="50" />
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth2, Mode=TwoWay}" MinWidth="50" />
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth3, Mode=TwoWay}" MinWidth="50" />
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth4, Mode=TwoWay}" MinWidth="50" />
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth5, Mode=TwoWay}" MinWidth="50" />
                        </Grid.ColumnDefinitions>
                        <Button x:Uid="FriendlyNameColumnHeaderBtn" Tag="FriendlyName" Grid.Column="0" Margin="10,0,0,0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.HeaderColumnSortingButton_Click}" />
                        <Button x:Uid="SourceColumnHeaderBtn" Tag="Source" Grid.Column="1" Margin="0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.HeaderColumnSortingButton_Click}" />
                        <Button x:Uid="StatusColumnHeaderBtn" Tag="IsCompliant" Grid.Column="2" Margin="0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.HeaderColumnSortingButton_Click}" />
                        <Button x:Uid="CurrentValueColumnHeaderBtn" Tag="CurrentValue" Grid.Column="3" Margin="0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.HeaderColumnSortingButton_Click}" />
                        <Button x:Uid="ExpectedValueColumnHeaderBtn" Tag="ExpectedValue" Grid.Column="4" Margin="0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.HeaderColumnSortingButton_Click}" />

                        <!-- GridSplitters between columns -->
                        <controls:GridSplitter Grid.Column="1" />
                        <controls:GridSplitter Grid.Column="2" />
                        <controls:GridSplitter Grid.Column="3" />
                        <controls:GridSplitter Grid.Column="4" />

                    </Grid>
                </Border>
            </customUI:ListViewV2.Header>

            <!-- DataTemplate for ListView items -->
            <customUI:ListViewV2.ItemTemplate>
                <DataTemplate x:DataType="GroupPolicy:VerificationResult" xmlns:VMs="using:HardenSystemSecurity.ViewModels">
                    <!-- Setting Background="Transparent" on the Grid makes it hit-test visible, meaning that even areas without any child elements (like empty spaces in the column) will respond to pointer events.  -->
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{x:Bind VMs:ViewModelProvider.MicrosoftSecurityBaselineVM.ColumnWidth1, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind VMs:ViewModelProvider.MicrosoftSecurityBaselineVM.ColumnWidth2, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind VMs:ViewModelProvider.MicrosoftSecurityBaselineVM.ColumnWidth3, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind VMs:ViewModelProvider.MicrosoftSecurityBaselineVM.ColumnWidth4, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind VMs:ViewModelProvider.MicrosoftSecurityBaselineVM.ColumnWidth5, Mode=OneWay}" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{x:Bind FriendlyName}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="0"/>
                        <TextBlock Text="{x:Bind SourceDisplay}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="1"/>
                        <customUI:StatusIndicatorV2 Status="{x:Bind ComplianceStatus}" Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <TextBlock Text="{x:Bind CurrentValue}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="3"/>
                        <TextBlock Text="{x:Bind ExpectedValue}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="4"/>
                    </Grid>
                </DataTemplate>
            </customUI:ListViewV2.ItemTemplate>
        </customUI:ListViewV2>

    </Grid>
</Page>