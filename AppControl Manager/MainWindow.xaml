<?xml version="1.0" encoding="utf-8"?>
<Window
    x:Class="AppControlManager.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:AppControlManager"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="using:CommunityToolkit.WinUI"
    xmlns:controls="using:CommunityToolkit.WinUI.Controls"
    xmlns:animations="using:CommunityToolkit.WinUI.Animations"
    xmlns:AnimatedVisuals="using:Microsoft.UI.Xaml.Controls.AnimatedVisuals"
    mc:Ignorable="d"
    xmlns:animatedvisuals="using:AnimatedVisuals"
    SystemBackdrop="{x:Bind ViewModel.SystemBackDropStyle, Mode=OneWay}"
    Title="AppControl Manager">

    <Grid x:Name="RootGrid">

        <Grid.RowDefinitions>
            <!-- Titlebar Row -->
            <RowDefinition Height="Auto"/>
            <!-- NavigationView Row -->
            <RowDefinition/>
        </Grid.RowDefinitions>

        <Grid.Resources>
            <!-- For the BreadCrumbBar's size -->
            <x:Double x:Key="BreadcrumbBarChevronFontSize">30</x:Double>

            <!-- Theme Shadow effect used on certain elements inside of the grid -->
            <!-- https://learn.microsoft.com/en-us/windows/apps/design/layout/depth-shadow -->
            <ThemeShadow x:Name="SharedShadow" />

        </Grid.Resources>

        <!-- When using this, we shouldn't set PaneDisplayMode="" property on the navigation element itself or set that property to anything other than Auto, otherwise these dynamic triggers won't work on it. -->
        <!-- Also apparently there are hardcoded minimum width that do not allow for smaller MinWindowWidth to be set for the triggers below and they are overriden when it happens -->

        <!-- VisualStateManager for responsive layout of the NavigationView -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <!-- Very narrow window state -->
                <VisualState x:Name="DefaultState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="MainNavigation.PaneDisplayMode" Value="Top" />
                    </VisualState.Setters>
                </VisualState>

                <!-- Narrow window state -->
                <VisualState x:Name="NarrowState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="200" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="MainNavigation.PaneDisplayMode" Value="LeftCompact" />
                    </VisualState.Setters>
                </VisualState>

                <!-- Wide window state -->
                <VisualState x:Name="WideState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="400" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="MainNavigation.PaneDisplayMode" Value="Left" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <!-- Titlebar -->
        <!-- https://learn.microsoft.com/en-us/windows/apps/develop/title-bar#full-customization-example -->
        <Grid x:Name="AppTitleBar" Height="48" Grid.Row="0">

            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="LeftPaddingColumn" Width="0"/>
                <ColumnDefinition x:Name="BackButtonColumn" Width="Auto"/>
                <ColumnDefinition x:Name="HamburgerMenuButtonColumn" Width="Auto"/>
                <ColumnDefinition x:Name="IconColumn" Width="Auto"/>
                <ColumnDefinition Width="{x:Bind ViewModel.TitleColumnWidth, Mode=OneWay}" />
                <ColumnDefinition x:Name="LeftDragColumn" Width="*"/>
                <ColumnDefinition x:Name="SearchColumn" Width="3*"/>
                <ColumnDefinition x:Name="RightDragColumn" Width="*" />
                <ColumnDefinition x:Name="AccountColumn" Width="Auto"/>
                <ColumnDefinition x:Name="RightPaddingColumn" Width="0"/>
            </Grid.ColumnDefinitions>

            <!-- Back button style, mimics the same NavigationView back button's style. If the style isn't set here, we can use the built-in animated icon for the back button -->
            <Button x:Name="BackButtonTitleBar" Style="{StaticResource NavigationBackButtonNormalStyle}" Grid.Column="1" Click="{x:Bind BackButtonTitleBar_Click}" />

            <!-- Menu button style, mimics the same NavigationView menu (hamburger) button's style. If the style isn't set here, we can use the built-in animated icon for the menu (hamburger) button -->
            <Button VerticalAlignment="Center" VerticalContentAlignment="Center" x:Name="HamburgerMenuButton" Grid.Column="2" Style="{StaticResource PaneToggleButtonStyle}" Margin="10,0,0,0" Click="{x:Bind ViewModel.HamburgerMenuButton_Click}" />

            <!-- App icon -->
            <Image x:Name="TitleBarIcon" Source="ms-appx:///Assets/StoreLogo.png" Grid.Column="3"
                Width="16" Height="16"
                Margin="8,0,4,0"/>

            <!-- App title bar -->
            <TextBlock x:Name="TitleBarTextBlock"
                       Style="{StaticResource CaptionTextBlockStyle}"
                       Grid.Column="4"
                       VerticalAlignment="Center" />

            <!-- Main search area at the top -->
            <AutoSuggestBox x:Name="TitleBarSearchBox"
                            Grid.Column="6"
                            QueryIcon="Find"
                            VerticalAlignment="Center"
                            MaxWidth="600" TextChanged="SearchBox_TextChanged"
                            SuggestionChosen="SearchBox_SuggestionChosen"
                            x:Uid="MainSearchAutoSuggestBox" Margin="0"/>

            <!-- Sidebar access point -->
            <Button x:Name="SidebarButton" Click="{x:Bind ViewModel.SidebarButton_Click}" Grid.Column="8"
                    Height="32" Margin="5,0,30,0" Background="Transparent" BorderThickness="0">

                <Button.Content>
                    <controls:WrapPanel Orientation="Horizontal">

                        <AnimatedIcon Height="35" Width="35" Margin="-9,-9,-9,-9">
                            <AnimatedIcon.Source>
                                <animatedvisuals:Sidebar/>
                            </AnimatedIcon.Source>
                        </AnimatedIcon>

                    </controls:WrapPanel>
                </Button.Content>

            </Button>

        </Grid>

        <!-- Doc: https://learn.microsoft.com/en-us/windows/apps/design/controls/navigationview -->
        <NavigationView x:Name="MainNavigation"
                    IsTabStop="True"
                    IsPaneOpen="{x:Bind ViewModel.MainNavigationIsPaneOpen, Mode=TwoWay}"
                    ItemInvoked="MainNavigation_ItemInvoked"
                    IsBackButtonVisible="Collapsed"
                    IsBackEnabled="False"
                    AlwaysShowHeader="False"
                    Grid.Row="1"
                    IsTitleBarAutoPaddingEnabled="False"
                    IsPaneToggleButtonVisible="False">

            <!--
             Being controlled from MainWindow.xaml.cs

            <NavigationView.Resources>
                <SolidColorBrush x:Key="NavigationViewContentBackground" Color="Transparent" />
            </NavigationView.Resources>

            -->

            <!--
            Used in the Titlebar

            <NavigationView.AutoSuggestBox>
                <AutoSuggestBox x:Name="SearchBox"
                        QueryIcon="Find"
                        TextChanged="SearchBox_TextChanged"
                        SuggestionChosen="SearchBox_SuggestionChosen"
                        PlaceholderText="Search menu items..."/>
            </NavigationView.AutoSuggestBox>

           -->

            <!--
            <NavigationView.PaneCustomContent>
                <HyperlinkButton x:Name="PaneHyperlink" Content="More info" Margin="12,0" Visibility="Visible" />
            </NavigationView.PaneCustomContent>
            -->

            <NavigationView.MenuItems>
                <!-- Creation Group -->
                <NavigationViewItemHeader Content="Creation"/>
                <NavigationViewItem x:Uid="CreatePolicyNavItem" Icon="{x:Bind ViewModel.CreatePolicyIcon, Mode=OneWay}" />
                <NavigationViewItem x:Uid="CreateSupplementalPolicyNavItem" Icon="{x:Bind ViewModel.CreateSupplementalPolicyIcon, Mode=OneWay}" />
                <NavigationViewItem x:Uid="CreateDenyPolicyNavItem" Icon="{x:Bind ViewModel.CreateDenyPolicyIcon, Mode=OneWay}" />

                <!-- Certificates Group -->
                <NavigationViewItemHeader Content="Certificates"/>
                <NavigationViewItem x:Uid="BuildNewCertificateNavItem" Icon="{x:Bind ViewModel.BuildNewCertificateIcon, Mode=OneWay}" />
                <NavigationViewItem x:Uid="ViewFileCertificatesNavItem" Icon="{x:Bind ViewModel.ViewFileCertificatesIcon, Mode=OneWay}" />

                <!-- Logs Processing Group -->
                <NavigationViewItemHeader Content="Logs Processing"/>
                <NavigationViewItem x:Uid="CreatePolicyFromEventLogsNavItem" Icon="{x:Bind ViewModel.CreatePolicyFromEventLogsIcon, Mode=OneWay}" />
                <NavigationViewItem x:Uid="CreatePolicyFromMDEAHNavItem" Icon="{x:Bind ViewModel.CreatePolicyFromMDEAHIcon, Mode=OneWay}" />

                <!-- Tactical Group -->
                <NavigationViewItemHeader Content="Tactical"/>
                <NavigationViewItem x:Uid="AllowNewAppsNavItem" Icon="{x:Bind ViewModel.AllowNewAppsIcon, Mode=OneWay}" />
                <NavigationViewItem x:Uid="PolicyEditorNavItem" Icon="{x:Bind ViewModel.PolicyEditorIcon, Mode=OneWay}" />
                <NavigationViewItem x:Uid="SimulationNavItem" Icon="{x:Bind ViewModel.SimulationIcon, Mode=OneWay}" />

                <!-- Info Gathering Group -->
                <NavigationViewItemHeader Content="Info Gathering"/>
                <NavigationViewItem x:Uid="SystemInformationNavItem" Icon="{x:Bind ViewModel.SystemInformationIcon, Mode=OneWay}" />
                <NavigationViewItem x:Uid="GetCodeIntegrityHashesNavItem" Icon="{x:Bind ViewModel.GetCodeIntegrityHashesIcon, Mode=OneWay}" />
                <NavigationViewItem x:Uid="GetSecurePolicySettingsNavItem" Icon="{x:Bind ViewModel.GetSecurePolicySettingsIcon, Mode=OneWay}" />

                <!-- Policy Management Group -->
                <NavigationViewItemHeader Content="Policy Management"/>
                <NavigationViewItem x:Uid="ConfigurePolicyRuleOptionsNavItem" Icon="{x:Bind ViewModel.ConfigurePolicyRuleOptionsIcon, Mode=OneWay}" />
                <NavigationViewItem x:Uid="MergePoliciesNavItem" Icon="{x:Bind ViewModel.MergePoliciesIcon, Mode=OneWay}" />
                <NavigationViewItem x:Uid="DeploymentNavItem" Icon="{x:Bind ViewModel.DeploymentIcon, Mode=OneWay}" />
                <NavigationViewItem x:Uid="ValidatePoliciesNavItem" Icon="{x:Bind ViewModel.ValidatePoliciesIcon, Mode=OneWay}" />

                <!-- Documentation Group -->
                <NavigationViewItemHeader Content="Documentation"/>
                <NavigationViewItem x:Uid="GitHubDocsNavItem" Icon="{x:Bind ViewModel.GitHubDocsIcon, Mode=OneWay}" />
                <NavigationViewItem x:Uid="MSFTDocsNavItem" Icon="{x:Bind ViewModel.MSFTDocsIcon, Mode=OneWay}" />

                <NavigationViewItemSeparator/>

                <NavigationViewItem x:Uid="LogsNavItem" Icon="{x:Bind ViewModel.LogsIcon, Mode=OneWay}" />
            </NavigationView.MenuItems>

            <NavigationView.FooterMenuItems>
                <NavigationViewItem x:Uid="UpdateNavItem" Icon="{x:Bind ViewModel.UpdateIcon, Mode=OneWay}">
                    <NavigationViewItem.InfoBadge>
                        <InfoBadge Opacity="{x:Bind ViewModel.InfoBadgeOpacity, Mode=OneWay}"
                               Style="{ThemeResource AttentionIconInfoBadgeStyle}">
                            <InfoBadge.IconSource>
                                <FontIconSource Glyph="&#xEA6A;"/>
                            </InfoBadge.IconSource>
                        </InfoBadge>
                    </NavigationViewItem.InfoBadge>
                </NavigationViewItem>
            </NavigationView.FooterMenuItems>

            <!-- Split view to create the sidebar -->
            <SplitView PaneBackground="Transparent"
                 IsPaneOpen="{x:Bind ViewModel.SidebarPaneIsOpen, Mode=TwoWay}" OpenPaneLength="256"
                 CompactPaneLength="48" DisplayMode="Inline" PanePlacement="Right">

                <SplitView.Pane>
                    <Border BorderThickness="1"
                            Background="{ThemeResource CardBackgroundFillColorDefaultBrush}"
                            BorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                            CornerRadius="5">

                        <ScrollViewer>

                            <controls:WrapPanel HorizontalSpacing="20" VerticalSpacing="20" Orientation="Vertical" Margin="10,0,10,0" HorizontalAlignment="Center">

                                <TextBlock Text="Sidebar" Style="{ThemeResource TitleTextBlockStyle}" HorizontalAlignment="Center" Margin="0,15,0,0" HorizontalTextAlignment="Center"/>

                                <TextBlock Text="Use the sidebar to select XML file paths and reuse them in different parts of the AppControl Manager." Style="{ThemeResource CaptionTextBlockStyle}" HorizontalAlignment="Center" HorizontalTextAlignment="Center"/>

                                <Border Translation="{x:Bind ViewModel.BorderTranslation, Mode=OneWay}" BorderThickness="1" CornerRadius="15" Shadow="{StaticResource SharedShadow}">

                                    <Border.BorderBrush>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                            <GradientStop Color="HotPink" Offset="0" />
                                            <GradientStop Color="Wheat" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.BorderBrush>

                                    <Grid Padding="20" HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <TextBlock Grid.Row="0" Grid.ColumnSpan="2" Margin="0,0,0,15" TextWrapping="Wrap" HorizontalAlignment="Center" Text="Unsigned Base Policy" Style="{ThemeResource BodyStrongTextBlockStyle}" />

                                        <TextBox Grid.Row="1" Grid.ColumnSpan="2" Margin="0,0,0,15" IsReadOnly="True"
                                        Text="{x:Bind ViewModel.SidebarBasePolicyPathTextBoxText, Mode=OneWay}" PlaceholderText="Base Policy Path" TextWrapping="Wrap"
                                        Width="150" />

                                        <Button Grid.Column="0" Margin="0,0,10,0" Grid.ColumnSpan="1" Grid.Row="2" ToolTipService.ToolTip="Browse for an XML policy file" Click="{x:Bind ViewModel.SidebarBasePolicyBrowseButton_Click}" Style="{ThemeResource AccentButtonStyle}">
                                            <Button.Content>
                                                <StackPanel Orientation="Horizontal">
                                                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
                                                        <FontIcon Glyph="&#xE8E5;" Margin="0,0,8,0" />
                                                        <TextBlock Text="Browse"/>
                                                    </StackPanel>
                                                </StackPanel>
                                            </Button.Content>
                                        </Button>

                                        <Button Grid.Column="1" Margin="10,0,0,0" Grid.ColumnSpan="1" Grid.Row="2" ToolTipService.ToolTip="Clear the selected XML file path text box" Click="{x:Bind ViewModel.SidebarBasePolicyClearButton_Click}" Style="{ThemeResource AccentButtonStyle}">
                                            <Button.Content>
                                                <StackPanel Orientation="Horizontal">
                                                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
                                                        <FontIcon Glyph="&#xE8E6;" Margin="0,0,8,0" />
                                                        <TextBlock Text="Clear"/>
                                                    </StackPanel>
                                                </StackPanel>
                                            </Button.Content>
                                        </Button>

                                        <Button Margin="0,15,0,0" Grid.ColumnSpan="2" Grid.Row="3" ToolTipService.ToolTip="Assign the selected XML policy file in the sidebar to the base policy path of the applicable section in the currently visible page" HorizontalAlignment="Center">
                                            <Button.Content>
                                                <controls:WrapPanel Orientation="Horizontal">

                                                    <AnimatedIcon x:Name="SidebarBasePolicySelectButtonLightAnimatedIcon" Height="20" Margin="0,0,5,0" Width="20" Visibility="Collapsed">
                                                        <AnimatedIcon.Source>
                                                            <animatedvisuals:Light/>
                                                        </AnimatedIcon.Source>
                                                    </AnimatedIcon>

                                                    <TextBlock Text="Select" />

                                                </controls:WrapPanel>
                                            </Button.Content>

                                            <Button.Flyout>
                                                <Flyout Placement="Bottom">
                                                    <StackPanel Orientation="Vertical" Spacing="10">
                                                        <Button x:Name="SidebarUnsignedBasePolicyConnect1" HorizontalAlignment="Stretch" Content="Select 1" Visibility="Collapsed" />
                                                        <Button x:Name="SidebarUnsignedBasePolicyConnect2" HorizontalAlignment="Stretch" Content="Select 2" Visibility="Collapsed" />
                                                        <Button x:Name="SidebarUnsignedBasePolicyConnect3" HorizontalAlignment="Stretch" Content="Select 3" Visibility="Collapsed" />
                                                        <Button x:Name="SidebarUnsignedBasePolicyConnect4" HorizontalAlignment="Stretch" Content="Select 4" Visibility="Collapsed" />
                                                        <Button x:Name="SidebarUnsignedBasePolicyConnect5" HorizontalAlignment="Stretch" Content="Select 5" Visibility="Collapsed" />
                                                    </StackPanel>
                                                </Flyout>
                                            </Button.Flyout>
                                        </Button>

                                    </Grid>

                                </Border>

                                <controls:SettingsCard HorizontalContentAlignment="Center"
                               Description="Automatically save the path to the base policies you create in the Sidebar." Click="{x:Bind ViewModel.AutomaticAssignmentSidebarSettingsCard_Click}"
                               Header="Automatic Assignment" HeaderIcon="{ui:FontIcon Glyph=&#xF32A;}" IsClickEnabled="True" IsActionIconVisible="False">
                                    <ToggleSwitch Toggled="{x:Bind ViewModel.AutomaticAssignmentSidebarToggleSwitch_Toggled}" IsOn="{x:Bind ViewModel.AutomaticAssignmentSidebarToggleSwitchToggledState, Mode=TwoWay}"/>
                                </controls:SettingsCard>

                                <HyperlinkButton HorizontalAlignment="Center" ToolTipService.ToolTip="Sidebar usage guide on GitHub wiki" Content="Sidebar Guide" NavigateUri="https://github.com/HotCakeX/Harden-Windows-Security/wiki/Sidebar" />

                                <Button HorizontalAlignment="Center" x:Uid="OpenConfigDirectoryButton"
                                        IsEnabled="{x:Bind ViewModel.OpenConfigDirectoryButtonState, Mode=OneWay}" Click="{x:Bind ViewModel.OpenConfigDirectoryButton_Click}">
                                    <Button.Content>
                                        <StackPanel Orientation="Horizontal">
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
                                                <FontIcon Glyph="&#xE8A7;" Margin="0,0,8,0" />
                                                <TextBlock x:Uid="OpenConfigDirectoryButtonText"/>
                                            </StackPanel>
                                        </StackPanel>
                                    </Button.Content>
                                </Button>

                            </controls:WrapPanel>

                        </ScrollViewer>

                    </Border>
                </SplitView.Pane>

                <!-- The area where the main window content are displayed -->
                <Grid>

                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <!-- BreadCrumBar that that also acts as a sticky header -->
                    <BreadcrumbBar VerticalAlignment="Top"
                        Grid.Row="0"
                        Padding="10"
                        Margin="20,10,0,10"
                        ItemsSource="{x:Bind Breadcrumbs}"
                        ItemClicked="BreadcrumbBar_ItemClicked">

                        <BreadcrumbBar.ItemTemplate>
                            <DataTemplate x:DataType="local:Crumb">
                                <TextBlock Text="{x:Bind Label}" TextWrapping="Wrap" Style="{StaticResource TitleTextBlockStyle}" />
                            </DataTemplate>
                        </BreadcrumbBar.ItemTemplate>

                    </BreadcrumbBar>

                    <!--  Note the use of a TwoWay binding here, this is required for this control to work.  -->
                    <controls:PropertySizer HorizontalAlignment="Left" Grid.Row="1"
                        Binding="{x:Bind MainNavigation.OpenPaneLength, Mode=TwoWay}"
                        Maximum="640"
                        Minimum="60"
                        Visibility="{x:Bind MainNavigation.IsPaneOpen, Mode=OneWay}" />

                    <!-- Global margin settings for every page's content -->
                    <Frame x:Name="ContentFrame" Margin="15,15,15,10" Grid.Row="1" />

                </Grid>
            </SplitView>

        </NavigationView>

    </Grid>
</Window>
