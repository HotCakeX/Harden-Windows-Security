//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.1.240821.1+077322fa26
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile Logout.json
//       
//       Input file:
//           Logout.json (164658 bytes created 13:25+03:00 Apr 3 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   122 |
// |--------------------------+-------|
// | Expression animators     |     5 |
// | KeyFrame animators       |    14 |
// | Reference parameters     |     6 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     1 |
// |--------------------------+-------|
// | ContainerVisuals         |     5 |
// | ShapeVisuals             |     7 |
// |--------------------------+-------|
// | ContainerShapes          |     2 |
// | CompositionSpriteShapes  |     9 |
// |--------------------------+-------|
// | Brushes                  |    11 |
// | Gradient stops           |     2 |
// | CompositionVisualSurface |     4 |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas;
using Microsoft.Graphics.Canvas.Effects;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        logout
    // Frame rate:  24 fps
    // Frame count: 28
    // Duration:    1166.7 mS
    // _____________________________________________________________________________________________
    // |           Marker           |           Constant           | Frame |   mS   |   Progress   |
    // |____________________________|______________________________|_______|________|______________|
    // | NormalToPressed_Start      | M_NormalToPressed_Start      |     0 |    0.0 | 0F           |
    // | NormalToPressed_End        | M_NormalToPressed_End        |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_Start | M_PointerOverToPressed_Start |     9 |  375.0 | 0.323214293F |
    // | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    19 |  791.7 | 0.680357158F |
    // | PressedToNormal_Start      | M_PressedToNormal_Start      |    20 |  833.3 | 0.716071427F |
    // | PressedToNormal_End        | M_PressedToNormal_End        |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    28 | 1166.7 | 1F           |
    // | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    28 | 1166.7 | 1F           |
    // ---------------------------------------------------------------------------------------------
    sealed partial class Logout
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 1.167 seconds.
        internal const long c_durationTicks = 11666666;

        // Marker: NormalToPressed_Start.
        internal const float M_NormalToPressed_Start = 0F;

        // Marker: NormalToPressed_End.
        internal const float M_NormalToPressed_End = 0.323214293F;

        // Marker: PointerOverToPressed_Start.
        internal const float M_PointerOverToPressed_Start = 0.323214293F;

        // Marker: PointerOverToPressed_End.
        internal const float M_PointerOverToPressed_End = 0.680357158F;

        // Marker: PressedToNormal_Start.
        internal const float M_PressedToNormal_Start = 0.716071427F;

        // Marker: PressedToNormal_End.
        internal const float M_PressedToNormal_End = 1F;

        // Marker: PressedToPointerOver_Start.
        internal const float M_PressedToPointerOver_Start = 1F;

        // Marker: PressedToPointerOver_End.
        internal const float M_PressedToPointerOver_End = 1F;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            var res = 
                new Logout_AnimatedVisual(
                    compositor
                    );
                res.CreateAnimations();
                return res;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 28d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 24d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(11666666);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 28d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPressed_Start", 0d },
                { "NormalToPressed_End", 0.323214285714286 },
                { "PointerOverToPressed_Start", 0.323214285714286 },
                { "PointerOverToPressed_End", 0.680357142857143 },
                { "PressedToNormal_Start", 0.716071428571429 },
                { "PressedToNormal_End", 1d },
                { "PressedToPointerOver_Start", 1d },
                { "PressedToPointerOver_End", 1d },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class Logout_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 11666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            CompositionColorBrush _colorBrush_AlmostTurquoise_FF50E6FF;
            CompositionColorBrush _colorBrush_SemiTransparentBlack;
            CompositionColorGradientStop _gradientStop_0_AlmostDodgerBlue_FF2AA3F4;
            CompositionColorGradientStop _gradientStop_1_AlmostDodgerBlue_FF0079D9;
            CompositionContainerShape _containerShape_0;
            CompositionContainerShape _containerShape_1;
            CompositionEffectFactory _effectFactory;
            CompositionPath _path;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            CompositionPathGeometry _pathGeometry_2;
            CompositionPathGeometry _pathGeometry_3;
            CompositionSpriteShape _spriteShape_0;
            CompositionSpriteShape _spriteShape_3;
            CompositionSpriteShape _spriteShape_4;
            CompositionSpriteShape _spriteShape_7;
            CompositionSpriteShape _spriteShape_8;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ShapeVisual _shapeVisual_6;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _offsetVector2Animation_0;
            Vector2KeyFrameAnimation _offsetVector2Animation_1;
            Vector2KeyFrameAnimation _scaleVector2Animation_0;
            Vector2KeyFrameAnimation _scaleVector2Animation_1;
            Vector2KeyFrameAnimation _scaleVector2Animation_2;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
            {
                var result = _c.CreateBooleanKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue);
                return result;
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // Shape tree root for layer: arrow 2
            BooleanKeyFrameAnimation IsVisibleBooleanAnimation()
            {
                // Frame 0.
                var result = CreateBooleanKeyFrameAnimation(0F, false);
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, true);
                return result;
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(13F, -20F));
                    builder.AddLine(new Vector2(-13F, -20F));
                    builder.AddCubicBezier(new Vector2(-14.1049995F, -20F), new Vector2(-15F, -19.1049995F), new Vector2(-15F, -18F));
                    builder.AddLine(new Vector2(-15F, 18F));
                    builder.AddCubicBezier(new Vector2(-15F, 19.1049995F), new Vector2(-14.1049995F, 20F), new Vector2(-13F, 20F));
                    builder.AddLine(new Vector2(13F, 20F));
                    builder.AddCubicBezier(new Vector2(14.1049995F, 20F), new Vector2(15F, 19.1049995F), new Vector2(15F, 18F));
                    builder.AddLine(new Vector2(15F, -18F));
                    builder.AddCubicBezier(new Vector2(15F, -19.1049995F), new Vector2(14.1049995F, -20F), new Vector2(13F, -20F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(13.2600002F, 0F));
                    builder.AddCubicBezier(new Vector2(13.2600002F, 0.920000017F), new Vector2(12.8999996F, 1.79999995F), new Vector2(12.2399998F, 2.48000002F));
                    builder.AddLine(new Vector2(5.53000021F, 9.18999958F));
                    builder.AddCubicBezier(new Vector2(4.98999977F, 9.71000004F), new Vector2(4.28999996F, 10F), new Vector2(3.54999995F, 10F));
                    builder.AddCubicBezier(new Vector2(3.19000006F, 10F), new Vector2(2.81999993F, 9.93000031F), new Vector2(2.48000002F, 9.77999973F));
                    builder.AddCubicBezier(new Vector2(1.41999996F, 9.35000038F), new Vector2(0.74000001F, 8.32999992F), new Vector2(0.74000001F, 7.19000006F));
                    builder.AddLine(new Vector2(0.74000001F, 5F));
                    builder.AddLine(new Vector2(-10.2600002F, 5F));
                    builder.AddCubicBezier(new Vector2(-11.9099998F, 5F), new Vector2(-13.2600002F, 3.6500001F), new Vector2(-13.2600002F, 2F));
                    builder.AddLine(new Vector2(-13.2600002F, -2F));
                    builder.AddCubicBezier(new Vector2(-13.2600002F, -3.6500001F), new Vector2(-11.9099998F, -5F), new Vector2(-10.2600002F, -5F));
                    builder.AddLine(new Vector2(0.74000001F, -5F));
                    builder.AddLine(new Vector2(0.74000001F, -7.19000006F));
                    builder.AddCubicBezier(new Vector2(0.74000001F, -8.32999992F), new Vector2(1.41999996F, -9.35000038F), new Vector2(2.48000002F, -9.77999973F));
                    builder.AddCubicBezier(new Vector2(2.81999993F, -9.93000031F), new Vector2(3.19000006F, -10F), new Vector2(3.55999994F, -10F));
                    builder.AddCubicBezier(new Vector2(4.30000019F, -10F), new Vector2(5.01000023F, -9.71000004F), new Vector2(5.53999996F, -9.18000031F));
                    builder.AddLine(new Vector2(12.2399998F, -2.48000002F));
                    builder.AddCubicBezier(new Vector2(12.8999996F, -1.82000005F), new Vector2(13.2600002F, -0.939999998F), new Vector2(13.2600002F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(12.2600002F, -0.00100000005F));
                    builder.AddCubicBezier(new Vector2(12.2600002F, 0.66900003F), new Vector2(12F, 1.28900003F), new Vector2(11.5299997F, 1.76900005F));
                    builder.AddLine(new Vector2(4.82999992F, 8.46899986F));
                    builder.AddCubicBezier(new Vector2(4.48000002F, 8.80900002F), new Vector2(4.01999998F, 8.9989996F), new Vector2(3.54999995F, 8.9989996F));
                    builder.AddCubicBezier(new Vector2(3.31999993F, 8.9989996F), new Vector2(3.07999992F, 8.94900036F), new Vector2(2.8599999F, 8.85900021F));
                    builder.AddCubicBezier(new Vector2(2.18000007F, 8.57900047F), new Vector2(1.74000001F, 7.91900015F), new Vector2(1.74000001F, 7.18900013F));
                    builder.AddLine(new Vector2(1.74000001F, 3.99900007F));
                    builder.AddLine(new Vector2(-10.2600002F, 3.99900007F));
                    builder.AddCubicBezier(new Vector2(-11.3599997F, 3.99900007F), new Vector2(-12.2600002F, 3.09899998F), new Vector2(-12.2600002F, 1.99899995F));
                    builder.AddLine(new Vector2(-12.2600002F, -2.00099993F));
                    builder.AddCubicBezier(new Vector2(-12.2600002F, -3.10100007F), new Vector2(-11.3599997F, -4.00099993F), new Vector2(-10.2600002F, -4.00099993F));
                    builder.AddLine(new Vector2(1.74000001F, -4.00099993F));
                    builder.AddLine(new Vector2(1.74000001F, -7.19099998F));
                    builder.AddCubicBezier(new Vector2(1.74000001F, -7.921F), new Vector2(2.18000007F, -8.58100033F), new Vector2(2.8599999F, -8.86100006F));
                    builder.AddCubicBezier(new Vector2(3.53999996F, -9.14099979F), new Vector2(4.30999994F, -8.99100018F), new Vector2(4.82999992F, -8.47099972F));
                    builder.AddLine(new Vector2(11.5299997F, -1.77100003F));
                    builder.AddCubicBezier(new Vector2(12F, -1.301F), new Vector2(12.2600002F, -0.671000004F), new Vector2(12.2600002F, -0.00100000005F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(2.74000001F, -7.19000006F));
                    builder.AddCubicBezier(new Vector2(2.74000001F, -7.19000006F), new Vector2(2.74000001F, -3F), new Vector2(2.74000001F, -3F));
                    builder.AddCubicBezier(new Vector2(2.74000001F, -3F), new Vector2(-10.2600002F, -3F), new Vector2(-10.2600002F, -3F));
                    builder.AddCubicBezier(new Vector2(-10.8120003F, -3F), new Vector2(-11.2600002F, -2.55200005F), new Vector2(-11.2600002F, -2F));
                    builder.AddCubicBezier(new Vector2(-11.2600002F, -2F), new Vector2(-11.2600002F, 2F), new Vector2(-11.2600002F, 2F));
                    builder.AddCubicBezier(new Vector2(-11.2600002F, 2.55200005F), new Vector2(-10.8120003F, 3F), new Vector2(-10.2600002F, 3F));
                    builder.AddCubicBezier(new Vector2(-10.2600002F, 3F), new Vector2(2.74000001F, 3F), new Vector2(2.74000001F, 3F));
                    builder.AddCubicBezier(new Vector2(2.74000001F, 3F), new Vector2(2.74000001F, 7.19000006F), new Vector2(2.74000001F, 7.19000006F));
                    builder.AddCubicBezier(new Vector2(2.74000001F, 7.90999985F), new Vector2(3.6099999F, 8.27000046F), new Vector2(4.11899996F, 7.76100016F));
                    builder.AddCubicBezier(new Vector2(4.11899996F, 7.76100016F), new Vector2(10.8199997F, 1.05999994F), new Vector2(10.8199997F, 1.05999994F));
                    builder.AddCubicBezier(new Vector2(11.4060001F, 0.474000007F), new Vector2(11.4060001F, -0.476000011F), new Vector2(10.8199997F, -1.06099999F));
                    builder.AddCubicBezier(new Vector2(10.8199997F, -1.06099999F), new Vector2(4.11899996F, -7.76200008F), new Vector2(4.11899996F, -7.76200008F));
                    builder.AddCubicBezier(new Vector2(3.6099999F, -8.27099991F), new Vector2(2.74000001F, -7.90999985F), new Vector2(2.74000001F, -7.19000006F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: arrow
            // - - - ShapeGroup: Group 1
            // - Path
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.65999985F, -7.19899988F));
                    builder.AddCubicBezier(new Vector2(-5.65999985F, -7.19899988F), new Vector2(-5.65999985F, -3.00900006F), new Vector2(-5.65999985F, -3.00900006F));
                    builder.AddCubicBezier(new Vector2(-5.65999985F, -3.00900006F), new Vector2(-10.2600002F, -3F), new Vector2(-10.2600002F, -3F));
                    builder.AddCubicBezier(new Vector2(-10.8120003F, -3F), new Vector2(-11.2600002F, -2.55200005F), new Vector2(-11.2600002F, -2F));
                    builder.AddCubicBezier(new Vector2(-11.2600002F, -2F), new Vector2(-11.2600002F, 2F), new Vector2(-11.2600002F, 2F));
                    builder.AddCubicBezier(new Vector2(-11.2600002F, 2.55200005F), new Vector2(-10.8120003F, 3F), new Vector2(-10.2600002F, 3F));
                    builder.AddCubicBezier(new Vector2(-10.2600002F, 3F), new Vector2(-5.65999985F, 2.99099994F), new Vector2(-5.65999985F, 2.99099994F));
                    builder.AddCubicBezier(new Vector2(-5.65999985F, 2.99099994F), new Vector2(-5.65999985F, 7.18100023F), new Vector2(-5.65999985F, 7.18100023F));
                    builder.AddCubicBezier(new Vector2(-5.65999985F, 7.90100002F), new Vector2(-4.78999996F, 8.26099968F), new Vector2(-4.28100014F, 7.75199986F));
                    builder.AddCubicBezier(new Vector2(-4.28100014F, 7.75199986F), new Vector2(2.42000008F, 1.051F), new Vector2(2.42000008F, 1.051F));
                    builder.AddCubicBezier(new Vector2(3.00600004F, 0.465000004F), new Vector2(3.00600004F, -0.485000014F), new Vector2(2.42000008F, -1.07000005F));
                    builder.AddCubicBezier(new Vector2(2.42000008F, -1.07000005F), new Vector2(-4.28100014F, -7.77099991F), new Vector2(-4.28100014F, -7.77099991F));
                    builder.AddCubicBezier(new Vector2(-4.78999996F, -8.27999973F), new Vector2(-5.65999985F, -7.91900015F), new Vector2(-5.65999985F, -7.19899988F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer: arrow 2
            // - - ShapeGroup: Group 1
            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(2.74000001F, -7.19000006F));
                    builder.AddLine(new Vector2(2.74000001F, -3F));
                    builder.AddLine(new Vector2(-10.2600002F, -3F));
                    builder.AddCubicBezier(new Vector2(-10.8120003F, -3F), new Vector2(-11.2600002F, -2.55200005F), new Vector2(-11.2600002F, -2F));
                    builder.AddLine(new Vector2(-11.2600002F, 2F));
                    builder.AddCubicBezier(new Vector2(-11.2600002F, 2.55200005F), new Vector2(-10.8120003F, 3F), new Vector2(-10.2600002F, 3F));
                    builder.AddLine(new Vector2(2.74000001F, 3F));
                    builder.AddLine(new Vector2(2.74000001F, 7.19000006F));
                    builder.AddCubicBezier(new Vector2(2.74000001F, 7.90999985F), new Vector2(3.6099999F, 8.27000046F), new Vector2(4.11899996F, 7.76100016F));
                    builder.AddLine(new Vector2(10.8199997F, 1.05999994F));
                    builder.AddCubicBezier(new Vector2(11.4060001F, 0.474000007F), new Vector2(11.4060001F, -0.476000011F), new Vector2(10.8199997F, -1.06099999F));
                    builder.AddLine(new Vector2(4.11899996F, -7.76200008F));
                    builder.AddCubicBezier(new Vector2(3.6099999F, -8.27099991F), new Vector2(2.74000001F, -7.90999985F), new Vector2(2.74000001F, -7.19000006F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostTurquoise_FF50E6FF()
            {
                return (_colorBrush_AlmostTurquoise_FF50E6FF == null)
                    ? _colorBrush_AlmostTurquoise_FF50E6FF = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x50, 0xE6, 0xFF))
                    : _colorBrush_AlmostTurquoise_FF50E6FF;
            }

            CompositionColorBrush ColorBrush_SemiTransparentBlack()
            {
                return (_colorBrush_SemiTransparentBlack == null)
                    ? _colorBrush_SemiTransparentBlack = _c.CreateColorBrush(Color.FromArgb(0x11, 0x00, 0x00, 0x00))
                    : _colorBrush_SemiTransparentBlack;
            }

            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostDodgerBlue_FF2AA3F4()
            {
                return (_gradientStop_0_AlmostDodgerBlue_FF2AA3F4 == null)
                    ? _gradientStop_0_AlmostDodgerBlue_FF2AA3F4 = _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0x2A, 0xA3, 0xF4))
                    : _gradientStop_0_AlmostDodgerBlue_FF2AA3F4;
            }

            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostDodgerBlue_FF0079D9()
            {
                return (_gradientStop_1_AlmostDodgerBlue_FF0079D9 == null)
                    ? _gradientStop_1_AlmostDodgerBlue_FF0079D9 = _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0x00, 0x79, 0xD9))
                    : _gradientStop_1_AlmostDodgerBlue_FF0079D9;
            }

            // Shape tree root for layer: shadow
            CompositionContainerShape ContainerShape_0()
            {
                if (_containerShape_0 != null) { return _containerShape_0; }
                var result = _containerShape_0 = _c.CreateContainerShape();
                var shapes = result.Shapes;
                // Transforms: shadow Scale:0.025,0.025, Offset:<-1290.4, -960>
                shapes.Add(SpriteShape_1());
                // Transforms: shadow Scale:0.025,0.025, Offset:<-1290.4, -960>
                shapes.Add(SpriteShape_2());
                return result;
            }

            // Shape tree root for layer: shadow 2
            CompositionContainerShape ContainerShape_1()
            {
                if (_containerShape_1 != null) { return _containerShape_1; }
                var result = _containerShape_1 = _c.CreateContainerShape();
                var shapes = result.Shapes;
                // Transforms: shadow 2 Scale:0.025,0.025, Offset:<-1290.4, -960>
                shapes.Add(SpriteShape_5());
                // Transforms: shadow 2 Scale:0.025,0.025, Offset:<-1290.4, -960>
                shapes.Add(SpriteShape_6());
                return result;
            }

            CompositionEffectBrush EffectBrush_0()
            {
                var effectFactory = EffectFactory();
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            CompositionEffectBrush EffectBrush_1()
            {
                var effectFactory = EffectFactory();
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_2());
                result.SetSourceParameter("source", SurfaceBrush_3());
                return result;
            }

            CompositionEffectFactory EffectFactory()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationIn;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                if (_effectFactory != null) { return _effectFactory; }
                var result = _effectFactory = _c.CreateEffectFactory(compositeEffect);
                return result;
            }

            // - Shape tree root for layer: back
            // ShapeGroup: Group 1
            CompositionLinearGradientBrush LinearGradientBrush_0()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostDodgerBlue_FF2AA3F4());
                colorStops.Add(GradientStop_1_AlmostDodgerBlue_FF0079D9());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(-14F, -20F);
                result.EndPoint = new Vector2(12.6739998F, -56.9129982F);
                return result;
            }

            // - Shape tree root for layer: mask-1
            // Transforms: mask-1
            CompositionLinearGradientBrush LinearGradientBrush_1()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostDodgerBlue_FF2AA3F4());
                colorStops.Add(GradientStop_1_AlmostDodgerBlue_FF0079D9());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(-14F, -20F);
                result.EndPoint = new Vector2(12.6739998F, -56.9129982F);
                return result;
            }

            // - Shape tree root for layer: mask-2
            // Transforms: mask-2
            CompositionLinearGradientBrush LinearGradientBrush_2()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostDodgerBlue_FF2AA3F4());
                colorStops.Add(GradientStop_1_AlmostDodgerBlue_FF0079D9());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(-14F, -20F);
                result.EndPoint = new Vector2(12.6739998F, -56.9129982F);
                return result;
            }

            CompositionPath Path()
            {
                if (_path != null) { return _path; }
                var result = _path = new CompositionPath(Geometry_3());
                return result;
            }

            CompositionPathGeometry PathGeometry_0()
            {
                return (_pathGeometry_0 == null)
                    ? _pathGeometry_0 = _c.CreatePathGeometry(new CompositionPath(Geometry_0()))
                    : _pathGeometry_0;
            }

            CompositionPathGeometry PathGeometry_1()
            {
                return (_pathGeometry_1 == null)
                    ? _pathGeometry_1 = _c.CreatePathGeometry(new CompositionPath(Geometry_1()))
                    : _pathGeometry_1;
            }

            CompositionPathGeometry PathGeometry_2()
            {
                return (_pathGeometry_2 == null)
                    ? _pathGeometry_2 = _c.CreatePathGeometry(new CompositionPath(Geometry_2()))
                    : _pathGeometry_2;
            }

            // - Shape tree root for layer: arrow
            // ShapeGroup: Group 1
            CompositionPathGeometry PathGeometry_3()
            {
                if (_pathGeometry_3 != null) { return _pathGeometry_3; }
                var result = _pathGeometry_3 = _c.CreatePathGeometry();
                return result;
            }

            // - Shape tree root for layer: arrow 2
            // ShapeGroup: Group 1
            CompositionPathGeometry PathGeometry_4()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_5()));
            }

            // Shape tree root for layer: back
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                if (_spriteShape_0 != null) { return _spriteShape_0; }
                var result = _spriteShape_0 = _c.CreateSpriteShape(PathGeometry_0());
                result.Offset = new Vector2(24F, 24F);
                result.FillBrush = LinearGradientBrush_0();
                return result;
            }

            // - Shape tree root for layer: shadow
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<-7.6293945E-06, 0>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, -7.62939453E-06F, 0F), ColorBrush_SemiTransparentBlack());;
                return result;
            }

            // - Shape tree root for layer: shadow
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<-7.6293945E-06, 0.0005493164>
                var geometry = PathGeometry_2();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, -7.62939453E-06F, 0.000549316406F), ColorBrush_SemiTransparentBlack());;
                return result;
            }

            // Shape tree root for layer: mask-1
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                if (_spriteShape_3 != null) { return _spriteShape_3; }
                var result = _spriteShape_3 = _c.CreateSpriteShape(PathGeometry_0());
                result.Offset = new Vector2(24F, 24F);
                result.FillBrush = LinearGradientBrush_1();
                return result;
            }

            // Shape tree root for layer: arrow
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                if (_spriteShape_4 != null) { return _spriteShape_4; }
                var result = _spriteShape_4 = _c.CreateSpriteShape(PathGeometry_3());
                result.FillBrush = ColorBrush_AlmostTurquoise_FF50E6FF();
                return result;
            }

            // - Shape tree root for layer: shadow 2
            // Path 1
            CompositionSpriteShape SpriteShape_5()
            {
                // Offset:<-7.6293945E-06, 0>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, -7.62939453E-06F, 0F), ColorBrush_SemiTransparentBlack());;
                return result;
            }

            // - Shape tree root for layer: shadow 2
            // Path 1
            CompositionSpriteShape SpriteShape_6()
            {
                // Offset:<-7.6293945E-06, 0.0005493164>
                var geometry = PathGeometry_2();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, -7.62939453E-06F, 0.000549316406F), ColorBrush_SemiTransparentBlack());;
                return result;
            }

            // Shape tree root for layer: mask-2
            // Path 1
            CompositionSpriteShape SpriteShape_7()
            {
                if (_spriteShape_7 != null) { return _spriteShape_7; }
                var result = _spriteShape_7 = _c.CreateSpriteShape(PathGeometry_0());
                result.Offset = new Vector2(24F, 24F);
                result.FillBrush = LinearGradientBrush_2();
                return result;
            }

            // Shape tree root for layer: arrow 2
            // Path 1
            CompositionSpriteShape SpriteShape_8()
            {
                if (_spriteShape_8 != null) { return _spriteShape_8; }
                var result = _spriteShape_8 = _c.CreateSpriteShape(PathGeometry_4());
                result.FillBrush = ColorBrush_AlmostTurquoise_FF50E6FF();
                return result;
            }

            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            CompositionSurfaceBrush SurfaceBrush_2()
            {
                return _c.CreateSurfaceBrush(VisualSurface_2());
            }

            CompositionSurfaceBrush SurfaceBrush_3()
            {
                return _c.CreateSurfaceBrush(VisualSurface_3());
            }

            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_1();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            CompositionVisualSurface VisualSurface_2()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_2();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            CompositionVisualSurface VisualSurface_3()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_3();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: shadow
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: mask-1
                result.Children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            ContainerVisual ContainerVisual_2()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: shadow 2
                result.Children.InsertAtTop(ShapeVisual_4());
                return result;
            }

            ContainerVisual ContainerVisual_3()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: mask-2
                result.Children.InsertAtTop(ShapeVisual_5());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                propertySet.InsertScalar("t0", 0F);
                var children = result.Children;
                // Shape tree root for layer: back
                children.InsertAtTop(ShapeVisual_0());
                children.InsertAtTop(SpriteVisual_0());
                // Shape tree root for layer: arrow
                children.InsertAtTop(ShapeVisual_3());
                children.InsertAtTop(SpriteVisual_1());
                // Shape tree root for layer: arrow 2
                children.InsertAtTop(ShapeVisual_6());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            // - - Shape tree root for layer: arrow
            // - ShapeGroup: Group 1
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path(), StepThenHoldEasingFunction());
                // Frame 5.
                result.InsertKeyFrame(0.178571433F, Path(), HoldThenStepEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.357142866F, new CompositionPath(Geometry_4()), CubicBezierEasingFunction_0());
                return result;
            }

            ScalarKeyFrameAnimation t0ScalarAnimation_0_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 5.
                result.InsertKeyFrame(0.178571418F, 1F, CubicBezierEasingFunction_0());
                // Frame 15.
                result.InsertKeyFrame(0.535714328F, 0F, StepThenHoldEasingFunction());
                // Frame 17.
                result.InsertKeyFrame(0.607142806F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // Shape tree root for layer: back
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                // ShapeGroup: Group 1
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // Shape tree root for layer: shadow
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                result.Shapes.Add(ContainerShape_0());
                return result;
            }

            // Shape tree root for layer: mask-1
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                // Transforms: mask-1
                result.Shapes.Add(SpriteShape_3());
                return result;
            }

            // Shape tree root for layer: arrow
            ShapeVisual ShapeVisual_3()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                // ShapeGroup: Group 1
                result.Shapes.Add(SpriteShape_4());
                return result;
            }

            // Shape tree root for layer: shadow 2
            ShapeVisual ShapeVisual_4()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                result.Shapes.Add(ContainerShape_1());
                return result;
            }

            // Shape tree root for layer: mask-2
            ShapeVisual ShapeVisual_5()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                // Transforms: mask-2
                result.Shapes.Add(SpriteShape_7());
                return result;
            }

            // Shape tree root for layer: arrow 2
            ShapeVisual ShapeVisual_6()
            {
                if (_shapeVisual_6 != null) { return _shapeVisual_6; }
                var result = _shapeVisual_6 = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(48F, 48F);
                // ShapeGroup: Group 1
                result.Shapes.Add(SpriteShape_8());
                return result;
            }

            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(48F, 48F);
                result.Brush = EffectBrush_0();
                return result;
            }

            SpriteVisual SpriteVisual_1()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(48F, 48F);
                result.Brush = EffectBrush_1();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                if (_offsetVector2Animation_0 != null) { return _offsetVector2Animation_0; }
                var result = _offsetVector2Animation_0 = CreateVector2KeyFrameAnimation(0F, new Vector2(32.2599983F, 24F), HoldThenStepEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 5.
                result.InsertExpressionKeyFrame(0.178571418F, "Pow(1-_.t0,3)*Vector2(32.26,24)+(3*Square(1-_.t0)*_.t0*Vector2(32.093,24))+(3*(1-_.t0)*Square(_.t0)*Vector2(29.177,24))+(Pow(_.t0,3)*Vector2(31.26,24))", StepThenHoldEasingFunction());
                // Frame 5.
                result.InsertKeyFrame(0.178571433F, new Vector2(31.2600002F, 24F), StepThenHoldEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.357142866F, new Vector2(44.7599983F, 24F), CubicBezierEasingFunction_0());
                return result;
            }

            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                if (_offsetVector2Animation_1 != null) { return _offsetVector2Animation_1; }
                var result = _offsetVector2Animation_1 = CreateVector2KeyFrameAnimation(0F, new Vector2(8.51000023F, 24F), StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, new Vector2(8.51000023F, 24F), HoldThenStepEasingFunction());
                // Frame 17.
                result.InsertExpressionKeyFrame(0.607142806F, "Pow(1-_.t0,3)*Vector2(8.51,24)+(3*Square(1-_.t0)*_.t0*Vector2(9.035,24))+(3*(1-_.t0)*Square(_.t0)*Vector2(5.219,24))+(Pow(_.t0,3)*Vector2(6.51,24))", StepThenHoldEasingFunction());
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, new Vector2(6.51000023F, 24F), StepThenHoldEasingFunction());
                // Frame 24.
                result.InsertKeyFrame(0.857142866F, new Vector2(32.2599983F, 24F), CubicBezierEasingFunction_0());
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                if (_scaleVector2Animation_0 != null) { return _scaleVector2Animation_0; }
                var result = _scaleVector2Animation_0 = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 5.
                result.InsertKeyFrame(0.178571433F, new Vector2(0.899999976F, 0.899999976F), CubicBezierEasingFunction_0());
                // Frame 10.
                result.InsertKeyFrame(0.357142866F, new Vector2(1.04999995F, 1.04999995F), CubicBezierEasingFunction_0());
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, new Vector2(1F, 1F), CubicBezierEasingFunction_0());
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                if (_scaleVector2Animation_1 != null) { return _scaleVector2Animation_1; }
                var result = _scaleVector2Animation_1 = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.357142866F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, new Vector2(0F, 0F), CubicBezierEasingFunction_0());
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_2()
            {
                // Frame 0.
                if (_scaleVector2Animation_2 != null) { return _scaleVector2Animation_2; }
                var result = _scaleVector2Animation_2 = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), StepThenHoldEasingFunction());
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.714285731F, new Vector2(1F, 1F), CubicBezierEasingFunction_0());
                return result;
            }

            internal Logout_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(48F, 48F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_0.StartAnimation("Scale", ScaleVector2Animation_1(), AnimationController_0());
                _containerShape_0.StartAnimation("Offset", OffsetVector2Animation_0(), AnimationController_0());
                _containerShape_1.StartAnimation("Scale", ScaleVector2Animation_2(), AnimationController_0());
                _containerShape_1.StartAnimation("Offset", OffsetVector2Animation_1(), AnimationController_0());
                _pathGeometry_3.StartAnimation("Path", PathKeyFrameAnimation_0(), AnimationController_0());
                _spriteShape_0.StartAnimation("Scale", ScaleVector2Animation_0(), AnimationController_0());
                _spriteShape_3.StartAnimation("Scale", ScaleVector2Animation_0(), AnimationController_0());
                _spriteShape_4.StartAnimation("Scale", ScaleVector2Animation_1(), AnimationController_0());
                _spriteShape_4.StartAnimation("Offset", OffsetVector2Animation_0(), AnimationController_0());
                _spriteShape_7.StartAnimation("Scale", ScaleVector2Animation_0(), AnimationController_0());
                _spriteShape_8.StartAnimation("Scale", ScaleVector2Animation_2(), AnimationController_0());
                _spriteShape_8.StartAnimation("Offset", OffsetVector2Animation_1(), AnimationController_0());
                _root.Properties.StartAnimation("t0", t0ScalarAnimation_0_to_1(), AnimationController_0());
                _shapeVisual_6.StartAnimation("IsVisible", IsVisibleBooleanAnimation(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _containerShape_0.StopAnimation("Scale");
                _containerShape_0.StopAnimation("Offset");
                _containerShape_1.StopAnimation("Scale");
                _containerShape_1.StopAnimation("Offset");
                _pathGeometry_3.StopAnimation("Path");
                _spriteShape_0.StopAnimation("Scale");
                _spriteShape_3.StopAnimation("Scale");
                _spriteShape_4.StopAnimation("Scale");
                _spriteShape_4.StopAnimation("Offset");
                _spriteShape_7.StopAnimation("Scale");
                _spriteShape_8.StopAnimation("Scale");
                _spriteShape_8.StopAnimation("Offset");
                _root.Properties.StopAnimation("t0");
                _shapeVisual_6.StopAnimation("IsVisible");
            }

        }
    }
}
