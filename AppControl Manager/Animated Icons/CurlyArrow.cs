//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.1.240821.1+077322fa26
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile CurlyArrow.json
//       
//       Input file:
//           CurlyArrow.json (43979 bytes created 8:43+02:00 Mar 11 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    50 |
// |--------------------------+-------|
// | Expression animators     |     1 |
// | KeyFrame animators       |    10 |
// | Reference parameters     |     1 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |     4 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
	// Name:        curly-arrow
	// Frame rate:  24 fps
	// Frame count: 28
	// Duration:    1166.7 mS
	// _____________________________________________________________________________________________
	// |           Marker           |           Constant           | Frame |   mS   |   Progress   |
	// |____________________________|______________________________|_______|________|______________|
	// | NormalToPressed_Start      | M_NormalToPressed_Start      |     0 |    0.0 | 0F           |
	// | NormalToPressed_End        | M_NormalToPressed_End        |     9 |  375.0 | 0.323214293F |
	// | PointerOverToPressed_Start | M_PointerOverToPressed_Start |     9 |  375.0 | 0.323214293F |
	// | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    19 |  791.7 | 0.680357158F |
	// | PressedToNormal_Start      | M_PressedToNormal_Start      |    20 |  833.3 | 0.716071427F |
	// | PressedToNormal_End        | M_PressedToNormal_End        |    28 | 1166.7 | 1F           |
	// | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    28 | 1166.7 | 1F           |
	// | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    28 | 1166.7 | 1F           |
	// ---------------------------------------------------------------------------------------------
	sealed partial class CurlyArrow
		: Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
		, Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
	{
		// Animation duration: 1.167 seconds.
		internal const long c_durationTicks = 11666666;

		// Marker: NormalToPressed_Start.
		internal const float M_NormalToPressed_Start = 0F;

		// Marker: NormalToPressed_End.
		internal const float M_NormalToPressed_End = 0.323214293F;

		// Marker: PointerOverToPressed_Start.
		internal const float M_PointerOverToPressed_Start = 0.323214293F;

		// Marker: PointerOverToPressed_End.
		internal const float M_PointerOverToPressed_End = 0.680357158F;

		// Marker: PressedToNormal_Start.
		internal const float M_PressedToNormal_Start = 0.716071427F;

		// Marker: PressedToNormal_End.
		internal const float M_PressedToNormal_End = 1F;

		// Marker: PressedToPointerOver_Start.
		internal const float M_PressedToPointerOver_Start = 1F;

		// Marker: PressedToPointerOver_End.
		internal const float M_PressedToPointerOver_End = 1F;

		public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
		{
			object ignored = null;
			return TryCreateAnimatedVisual(compositor, out ignored);
		}

		public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
		{
			diagnostics = null;

			var res =
				new CurlyArrow_AnimatedVisual(
					compositor
					);
			res.CreateAnimations();
			return res;
		}

		/// <summary>
		/// Gets the number of frames in the animation.
		/// </summary>
		public double FrameCount => 28d;

		/// <summary>
		/// Gets the frame rate of the animation.
		/// </summary>
		public double Framerate => 24d;

		/// <summary>
		/// Gets the duration of the animation.
		/// </summary>
		public TimeSpan Duration => TimeSpan.FromTicks(11666666);

		/// <summary>
		/// Converts a zero-based frame number to the corresponding progress value denoting the
		/// start of the frame.
		/// </summary>
		public double FrameToProgress(double frameNumber)
		{
			return frameNumber / 28d;
		}

		/// <summary>
		/// Returns a map from marker names to corresponding progress values.
		/// </summary>
		public IReadOnlyDictionary<string, double> Markers =>
			new Dictionary<string, double>
			{
				{ "NormalToPressed_Start", 0d },
				{ "NormalToPressed_End", 0.323214285714286 },
				{ "PointerOverToPressed_Start", 0.323214285714286 },
				{ "PointerOverToPressed_End", 0.680357142857143 },
				{ "PressedToNormal_Start", 0.716071428571429 },
				{ "PressedToNormal_End", 1d },
				{ "PressedToPointerOver_Start", 1d },
				{ "PressedToPointerOver_End", 1d },
			};

		/// <summary>
		/// Sets the color property with the given name, or does nothing if no such property
		/// exists.
		/// </summary>
		public void SetColorProperty(string propertyName, Color value)
		{
		}

		/// <summary>
		/// Sets the scalar property with the given name, or does nothing if no such property
		/// exists.
		/// </summary>
		public void SetScalarProperty(string propertyName, double value)
		{
		}

		sealed partial class CurlyArrow_AnimatedVisual
			: Microsoft.UI.Xaml.Controls.IAnimatedVisual
			, Microsoft.UI.Xaml.Controls.IAnimatedVisual2
		{
			const long c_durationTicks = 11666666;
			readonly Compositor _c;
			readonly ExpressionAnimation _reusableExpressionAnimation;
			AnimationController _animationController_0;
			CompositionColorBrush _colorBrush_AlmostLightSeaGreen_FF02ABC0;
			CompositionPath _path_0;
			CompositionPath _path_1;
			CompositionPathGeometry _pathGeometry_0;
			CompositionPathGeometry _pathGeometry_1;
			CompositionPathGeometry _pathGeometry_2;
			CompositionPathGeometry _pathGeometry_3;
			CompositionSpriteShape _spriteShape_0;
			CompositionSpriteShape _spriteShape_1;
			CompositionSpriteShape _spriteShape_2;
			CompositionSpriteShape _spriteShape_3;
			ContainerVisual _root;
			CubicBezierEasingFunction _cubicBezierEasingFunction_0;
			StepEasingFunction _holdThenStepEasingFunction;
			StepEasingFunction _stepThenHoldEasingFunction;
			Vector2KeyFrameAnimation _shapeVisibilityAnimation_0;

			void BindProperty(
				CompositionObject target,
				string animatedPropertyName,
				string expression,
				string referenceParameterName,
				CompositionObject referencedObject)
			{
				_reusableExpressionAnimation.ClearAllParameters();
				_reusableExpressionAnimation.Expression = expression;
				_reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
				target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
			}

			ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
			{
				var result = _c.CreateScalarKeyFrameAnimation();
				result.Duration = TimeSpan.FromTicks(c_durationTicks);
				result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
				return result;
			}

			Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
			{
				var result = _c.CreateVector2KeyFrameAnimation();
				result.Duration = TimeSpan.FromTicks(c_durationTicks);
				result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
				return result;
			}

			CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
			{
				var result = _c.CreateSpriteShape(geometry);
				result.TransformMatrix = transformMatrix;
				return result;
			}

			AnimationController AnimationController_0()
			{
				if (_animationController_0 != null) { return _animationController_0; }
				var result = _animationController_0 = _c.CreateAnimationController();
				result.Pause();
				BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
				return result;
			}

			CanvasGeometry Geometry_0()
			{
				CanvasGeometry result;
				using (var builder = new CanvasPathBuilder(null))
				{
					builder.BeginFigure(new Vector2(-5.5F, 5.5F));
					builder.AddLine(new Vector2(-5.5F, -5.5F));
					builder.AddLine(new Vector2(5.5F, -5.5F));
					builder.EndFigure(CanvasFigureLoop.Open);
					result = CanvasGeometry.CreatePath(builder);
				}
				return result;
			}

			CanvasGeometry Geometry_1()
			{
				CanvasGeometry result;
				using (var builder = new CanvasPathBuilder(null))
				{
					builder.BeginFigure(new Vector2(-16.5F, -15F));
					builder.AddCubicBezier(new Vector2(-10.7370005F, -8.85400009F), new Vector2(-3.5F, 0F), new Vector2(3.5F, 0F));
					builder.AddCubicBezier(new Vector2(12.0050001F, 0F), new Vector2(16.5F, -6.10200024F), new Vector2(16.5F, -9.74800014F));
					builder.AddCubicBezier(new Vector2(16.5F, -13.0679998F), new Vector2(14.5129995F, -16F), new Vector2(10.507F, -16F));
					builder.AddCubicBezier(new Vector2(4.01999998F, -16F), new Vector2(-1.48000002F, -8.22500038F), new Vector2(-1.15400004F, -1.19200003F));
					builder.AddCubicBezier(new Vector2(-0.731000006F, 8.96700001F), new Vector2(7.09600019F, 16F), new Vector2(15.5F, 16F));
					builder.EndFigure(CanvasFigureLoop.Open);
					result = CanvasGeometry.CreatePath(builder);
				}
				return result;
			}

			CompositionColorBrush ColorBrush_AlmostLightSeaGreen_FF02ABC0()
			{
				return (_colorBrush_AlmostLightSeaGreen_FF02ABC0 == null)
					? _colorBrush_AlmostLightSeaGreen_FF02ABC0 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x02, 0xAB, 0xC0))
					: _colorBrush_AlmostLightSeaGreen_FF02ABC0;
			}

			CompositionPath Path_0()
			{
				if (_path_0 != null) { return _path_0; }
				var result = _path_0 = new CompositionPath(Geometry_0());
				return result;
			}

			CompositionPath Path_1()
			{
				if (_path_1 != null) { return _path_1; }
				var result = _path_1 = new CompositionPath(Geometry_1());
				return result;
			}

			// - Layer aggregator
			// Layer: Arrowhead
			CompositionPathGeometry PathGeometry_0()
			{
				if (_pathGeometry_0 != null) { return _pathGeometry_0; }
				var result = _pathGeometry_0 = _c.CreatePathGeometry(Path_0());
				return result;
			}

			// - Layer aggregator
			// Layer: Arrowhead 2
			CompositionPathGeometry PathGeometry_1()
			{
				if (_pathGeometry_1 != null) { return _pathGeometry_1; }
				var result = _pathGeometry_1 = _c.CreatePathGeometry(Path_0());
				return result;
			}

			// - Layer aggregator
			// Layer: Line
			CompositionPathGeometry PathGeometry_2()
			{
				if (_pathGeometry_2 != null) { return _pathGeometry_2; }
				var result = _pathGeometry_2 = _c.CreatePathGeometry(Path_1());
				return result;
			}

			// - Layer aggregator
			// Layer: Line 2
			CompositionPathGeometry PathGeometry_3()
			{
				if (_pathGeometry_3 != null) { return _pathGeometry_3; }
				var result = _pathGeometry_3 = _c.CreatePathGeometry(Path_1());
				return result;
			}

			// Layer aggregator
			// Path 1
			CompositionSpriteShape SpriteShape_0()
			{
				// Offset:<13.5, 15.5>
				if (_spriteShape_0 != null) { return _spriteShape_0; }
				var result = _spriteShape_0 = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(1F, 0F, 0F, 1F, 13.5F, 15.5F)); ;
				result.StrokeBrush = ColorBrush_AlmostLightSeaGreen_FF02ABC0();
				result.StrokeMiterLimit = 5F;
				result.StrokeThickness = 4F;
				return result;
			}

			// Layer aggregator
			// Path 1
			CompositionSpriteShape SpriteShape_1()
			{
				// Offset:<13.5, 15.5>
				if (_spriteShape_1 != null) { return _spriteShape_1; }
				var result = _spriteShape_1 = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(1F, 0F, 0F, 1F, 13.5F, 15.5F)); ;
				result.Scale = new Vector2(0F, 0F);
				result.StrokeBrush = ColorBrush_AlmostLightSeaGreen_FF02ABC0();
				result.StrokeMiterLimit = 5F;
				result.StrokeThickness = 4F;
				return result;
			}

			// Layer aggregator
			// Path 1
			CompositionSpriteShape SpriteShape_2()
			{
				// Offset:<24.5, 25>
				if (_spriteShape_2 != null) { return _spriteShape_2; }
				var result = _spriteShape_2 = CreateSpriteShape(PathGeometry_2(), new Matrix3x2(1F, 0F, 0F, 1F, 24.5F, 25F)); ;
				result.StrokeBrush = ColorBrush_AlmostLightSeaGreen_FF02ABC0();
				result.StrokeMiterLimit = 5F;
				result.StrokeThickness = 4F;
				return result;
			}

			// Layer aggregator
			// Path 1
			CompositionSpriteShape SpriteShape_3()
			{
				// Offset:<24.5, 25>
				if (_spriteShape_3 != null) { return _spriteShape_3; }
				var result = _spriteShape_3 = CreateSpriteShape(PathGeometry_3(), new Matrix3x2(1F, 0F, 0F, 1F, 24.5F, 25F)); ;
				result.Scale = new Vector2(0F, 0F);
				result.StrokeBrush = ColorBrush_AlmostLightSeaGreen_FF02ABC0();
				result.StrokeMiterLimit = 5F;
				result.StrokeThickness = 4F;
				return result;
			}

			// The root of the composition.
			ContainerVisual Root()
			{
				if (_root != null) { return _root; }
				var result = _root = _c.CreateContainerVisual();
				var propertySet = result.Properties;
				propertySet.InsertScalar("Progress", 0F);
				// Layer aggregator
				result.Children.InsertAtTop(ShapeVisual_0());
				return result;
			}

			CubicBezierEasingFunction CubicBezierEasingFunction_0()
			{
				return (_cubicBezierEasingFunction_0 == null)
					? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F))
					: _cubicBezierEasingFunction_0;
			}

			// - - Layer aggregator
			// - Layer: Arrowhead 2
			// TrimEnd
			ScalarKeyFrameAnimation TrimEndScalarAnimation_0p5_to_1()
			{
				// Frame 0.
				var result = CreateScalarKeyFrameAnimation(0F, 0.5F, StepThenHoldEasingFunction());
				// Frame 22.
				result.InsertKeyFrame(0.785714269F, 0.5F, HoldThenStepEasingFunction());
				// Frame 25.
				result.InsertKeyFrame(0.892857134F, 1F, CubicBezierEasingFunction_0());
				return result;
			}

			// - - Layer aggregator
			// - Layer: Line
			// TrimEnd
			ScalarKeyFrameAnimation TrimEndScalarAnimation_1_to_0()
			{
				// Frame 0.
				var result = CreateScalarKeyFrameAnimation(0F, 1F, StepThenHoldEasingFunction());
				// Frame 3.
				result.InsertKeyFrame(0.107142858F, 1F, HoldThenStepEasingFunction());
				// Frame 11.
				result.InsertKeyFrame(0.392857134F, 0F, CubicBezierEasingFunction_0());
				return result;
			}

			// - - Layer aggregator
			// - Layer: Arrowhead
			// TrimEnd
			ScalarKeyFrameAnimation TrimEndScalarAnimation_1_to_0p5()
			{
				// Frame 0.
				var result = CreateScalarKeyFrameAnimation(0F, 1F, StepThenHoldEasingFunction());
				// Frame 3.
				result.InsertKeyFrame(0.107142858F, 1F, HoldThenStepEasingFunction());
				// Frame 9.
				result.InsertKeyFrame(0.321428567F, 0.5F, CubicBezierEasingFunction_0());
				return result;
			}

			// - - Layer aggregator
			// - Layer: Arrowhead
			// TrimStart
			ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_0p5()
			{
				// Frame 0.
				var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
				// Frame 3.
				result.InsertKeyFrame(0.107142858F, 0F, HoldThenStepEasingFunction());
				// Frame 9.
				result.InsertKeyFrame(0.321428567F, 0.5F, CubicBezierEasingFunction_0());
				return result;
			}

			// - - Layer aggregator
			// - Layer: Arrowhead 2
			// TrimStart
			ScalarKeyFrameAnimation TrimStartScalarAnimation_0p5_to_0()
			{
				// Frame 0.
				var result = CreateScalarKeyFrameAnimation(0F, 0.5F, StepThenHoldEasingFunction());
				// Frame 22.
				result.InsertKeyFrame(0.785714269F, 0.5F, HoldThenStepEasingFunction());
				// Frame 25.
				result.InsertKeyFrame(0.892857134F, 0F, CubicBezierEasingFunction_0());
				return result;
			}

			// - - Layer aggregator
			// - Layer: Line 2
			// TrimStart
			ScalarKeyFrameAnimation TrimStartScalarAnimation_1_to_0()
			{
				// Frame 0.
				var result = CreateScalarKeyFrameAnimation(0F, 1F, StepThenHoldEasingFunction());
				// Frame 17.
				result.InsertKeyFrame(0.607142866F, 1F, HoldThenStepEasingFunction());
				// Frame 22.
				result.InsertKeyFrame(0.785714269F, 0F, CubicBezierEasingFunction_0());
				return result;
			}

			// Layer aggregator
			ShapeVisual ShapeVisual_0()
			{
				var result = _c.CreateShapeVisual();
				result.Size = new Vector2(48F, 48F);
				var shapes = result.Shapes;
				// Layer: Arrowhead
				shapes.Add(SpriteShape_0());
				// Layer: Arrowhead 2
				shapes.Add(SpriteShape_1());
				// Layer: Line
				shapes.Add(SpriteShape_2());
				// Layer: Line 2
				shapes.Add(SpriteShape_3());
				return result;
			}

			StepEasingFunction HoldThenStepEasingFunction()
			{
				if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
				var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
				result.IsFinalStepSingleFrame = true;
				return result;
			}

			StepEasingFunction StepThenHoldEasingFunction()
			{
				if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
				var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
				result.IsInitialStepSingleFrame = true;
				return result;
			}

			Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
			{
				// Frame 0.
				if (_shapeVisibilityAnimation_0 != null) { return _shapeVisibilityAnimation_0; }
				var result = _shapeVisibilityAnimation_0 = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
				// Frame 11.
				result.InsertKeyFrame(0.392857134F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
				return result;
			}

			// - Layer aggregator
			// Layer: Arrowhead 2
			Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
			{
				// Frame 0.
				var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
				// Frame 22.
				result.InsertKeyFrame(0.785714269F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
				return result;
			}

			// - Layer aggregator
			// Layer: Line 2
			Vector2KeyFrameAnimation ShapeVisibilityAnimation_2()
			{
				// Frame 0.
				var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
				// Frame 17.
				result.InsertKeyFrame(0.607142866F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
				return result;
			}

			internal CurlyArrow_AnimatedVisual(
				Compositor compositor
				)
			{
				_c = compositor;
				_reusableExpressionAnimation = compositor.CreateExpressionAnimation();
				Root();
			}

			public Visual RootVisual => _root;
			public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
			public Vector2 Size => new Vector2(48F, 48F);
			void IDisposable.Dispose() => _root?.Dispose();

			public void CreateAnimations()
			{
				_pathGeometry_0.StartAnimation("TrimStart", TrimStartScalarAnimation_0_to_0p5(), AnimationController_0());
				_pathGeometry_0.StartAnimation("TrimEnd", TrimEndScalarAnimation_1_to_0p5(), AnimationController_0());
				_pathGeometry_1.StartAnimation("TrimStart", TrimStartScalarAnimation_0p5_to_0(), AnimationController_0());
				_pathGeometry_1.StartAnimation("TrimEnd", TrimEndScalarAnimation_0p5_to_1(), AnimationController_0());
				_pathGeometry_2.StartAnimation("TrimEnd", TrimEndScalarAnimation_1_to_0(), AnimationController_0());
				_pathGeometry_3.StartAnimation("TrimStart", TrimStartScalarAnimation_1_to_0(), AnimationController_0());
				_spriteShape_0.StartAnimation("Scale", ShapeVisibilityAnimation_0(), AnimationController_0());
				_spriteShape_1.StartAnimation("Scale", ShapeVisibilityAnimation_1(), AnimationController_0());
				_spriteShape_2.StartAnimation("Scale", ShapeVisibilityAnimation_0(), AnimationController_0());
				_spriteShape_3.StartAnimation("Scale", ShapeVisibilityAnimation_2(), AnimationController_0());
			}

			public void DestroyAnimations()
			{
				_pathGeometry_0.StopAnimation("TrimStart");
				_pathGeometry_0.StopAnimation("TrimEnd");
				_pathGeometry_1.StopAnimation("TrimStart");
				_pathGeometry_1.StopAnimation("TrimEnd");
				_pathGeometry_2.StopAnimation("TrimEnd");
				_pathGeometry_3.StopAnimation("TrimStart");
				_spriteShape_0.StopAnimation("Scale");
				_spriteShape_1.StopAnimation("Scale");
				_spriteShape_2.StopAnimation("Scale");
				_spriteShape_3.StopAnimation("Scale");
			}

		}
	}
}
