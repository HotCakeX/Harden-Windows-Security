<Page
    x:Class="AppControlManager.Pages.ViewCurrentPolicies"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:others="using:AppControlManager.Others"
    xmlns:VM="using:AppControlManager.ViewModels"
    d:DataContext="{d:DesignInstance Type=VM:ViewCurrentPoliciesVM}"
    xmlns:customUI="using:AppControlManager.CustomUIElements"
    xmlns:AppControlManager="using:AppControlManager"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="using:CommunityToolkit.WinUI"
    xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:controls="using:CommunityToolkit.WinUI.Controls"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:behaviors="using:CommunityToolkit.WinUI.Behaviors"
    xmlns:animatedvisuals="using:AnimatedVisuals"
    FlowDirection="{x:Bind AppSettings.ApplicationGlobalFlowDirection, Mode=OneWay}"
    mc:Ignorable="d">

    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Border Grid.Row="0" Margin="0,0,0,5" Style="{StaticResource GridCardStyle}" Padding="10">

            <controls:WrapPanel Orientation="Horizontal" HorizontalAlignment="Center" HorizontalSpacing="12" VerticalSpacing="12">

                <Button>
                    <Button.Content>
                        <StackPanel Orientation="Horizontal">
                            <FontIcon Glyph="&#xE71C;" />
                            <TextBlock Text="Filter" Margin="5,0,0,0" />
                        </StackPanel>
                    </Button.Content>

                    <Button.Flyout>

                        <customUI:MenuFlyoutV2 Closing="MenuFlyout_Closing">

                            <ToggleMenuFlyoutItem x:Uid="BasePolicies" IsChecked="{x:Bind ViewModel.IncludeBasePoliciesCheckboxState, Mode=TwoWay}">
                                <ToggleMenuFlyoutItem.Icon>
                                    <FontIcon Glyph="&#xEB41;" />
                                </ToggleMenuFlyoutItem.Icon>
                            </ToggleMenuFlyoutItem>

                            <ToggleMenuFlyoutItem x:Uid="SupplementalPolicies" IsChecked="{x:Bind ViewModel.IncludeSupplementalPoliciesCheckboxState, Mode=TwoWay}">
                                <ToggleMenuFlyoutItem.Icon>
                                    <FontIcon Glyph="&#xECC4;" />
                                </ToggleMenuFlyoutItem.Icon>
                            </ToggleMenuFlyoutItem>

                            <ToggleMenuFlyoutItem x:Uid="SystemPolicies" IsChecked="{x:Bind ViewModel.IncludeSystemPoliciesCheckboxState, Mode=TwoWay}">
                                <ToggleMenuFlyoutItem.Icon>
                                    <FontIcon Glyph="&#xE770;" />
                                </ToggleMenuFlyoutItem.Icon>
                            </ToggleMenuFlyoutItem>

                            <ToggleMenuFlyoutItem x:Uid="AutomaticPolicies" IsChecked="{x:Bind ViewModel.IncludeAppControlManagerSupplementalPoliciesCheckboxState, Mode=TwoWay}">
                                <ToggleMenuFlyoutItem.Icon>
                                    <FontIcon Glyph="&#xEC12;" />
                                </ToggleMenuFlyoutItem.Icon>
                            </ToggleMenuFlyoutItem>

                        </customUI:MenuFlyoutV2>
                    </Button.Flyout>
                </Button>

                <Button IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}" Click="{x:Bind ViewModel.RetrievePolicies}" HorizontalAlignment="Center" VerticalAlignment="Center" x:Uid="RetrievePoliciesButton">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal">
                            <AnimatedIcon Height="25" Width="25" Margin="-5,-5,0,-5">
                                <AnimatedIcon.Source>
                                    <animatedvisuals:Refresh/>
                                </AnimatedIcon.Source>
                            </AnimatedIcon>
                            <TextBlock x:Uid="RetrievePolicies" Margin="5,0,0,0" />
                        </StackPanel>
                    </Button.Content>
                    <Button.KeyboardAccelerators>
                        <KeyboardAccelerator Key="F5" Invoked="{x:Bind ViewModel.RetrievePolicies}"/>
                    </Button.KeyboardAccelerators>
                </Button>

                <TextBlock Text="{x:Bind ViewModel.PoliciesCountTextBox, Mode=OneWay}" VerticalAlignment="Center" HorizontalAlignment="Center" x:Uid="PoliciesCountTextBlock"/>

                <Button IsEnabled="{x:Bind ViewModel.RemovePolicyButtonState, Mode=OneWay}" Click="{x:Bind ViewModel.RemovePolicy_Click}" HorizontalAlignment="Center" VerticalAlignment="Center" x:Uid="RemovePolicyButton">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal">
                            <FontIcon Glyph="&#xE74D;" />
                            <TextBlock x:Uid="RemovePolicyTextBlock" Margin="5,0,0,0" />
                        </StackPanel>
                    </Button.Content>
                </Button>

                <ComboBox x:Uid="SwapPolicyComboBox" SelectedItem="{x:Bind ViewModel.SwapPolicyComboBoxSelectedItem, Mode=TwoWay}"
                          SelectedIndex="{x:Bind ViewModel.SwapPolicyComboBoxSelectedIndex, Mode=TwoWay}"
                          IsEnabled="{x:Bind ViewModel.SwapPolicyComboBoxState, Mode=OneWay}" SelectionChanged="{x:Bind ViewModel.SwapPolicyComboBox_SelectionChanged}">
                    <x:String>Default Windows</x:String>
                    <x:String>Allow Microsoft</x:String>
                    <x:String>Signed and Reputable</x:String>
                    <x:String>Strict Kernel-Mode</x:String>
                    <x:String>Strict Kernel-Mode (No Flight Roots)</x:String>
                </ComboBox>

                <!-- Search Box for filtering policies -->

                <!--
                    https://learn.microsoft.com/uwp/api/windows.ui.xaml.data.binding.updatesourcetrigger

                    With this setting TextChanged event handler will have access to the most recent text,
                    because the binding now updates as soon as the text changes rather than waiting for the control to lose focus.
                -->

                <TextBox Text="{x:Bind ViewModel.SearchBoxTextBox, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Uid="SearchPoliciesTextBox" IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                         TextChanged="{x:Bind ViewModel.SearchBox_TextChanged}" VerticalAlignment="Center" />

            </controls:WrapPanel>

        </Border>

        <customUI:ListViewV2
                  RegistryKey="Locally_Deployed_Policies"
                  Grid.Row="1"
                  SelectionMode="Single"
                  IsEnabled="{x:Bind ViewModel.UIElementsEnabledState, Mode=OneWay}"
                  SelectedIndex="{x:Bind ViewModel.ListViewSelectedIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  SelectionChanged="{x:Bind ViewModel.DeployedPolicies_SelectionChanged}"
                  SelectedItem="{x:Bind ViewModel.ListViewSelectedPolicy, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  ItemsSource="{x:Bind ViewModel.AllPolicies, Mode=OneWay}">

            <customUI:ListViewV2.Header>

                <Border CornerRadius="5" Background="Black">
                    <interactivity:Interaction.Behaviors>
                        <customUI:StickyHeaderBehaviorV2/>
                    </interactivity:Interaction.Behaviors>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth1, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth2, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth3, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth4, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth5, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth6, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth7, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth8, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth9, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ViewModel.ColumnWidth10, Mode=OneWay}" />
                        </Grid.ColumnDefinitions>
                        <Button x:Uid="PolicyIDColumnHeaderBtn" Grid.Column="0" Margin="10,0,0,0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.SortByPolicyID}" />
                        <Button x:Uid="BasePolicyIDColumnHeaderBtn" Grid.Column="1" Margin="0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.SortByBasePolicyID}" />
                        <Button x:Uid="FriendlyNameColumnHeaderBtn" Grid.Column="2" Margin="0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.SortByFriendlyName}" />
                        <Button x:Uid="VersionColumnHeaderBtn" Grid.Column="3" Margin="0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.SortByVersion}" />
                        <Button x:Uid="IsAuthorizedColumnHeaderBtn" Grid.Column="4" Margin="0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.SortByIsAuthorized}" />
                        <Button x:Uid="IsEnforcedColumnHeaderBtn" Grid.Column="5" Margin="0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.SortByIsEnforced}" />
                        <Button x:Uid="IsOnDiskColumnHeaderBtn" Grid.Column="6" Margin="0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.SortByIsOnDisk}" />
                        <Button x:Uid="IsSignedPolicyColumnHeaderBtn" Grid.Column="7" Margin="0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.SortByIsSignedPolicy}" />
                        <Button x:Uid="IsSystemPolicyColumnHeaderBtn" Grid.Column="8" Margin="0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.SortByIsSystemPolicy}" />
                        <Button x:Uid="PolicyOptionsColumnHeaderBtn" Grid.Column="9" Margin="0" Style="{StaticResource ListViewHeaderButton}" Click="{x:Bind ViewModel.SortByPolicyOptions}" />
                    </Grid>
                </Border>
            </customUI:ListViewV2.Header>

            <!-- DataTemplate for ListView items -->
            <customUI:ListViewV2.ItemTemplate>
                <DataTemplate x:DataType="others:CiPolicyInfo">
                    <!-- Setting Background="Transparent" on the Grid makes it hit-test visible, meaning that even areas without any child elements (like empty spaces in the column) will respond to pointer events.  -->
                    <Grid Background="Transparent">

                        <Grid.ContextFlyout>
                            <MenuFlyout>

                                <MenuFlyoutItem x:Uid="CopyRow" Click="{x:Bind ParentViewModel.ListViewFlyoutMenuCopy_Click}">
                                    <MenuFlyoutItem.KeyboardAccelerators>
                                        <KeyboardAccelerator Key="C" Modifiers="Control" Invoked="{x:Bind ParentViewModel.ListViewFlyoutMenuCopy_Click}"/>
                                    </MenuFlyoutItem.KeyboardAccelerators>
                                    <MenuFlyoutItem.Icon>
                                        <FontIcon Glyph="&#xE8C8;" />
                                    </MenuFlyoutItem.Icon>
                                </MenuFlyoutItem>

                                <MenuFlyoutSubItem x:Uid="CopyIndividualItems">
                                    <MenuFlyoutSubItem.Icon>
                                        <FontIcon Glyph="&#xE8C8;" />
                                    </MenuFlyoutSubItem.Icon>

                                    <MenuFlyoutSubItem.Items>

                                        <MenuFlyoutItem x:Uid="PolicyIDHeader" Click="{x:Bind ParentViewModel.CopyPolicyID_Click}">
                                            <MenuFlyoutItem.Icon>
                                                <FontIcon Glyph="&#xE8C8;" />
                                            </MenuFlyoutItem.Icon>
                                        </MenuFlyoutItem>

                                        <MenuFlyoutItem x:Uid="BasePolicyIDHeader" Click="{x:Bind ParentViewModel.CopyBasePolicyID_Click}">
                                            <MenuFlyoutItem.Icon>
                                                <FontIcon Glyph="&#xE8C8;" />
                                            </MenuFlyoutItem.Icon>
                                        </MenuFlyoutItem>

                                        <MenuFlyoutItem x:Uid="FriendlyNameHeader" Click="{x:Bind ParentViewModel.CopyFriendlyName_Click}">
                                            <MenuFlyoutItem.Icon>
                                                <FontIcon Glyph="&#xE8C8;" />
                                            </MenuFlyoutItem.Icon>
                                        </MenuFlyoutItem>

                                        <MenuFlyoutItem x:Uid="VersionHeader" Click="{x:Bind ParentViewModel.CopyVersion_Click}">
                                            <MenuFlyoutItem.Icon>
                                                <FontIcon Glyph="&#xE8C8;" />
                                            </MenuFlyoutItem.Icon>
                                        </MenuFlyoutItem>

                                        <MenuFlyoutItem x:Uid="IsAuthorizedHeader" Click="{x:Bind ParentViewModel.CopyIsAuthorized_Click}">
                                            <MenuFlyoutItem.Icon>
                                                <FontIcon Glyph="&#xE8C8;" />
                                            </MenuFlyoutItem.Icon>
                                        </MenuFlyoutItem>

                                        <MenuFlyoutItem x:Uid="IsEnforcedHeader" Click="{x:Bind ParentViewModel.CopyIsEnforced_Click}">
                                            <MenuFlyoutItem.Icon>
                                                <FontIcon Glyph="&#xE8C8;" />
                                            </MenuFlyoutItem.Icon>
                                        </MenuFlyoutItem>

                                        <MenuFlyoutItem x:Uid="IsOnDiskHeader" Click="{x:Bind ParentViewModel.CopyIsOnDisk_Click}">
                                            <MenuFlyoutItem.Icon>
                                                <FontIcon Glyph="&#xE8C8;" />
                                            </MenuFlyoutItem.Icon>
                                        </MenuFlyoutItem>

                                        <MenuFlyoutItem x:Uid="IsSignedPolicyHeader" Click="{x:Bind ParentViewModel.CopyIsSignedPolicy_Click}">
                                            <MenuFlyoutItem.Icon>
                                                <FontIcon Glyph="&#xE8C8;" />
                                            </MenuFlyoutItem.Icon>
                                        </MenuFlyoutItem>

                                        <MenuFlyoutItem x:Uid="IsSystemPolicyHeader" Click="{x:Bind ParentViewModel.CopyIsSystemPolicy_Click}">
                                            <MenuFlyoutItem.Icon>
                                                <FontIcon Glyph="&#xE8C8;" />
                                            </MenuFlyoutItem.Icon>
                                        </MenuFlyoutItem>

                                        <MenuFlyoutItem x:Uid="PolicyOptionsHeader" Click="{x:Bind ParentViewModel.CopyPolicyOptionsDisplay_Click}">
                                            <MenuFlyoutItem.Icon>
                                                <FontIcon Glyph="&#xE8C8;" />
                                            </MenuFlyoutItem.Icon>
                                        </MenuFlyoutItem>

                                    </MenuFlyoutSubItem.Items>

                                </MenuFlyoutSubItem>
                            </MenuFlyout>
                        </Grid.ContextFlyout>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{x:Bind ParentViewModel.ColumnWidth1, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ParentViewModel.ColumnWidth2, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ParentViewModel.ColumnWidth3, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ParentViewModel.ColumnWidth4, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ParentViewModel.ColumnWidth5, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ParentViewModel.ColumnWidth6, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ParentViewModel.ColumnWidth7, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ParentViewModel.ColumnWidth8, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ParentViewModel.ColumnWidth9, Mode=OneWay}" />
                            <ColumnDefinition Width="{x:Bind ParentViewModel.ColumnWidth10, Mode=OneWay}" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{x:Bind PolicyID}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="0"/>
                        <TextBlock Text="{x:Bind BasePolicyID}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="1"/>
                        <TextBlock Text="{x:Bind FriendlyName}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="2"/>
                        <TextBlock Text="{x:Bind Version}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="3"/>
                        <TextBlock Text="{x:Bind IsAuthorized}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="4"/>
                        <TextBlock Text="{x:Bind IsEnforced}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="5"/>
                        <TextBlock Text="{x:Bind IsOnDisk}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="6"/>
                        <TextBlock Text="{x:Bind IsSignedPolicy}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="7"/>
                        <TextBlock Text="{x:Bind IsSystemPolicy}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="8"/>
                        <TextBlock Text="{x:Bind PolicyOptionsDisplay}" Style="{StaticResource ListViewCellTextBlock}" Grid.Column="9"/>
                    </Grid>
                </DataTemplate>
            </customUI:ListViewV2.ItemTemplate>
        </customUI:ListViewV2>
    </Grid>
</Page>
